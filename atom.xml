<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pipi`Blog🍉🍉</title>
  
  <subtitle>欢迎大家的访问哦❤</subtitle>
  <link href="https://pipi1002.github.io/atom.xml" rel="self"/>
  
  <link href="https://pipi1002.github.io/"/>
  <updated>2023-11-09T11:16:39.457Z</updated>
  <id>https://pipi1002.github.io/</id>
  
  <author>
    <name>Pipi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构exam</title>
    <link href="https://pipi1002.github.io/2023/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84exam/"/>
    <id>https://pipi1002.github.io/2023/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84exam/</id>
    <published>2023-11-09T10:55:41.000Z</published>
    <updated>2023-11-09T11:16:39.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据结构中，与所使用的计算机无关的是数据的-结构"><a href="#1-数据结构中，与所使用的计算机无关的是数据的-结构" class="headerlink" title="1.数据结构中，与所使用的计算机无关的是数据的__结构"></a>1.数据结构中，与所使用的计算机无关的是数据的<em>__</em>结构</h2><ul><li>[ ] 存储</li><li>[ ] 物理</li><li>[x] 逻辑</li><li>[ ] 物理和逻辑</li></ul><h2 id="2-计算机算法必须具备输入，输出和-等5个特性"><a href="#2-计算机算法必须具备输入，输出和-等5个特性" class="headerlink" title="2.计算机算法必须具备输入，输出和__等5个特性"></a>2.计算机算法必须具备输入，输出和<em>__</em>等5个特性</h2><ul><li>[ ] 可行性，可移植性和可扩充性</li><li>[x] 可行性，确定性和有穷性</li><li>[ ] 确定性，有穷性和稳定性</li><li>[ ] 易读性，稳定性和安全性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-数据结构中，与所使用的计算机无关的是数据的-结构&quot;&gt;&lt;a href=&quot;#1-数据结构中，与所使用的计算机无关的是数据的-结构&quot; class=&quot;headerlink&quot; title=&quot;1.数据结构中，与所使用的计算机无关的是数据的__结构&quot;&gt;&lt;/a&gt;1.数据结构中</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>OJ题</title>
    <link href="https://pipi1002.github.io/2023/09/25/OJ/"/>
    <id>https://pipi1002.github.io/2023/09/25/OJ/</id>
    <published>2023-09-25T11:00:56.000Z</published>
    <updated>2023-11-07T12:44:55.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OJ题"><a href="#OJ题" class="headerlink" title="OJ题"></a>OJ题</h1><p>1.IO型:自己写头文件，main函数等等</p><p>测试用例：我们要去scanf获取</p><p>结果：用printf输出</p><p>2.接口型（实现已知函数）：不需要写头文件，主函数，提交了以后，会跟oj服务器上他准备好的代码合并</p><p>测试用例：通过参数传过来</p><p>结果：一般通过返回值拿的，也有可能是输出性参数</p><h2 id="一个整形数组nums里除两个数字以外，其它数字都出现了2次，请写程序找出这两个只出现一次的数据"><a href="#一个整形数组nums里除两个数字以外，其它数字都出现了2次，请写程序找出这两个只出现一次的数据" class="headerlink" title="一个整形数组nums里除两个数字以外，其它数字都出现了2次，请写程序找出这两个只出现一次的数据"></a>一个整形数组nums里除两个数字以外，其它数字都出现了2次，请写程序找出这两个只出现一次的数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C语言不支持返回两个值</span></span><br><span class="line"><span class="comment">//例如输入：nums=[4,1,4,6]  输出：[1,6]或者[6,1]</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">singleNumbers</span><span class="params">(int8 nums,<span class="type">int</span> numsSize,<span class="type">int</span> * returnSize)</span><span class="comment">//这个returnSize就叫输出型参数</span></span><br><span class="line">&#123;</span><br><span class="line">    *returnSize=<span class="number">2</span>;<span class="comment">//把返回数组的大小给他</span></span><br><span class="line">    <span class="type">int</span>* arr=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给你一个数组nums和一个值val，你需要原地溢出所有数值相等于val的元素，并返回移除后数组的新长度"><a href="#给你一个数组nums和一个值val，你需要原地溢出所有数值相等于val的元素，并返回移除后数组的新长度" class="headerlink" title="给你一个数组nums和一个值val，你需要原地溢出所有数值相等于val的元素，并返回移除后数组的新长度"></a>给你一个数组nums和一个值val，你需要原地溢出所有数值相等于val的元素，并返回移除后数组的新长度</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.遇到和val相同的数组元素时，将其后所有元素向前移一位覆盖，找到所有的val，依次挪动数据覆盖删除。时间复杂度为O(n^2)最坏的情况数组中大部分值甚至全部都是val[(n-1)+(n-2)+...]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2.建立一个temp数组，把不是val的值放在temp数组中，再把temp数组的值拷贝回去O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.定义src和dst为数组下标，用src找不等于 val的值(等于val dst不动，src继续向后找)，放到dst指向的位置中去，再++src，++dst。因为是常数个数所以可以认为O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072012708.png" alt=""></p><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231015_221742.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072012353.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize,<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> src=<span class="number">0</span>,dst=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(src&lt;numSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[src]!=val)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[dst]=nums[src]; </span><br><span class="line">            src++;</span><br><span class="line">            dst++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            src++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重，删除有序数组中的重复数字（双指针的变形）"><a href="#去重，删除有序数组中的重复数字（双指针的变形）" class="headerlink" title="去重，删除有序数组中的重复数字（双指针的变形）"></a>去重，删除有序数组中的重复数字（双指针的变形）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：nums=[1,1,2]</span></span><br><span class="line"><span class="comment">输出：2，nums=[1,2]</span></span><br><span class="line"><span class="comment">解释：函数应返回新长度2，并且原数组nums的前两个元素被修改为1，2。。不需要考虑数组中超出新长度后面的元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numsSize)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span>(numsSize==<span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> dst=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(j&lt;numsSize)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(nums[i]==nums[j])</span><br><span class="line">         &#123;</span><br><span class="line">             ++j;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             nums[dst]=nums[i];</span><br><span class="line">             ++dst;</span><br><span class="line">             i=j;</span><br><span class="line">             j++</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     nums[dst]=nums[i];</span><br><span class="line">     ++dst;</span><br><span class="line">     <span class="keyword">return</span> dst;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//下图为两种情况[0,0,1,1,1,2,2,3,3,4]和[0,0,1,1,2,2,3,3]</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013850.png" alt=""></p><h2 id="合并两个有序数组（归并排序）"><a href="#合并两个有序数组（归并排序）" class="headerlink" title="合并两个有序数组（归并排序）"></a>合并两个有序数组（归并排序）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有序数组：非递减数组</span></span><br><span class="line"><span class="comment">输入：nums1=[1，2，3，0，0，0]，m=3,nums2=</span></span><br><span class="line"><span class="comment">[2,5,6]</span></span><br><span class="line"><span class="comment">输出：[1,2,2,3,5,6]</span></span><br><span class="line"><span class="comment">注意：最终，合并后的数组不应由函数返回，而是存储在数组num1中，为了应对这种情况，num1的初始长度为m+n，其中前m个元素表示应合并的元素，后n给元素为0，应忽略num2的长度为n</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>* nums1,<span class="type">int</span> nums1Size,<span class="type">int</span> m,<span class="type">int</span>* nums2,<span class="type">int</span> nums2Size,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> end1=m<span class="number">-1</span>,end2=n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> end=m+n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(end1&gt;=<span class="number">0</span> &amp;&amp; end2&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[end1]&gt;nums2[end2])<span class="comment">//num1大就把nums1的数据放end所对应的数组元素上，nums2数据大就把nums2的数据放end所对应的数组元素上</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end]=nums1[end1];</span><br><span class="line">            --end2;</span><br><span class="line">            --end1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end]=nums2[end2];</span><br><span class="line">            --end2;</span><br><span class="line">            --end1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(end2&gt;=<span class="number">0</span>)<span class="comment">//不可能同时结束,当nums2先结束时（图1），不用做后续处理;另一种情况(合并[2,2,3,0,0,0]和[1,1,6])时是num1先结束就要把nums2的剩余数据赋值给nums1</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums1[end]=nums[end2];</span><br><span class="line">        --end2;</span><br><span class="line">        --end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013766.png" alt=""></p><p><code>图2</code></p><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013093.png" alt=""></p><p><code>此题是从后往前放数据从大到小开始放;而归并排序是从小到大比较从前往后放，并且归并排序是生成一个新数组存放排过序的元素</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="comment">//给两个指针分别指向两个数组的起始元素进行比较，小的放入第三个数组，并且这个数对应的指针++,再继续比较两个指针所指向的元素大小，把小元素的继续放在第三个数组中，再++它所对应的指针</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013713.png" alt=""></p><h2 id="移除链表元素（给你一个链表的头节点head和一个整数val，请你删除链表中所有满足Node-val-val的节点，并返回新的头节点）"><a href="#移除链表元素（给你一个链表的头节点head和一个整数val，请你删除链表中所有满足Node-val-val的节点，并返回新的头节点）" class="headerlink" title="移除链表元素（给你一个链表的头节点head和一个整数val，请你删除链表中所有满足Node.val==val的节点，并返回新的头节点）"></a>移除链表元素（给你一个链表的头节点head和一个整数val，请你删除链表中所有满足Node.val==val的节点，并返回新的头节点）</h2><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013898.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">removeElement</span><span class="params">(<span class="keyword">struct</span> ListNode* head,<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Listnode</span>* <span class="title">prev</span>=</span><span class="literal">NULL</span>,*cur=head;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当第一个都需要删除(头删)的时候就会报错例如[7，7，7，7]  7</span></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val==val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//头删</span></span><br><span class="line">            <span class="keyword">if</span>(cur==head)</span><br><span class="line">            &#123;</span><br><span class="line">                head=cur-&gt;next;<span class="comment">//head指向下一个节点</span></span><br><span class="line">                <span class="built_in">free</span>(cur);<span class="comment">//删除第一个节点</span></span><br><span class="line">                cur=head;<span class="comment">//删除完的第一个就是当前head指向的节点，再给cur</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//中间删除</span></span><br><span class="line">                prev-&gt;next=cur-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(cur);</span><br><span class="line">            </span><br><span class="line">                cur=prev-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//迭代往后走</span></span><br><span class="line">            prev=cur;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span></span><br><span class="line">    <span class="comment">//n1,n2用来翻转n3用来记录下一个节点，方便迭代的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果链表为空就不需要翻转</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">n1</span>,<span class="title">n2</span>,<span class="title">n3</span>;</span></span><br><span class="line">    n1=<span class="literal">NULL</span>;</span><br><span class="line">    n2=head;</span><br><span class="line">    n3=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(n2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//翻转</span></span><br><span class="line">        n2-&gt;next=n1;</span><br><span class="line">        <span class="comment">//迭代往后走</span></span><br><span class="line">        n1=n2;</span><br><span class="line">        n2=n3;</span><br><span class="line">        <span class="comment">//当n2为空时n3没有办法指向下一个节点因为之前n3已经为空</span></span><br><span class="line">        <span class="keyword">if</span>(n3!=<span class="literal">NULL</span>)</span><br><span class="line">            n3=n3-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013051.png" alt=""></p><h6 id="上图为基本翻转逻辑，下图为for循环结束条件图示"><a href="#上图为基本翻转逻辑，下图为for循环结束条件图示" class="headerlink" title="上图为基本翻转逻辑，下图为for循环结束条件图示"></a>上图为基本翻转逻辑，下图为for循环结束条件图示</h6><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013940.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种算法:取原链表中节点，头插到newhead新链表中</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">cur</span>=</span>head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newhead</span>=</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>=</span>cur-&gt;next; </span><br><span class="line">        <span class="comment">//头插</span></span><br><span class="line">        cur-&gt;next=newhead;</span><br><span class="line">        newhead=cur;</span><br><span class="line">        <span class="comment">//迭代往后走</span></span><br><span class="line">        cur=next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newhead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013581.png" alt=""></p><h2 id="返回链表的中间节点-如果有两个中间节点则返回第二个中间节点-要求-只能遍历链表一次"><a href="#返回链表的中间节点-如果有两个中间节点则返回第二个中间节点-要求-只能遍历链表一次" class="headerlink" title="返回链表的中间节点(如果有两个中间节点则返回第二个中间节点)    要求:只能遍历链表一次"></a>返回链表的中间节点(如果有两个中间节点则返回第二个中间节点)    要求:只能遍历链表一次</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快慢指针问题:定义两个指针一个快指针fast一个慢指针slow，fast每次走两步，slow每次走一步，如果是奇数个数字fast走到最后一个数字的后一个指向空此时slow为第二个中间节点；如果是偶数给数字fast走到最后一个时slow正好走到中间节点</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">middleNode</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span>,*<span class="title">fast</span>;</span></span><br><span class="line">    slow=fast=head;</span><br><span class="line">    <span class="keyword">while</span>(fast&amp;&amp;fast-&gt;next)<span class="comment">//当发射台走到最后或者走到NULL时停止</span></span><br><span class="line">    &#123;</span><br><span class="line">        slowslow-&gt;next;</span><br><span class="line">        fast=fast-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变形：求链表倒数第K个节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.先让fast走k步；slow和fast再一起走，fast==NULL时，slow为倒数第k个节点</span></span><br><span class="line"><span class="comment">2.先让fast走k-1步，slow和fast再一起走，fast-&gt;==NULL时，slow为倒数第k个节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">FindKthToTail</span><span class="params">(<span class="keyword">struct</span> ListNode* plistHead,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span>,*<span class="title">slow</span>;</span></span><br><span class="line">    slow=fast=plistHead;</span><br><span class="line">    <span class="keyword">while</span>(k--)<span class="comment">//循环k次</span></span><br><span class="line">    <span class="comment">//while(--k)//循环k-1次</span></span><br><span class="line">    &#123;</span><br><span class="line">        fast=fast-&gt;next;</span><br><span class="line">        <span class="comment">//k大于链表的长度 当&#123;1,2,3,4,3,2&#125;，k=30时</span></span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            retuen <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(fast)</span><br><span class="line">    &#123;</span><br><span class="line">        slow=slow-&gt;next;</span><br><span class="line">        fast=fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013585.png" alt=""></p><h6 id="上图为变形前的示意图"><a href="#上图为变形前的示意图" class="headerlink" title="上图为变形前的示意图"></a>上图为变形前的示意图</h6><h2 id="合并两个有序列表"><a href="#合并两个有序列表" class="headerlink" title="合并两个有序列表"></a>合并两个有序列表</h2><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013210.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用返回值的方式就不需要用二级指针</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> ListNode* l1,<span class="keyword">struct</span> ListNode* l2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当其中一个链表为空，就返回另一个链表</span></span><br><span class="line"><span class="keyword">if</span>(l1==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line"><span class="keyword">if</span>(l2==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span>=</span><span class="literal">NULL</span>,*tail=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(l1&amp;&amp;l2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(li-&gt;val&lt;l2-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=tail=l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tail-&gt;next=l1;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        l1=l1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=tail=l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tail-&gt;next=l2;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        l2=l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当某一个链表结束的时候把另外一个链接，由于不知道哪一个先结束于是用两个if语句</span></span><br><span class="line">    <span class="keyword">if</span>(l1)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next=l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next=l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;<span class="comment">//fan&#x27;hui</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(l1==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line"><span class="keyword">if</span>(l2==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span>=</span><span class="literal">NULL</span>,*tail=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//哨兵位的头节点</span></span><br><span class="line">head=tail=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line"><span class="keyword">while</span>(l1&amp;&amp;l2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(li-&gt;val&lt;l2-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next=l1;</span><br><span class="line">        tail=tail-&gt;next;</span><br><span class="line">        l1=l1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next=l2;</span><br><span class="line">        tail=tail-&gt;next;</span><br><span class="line">        l2=l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(l1)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next=l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next=l2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能直接返回哨兵位的头，要释放哨兵位的头，返回哨兵位的next</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">list</span>=</span>head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><h2 id="链表的分割-现在有一链表的头指针ListNode-pHead-给一定值x，编写一段代码将所有小于x的节点排在其余节点之前，且不能改变原来的数据顺序，返回重新排列后的链表的头指针"><a href="#链表的分割-现在有一链表的头指针ListNode-pHead-给一定值x，编写一段代码将所有小于x的节点排在其余节点之前，且不能改变原来的数据顺序，返回重新排列后的链表的头指针" class="headerlink" title="链表的分割(现在有一链表的头指针ListNode* pHead,给一定值x，编写一段代码将所有小于x的节点排在其余节点之前，且不能改变原来的数据顺序，返回重新排列后的链表的头指针)"></a>链表的分割(现在有一链表的头指针ListNode* pHead,给一定值x，编写一段代码将所有小于x的节点排在其余节点之前，且不能改变原来的数据顺序，返回重新排列后的链表的头指针)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//eg:2  3  5  1  7  2    x=4</span></span><br><span class="line"><span class="comment">//结果:2 3 1 2 5 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//新定义两个链表，把比x小的放尾插在第一个链表中，把大于x的尾插在第二个链表中再把这两个链表链接</span></span><br><span class="line">ListNode* <span class="title function_">partition</span><span class="params">(ListNode* pHead,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">lessHead</span>,*<span class="title">lessTail</span>,*<span class="title">greaterHead</span>,*<span class="title">greaterTail</span>;</span></span><br><span class="line">    <span class="comment">//开一个哨兵位，方便尾插</span></span><br><span class="line">    lessHead=lessTail=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strcut ListNode*));</span><br><span class="line">    lessTail-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    greaterHead=lessTail=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strcut ListNode*));</span><br><span class="line">    greaterTail-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">cur</span>=</span>pHead;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            lessTail-&gt;next=cur;</span><br><span class="line">            lessTail=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            greaterTail-&gt;next=cur;</span><br><span class="line">            greaterTail=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链接两个链表less和greater</span></span><br><span class="line">    lessTail-&gt;next=greaterHead-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//防止无限循环</span></span><br><span class="line">    greater-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//free两个哨兵节点，但是free之后就无法返回新链表(less和greater连接过后的链表)的头节点，所以需要提前记录lessHead的下一个节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newHead</span>=</span>lessHead-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(lessHead);</span><br><span class="line">    <span class="built_in">free</span>(greaterHead);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newhead;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="图一：初始步骤"><a href="#图一：初始步骤" class="headerlink" title="图一：初始步骤"></a>图一：初始步骤</h6><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072013202.png" alt=""></p><h6 id="图二：逻辑步骤"><a href="#图二：逻辑步骤" class="headerlink" title="图二：逻辑步骤"></a>图二：逻辑步骤</h6><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231028_160714.png" alt=""></p><h6 id="图三：逻辑结束"><a href="#图三：逻辑结束" class="headerlink" title="图三：逻辑结束"></a>图三：逻辑结束</h6><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014244.png" alt=""></p><h6 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a><code>报错原因：</code></h6><p>15本来指向4，现在4又指向12，无限循环，内存会超</p><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014917.png" alt=""></p><h2 id="链表的回文结构"><a href="#链表的回文结构" class="headerlink" title="链表的回文结构"></a>链表的回文结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于一个链表，请设计一个时间复杂度为O(n),额外空间复杂度为O(1)的算法，判断其是否为回文结构，给定一个链表的头指针A，请返回一个bool值，代表其是否为回文结构，保证链表长度小于等于900</span></span><br><span class="line"><span class="comment">//例如：1-&gt;2-&gt;2-&gt;1  返回:true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法:把后半部分逆置(翻转)，然后用前半部分和后半部分进行比较(不用把前后两部分断开)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">middleNode</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">mid</span>=</span>middleNode(A);<span class="comment">//之前题目的代码，找到中间节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">rHead</span>=</span>reverseList(mid);<span class="comment">//之前题目的代码，翻转链表从mid开始</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">curA</span>=</span>A;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">curR</span>=</span>rHead;</span><br><span class="line">    <span class="keyword">while</span>(curA &amp;&amp; curR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(curA-&gt;val!=curR-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            curA=curA-&gt;next;</span><br><span class="line">            curR=curR-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014562.png" alt=""></p><h6 id="不用断开原因本来中间的2就指向末尾的3-奇数情况-，本来中间的2就指向末尾的1-偶数情况"><a href="#不用断开原因本来中间的2就指向末尾的3-奇数情况-，本来中间的2就指向末尾的1-偶数情况" class="headerlink" title="不用断开原因本来中间的2就指向末尾的3(奇数情况)，本来中间的2就指向末尾的1(偶数情况)"></a>不用断开原因本来中间的2就指向末尾的3(奇数情况)，本来中间的2就指向末尾的1(偶数情况)</h6><h2 id="链表相交-一个节点只有一个next，只能聚合不能分散"><a href="#链表相交-一个节点只有一个next，只能聚合不能分散" class="headerlink" title="链表相交(一个节点只有一个next，只能聚合不能分散 )"></a>链表相交(一个节点只有一个next，只能聚合不能分散 )</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.判断两个链表是否相交  2.如果相交，求交点</span></span><br><span class="line"><span class="comment">//方法1: 依次取A链表中的每个节点跟B链表中的所有节点比较，如果有地址相同的节点，就是相交，第一个相同的就是交点    方法2: 尾节点相同就相交，否则就不相交 求焦点:长的链表先走长度差，再同时走，第一个相同就是焦点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2实现如下：</span></span><br><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">getIntersectionNode</span><span class="params">(<span class="keyword">struct</span> ListNode *headB)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">tailA</span>=</span>headA;<span class="comment">//不用headA去迭代的原因是不方便找头</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">tailB</span>=</span>headB;</span><br><span class="line">    <span class="type">int</span> lenA=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tailA-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        ++lenA;<span class="comment">//算出A链表的长度</span></span><br><span class="line">        tailA=tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> lenB=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tailB-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        ++lenB;<span class="comment">//算出B链表的长度</span></span><br><span class="line">        tailB=tailB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不相交</span></span><br><span class="line">    <span class="keyword">if</span>(tailA!=tailB)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> gap=<span class="built_in">abs</span>(lenA-lenB);<span class="comment">//两个链表的差距gab,abs是绝对值的意思</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">longList</span>=</span>headA;<span class="comment">//假设A长B短</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">shortList</span>=</span>headB;</span><br><span class="line">    <span class="keyword">if</span>(lenA&lt;lenB)</span><br><span class="line">    &#123;</span><br><span class="line">        shortList=headA;</span><br><span class="line">        longList=headB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//长的先走gap步</span></span><br><span class="line">    <span class="keyword">while</span>(gap--)</span><br><span class="line">    &#123;</span><br><span class="line">         longList=longList-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(longList!=shortList)</span><br><span class="line">    &#123;</span><br><span class="line">        longList=Longlist-&gt;next;</span><br><span class="line">        shortList=shortList-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    retuen longList; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014892.png" alt=""></p><h6 id="带环的三种情况"><a href="#带环的三种情况" class="headerlink" title="带环的三种情况"></a>带环的三种情况</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.是否带环  2.找出带环链表的入口节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">slow和fast指向链表的开始，slow一次走一步，fast一次走两步，不带环fast就会走向空，带环，fast就会在环里追上slow(zhui&#x27;ji)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hasCycle</span><span class="params">(<span class="keyword">struct</span> ListNode *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span>=</span>head,*fast=head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        slow=slow-&gt;next;</span><br><span class="line">        fast=fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(slow==fast)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="comment">//一个指针从相遇点开始走，一个指针从链表头开始走，它们会在环的入口点相遇</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">追上相遇的过程中，慢指针走的距离:L+X;快指针走到距离:L+n*X+C(C为环的长度，n是他们相遇之前，fast在环里面走的圈数，n&gt;=1)</span></span><br><span class="line"><span class="comment">在相遇时，慢指针不可能走在环内超过一圈，因为此时快指针已经走两圈了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">快指针走的路程是慢指针的二倍</span></span><br><span class="line"><span class="comment">2(L+X)=L+n*C+X</span></span><br><span class="line"><span class="comment">L+X=n*C</span></span><br><span class="line"><span class="comment">L=n*C-X</span></span><br><span class="line"><span class="comment">L=(n-1)*C+C-X</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(n-1)*C指的是整数倍圈，相当于从meetNode又走到meetNode</span></span><br><span class="line"><span class="comment">C-X指的是从meetNode走到环入口点</span></span><br><span class="line"><span class="comment">所以 L=(n-1)*C+C-X 指的是一个指针从相遇点开始走，一个指针从链表头开始走，它们会在环的入口点相遇</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">detectCycle</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span>=</span>head,*fast=head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        slow=slow-&gt;next;</span><br><span class="line">        fast=fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(slow==fast)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//相遇</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">meet</span>=</span>slow;</span><br><span class="line">            <span class="comment">//一个指针从相遇点开始走，一个指针从链表头开始走，它们会在环的入口点相遇     公式证明，看上面讲解</span></span><br><span class="line">            <span class="keyword">while</span>(meet!=head)</span><br><span class="line">            &#123;</span><br><span class="line">                meet=meet-&gt;next;</span><br><span class="line">                head=head-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> meet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="延伸问题："><a href="#延伸问题：" class="headerlink" title="延伸问题："></a>延伸问题：</h6><h6 id="1-为什么slow和fast一定会在环中相遇？会不会在环里面错过，永远遇不上？-不会"><a href="#1-为什么slow和fast一定会在环中相遇？会不会在环里面错过，永远遇不上？-不会" class="headerlink" title="1.为什么slow和fast一定会在环中相遇？会不会在环里面错过，永远遇不上？  不会"></a>1.为什么slow和fast一定会在环中相遇？会不会在环里面错过，永远遇不上？  不会</h6><ul><li>第一步：slow和fast，fast一定先进环，这时slow走了入环前距离的一半</li><li>第二步：随着slow进环，fast已经在环里面走了一段，走了多少跟环的大小有关，假设slow进环的时候，slow跟fast的距离是N，fast开始追slow，slow每往前走一步，fast每次往前走两步，每追一次fast和slow的距离变化为N   ,N-1,N-2,N-3,……,1,0 所以会相遇</li></ul><h6 id="2-为什么slow走一步，fast走两步？fast能不能一次走3，4，5…n？-结论：不一定会相遇"><a href="#2-为什么slow走一步，fast走两步？fast能不能一次走3，4，5…n？-结论：不一定会相遇" class="headerlink" title="2.为什么slow走一步，fast走两步？fast能不能一次走3，4，5…n？   结论：不一定会相遇"></a>2.为什么slow走一步，fast走两步？fast能不能一次走3，4，5…n？   结论：不一定会相遇</h6><ul><li>以fast走三步为例子<ul><li>N为偶数，每追一次fast和slow的距离变化为N   ,N-1,N-2,N-3,……,1,0可以追上</li><li>N为奇数 ，每追一次fast和slow的距离变化为N ，N-2,N-4,N-6,……,1,-1这一次追不上。距离变成-1意味着他们之间的距离变成C-1(C是环的长度)<ul><li>如果C-1是奇数，那么就永远追不上了，陷入死循环</li><li>如果C-1是偶数，那么就可以追上</li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014088.png" alt=""></p><h6 id="图一解决第一问"><a href="#图一解决第一问" class="headerlink" title="图一解决第一问"></a>图一解决第一问</h6><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014570.png" alt=""></p><h6 id="图二解决第二问"><a href="#图二解决第二问" class="headerlink" title="图二解决第二问"></a>图二解决第二问</h6><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072014377.png" alt=""></p><h6 id="图三是第二个问题的第二种方法，转换为链表相交问题（相遇点下一个点为第二个链表的头节点，把相遇点滞空）"><a href="#图三是第二个问题的第二种方法，转换为链表相交问题（相遇点下一个点为第二个链表的头节点，把相遇点滞空）" class="headerlink" title="图三是第二个问题的第二种方法，转换为链表相交问题（相遇点下一个点为第二个链表的头节点，把相遇点滞空）"></a>图三是第二个问题的第二种方法，转换为链表相交问题（相遇点下一个点为第二个链表的头节点，把相遇点滞空）</h6><h2 id="复制带随机指针的链表（复杂链表的复制）"><a href="#复制带随机指针的链表（复杂链表的复制）" class="headerlink" title="复制带随机指针的链表（复杂链表的复制）"></a>复制带随机指针的链表（复杂链表的复制）</h2><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072016034.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个长度为n的链表，每个节点包含一个额外增加的随机指针random，该指针可以指向链表中的任何节点或空节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">copyRandomList</span><span class="params">(<span class="keyword">struct</span> Node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.拷贝节点插入原节点后面</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">cur</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">copy</span>=</span>(<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        copy-&gt;val=cur-&gt;val;</span><br><span class="line">        <span class="comment">//插入copy节点</span></span><br><span class="line">        copy-&gt;next=cur-&gt;next;</span><br><span class="line">        cur-&gt;next=copy;</span><br><span class="line">        </span><br><span class="line">        cur=copy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.根据原节点处理copy节点的random节点</span></span><br><span class="line">    cur=head;<span class="comment">//重新让cur指向头节点开始迭代</span></span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">copy</span>=</span>cur-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;random==<span class="literal">NULL</span>)<span class="comment">//如果被copy的指针的random指向空</span></span><br><span class="line">        &#123;</span><br><span class="line">            copy-&gt;random=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            copy-&gt;random=cur-&gt;random-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=copy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.复制节点解下来链接成一个新链表，恢复原链表链接关系</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">copyHead</span>=</span><span class="literal">NULL</span>,*copyTail;</span><br><span class="line">    cur=head;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">copy</span>=</span>cur-&gt;next;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>=</span>copy-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(copyTail==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            copyHead=copyTail=copy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            copyTail-&gt;next=copy;</span><br><span class="line">            copyTail=copy;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cur-&gt;next=next;</span><br><span class="line">        </span><br><span class="line">        cur=next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202311072017852.png" alt=""></p><h6 id="3-复制节点解下来链接成一个新链表，恢复原链表链接关系"><a href="#3-复制节点解下来链接成一个新链表，恢复原链表链接关系" class="headerlink" title="3.复制节点解下来链接成一个新链表，恢复原链表链接关系"></a>3.复制节点解下来链接成一个新链表，恢复原链表链接关系</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OJ题&quot;&gt;&lt;a href=&quot;#OJ题&quot; class=&quot;headerlink&quot; title=&quot;OJ题&quot;&gt;&lt;/a&gt;OJ题&lt;/h1&gt;&lt;p&gt;1.IO型:自己写头文件，main函数等等&lt;/p&gt;
&lt;p&gt;测试用例：我们要去scanf获取&lt;/p&gt;
&lt;p&gt;结果：用printf输出&lt;</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>DataStructure</title>
    <link href="https://pipi1002.github.io/2023/09/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://pipi1002.github.io/2023/09/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2023-09-25T11:00:56.000Z</published>
    <updated>2023-11-04T09:00:58.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="时间复杂度（时间复杂度及空间复杂度）"><a href="#时间复杂度（时间复杂度及空间复杂度）" class="headerlink" title="时间复杂度（时间复杂度及空间复杂度）"></a>时间复杂度（时间复杂度及空间复杂度）</h2><h6 id="摩尔定律（每18个月运行内存都会更新，空间复杂度不再特变关注）"><a href="#摩尔定律（每18个月运行内存都会更新，空间复杂度不再特变关注）" class="headerlink" title="摩尔定律（每18个月运行内存都会更新，空间复杂度不再特变关注）"></a>摩尔定律（每18个月运行内存都会更新，空间复杂度不再特变关注）</h6><ul><li>用常数1取代运行时间中所有加法常数</li><li>在修改后的运行次数函数中，只保留最高阶项</li><li>如果最高阶项存在且不是1，则去除与这个项目相乘的常数。得到的结果就是大O阶</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算时间复杂度</span></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n-i;j++)  <span class="comment">//i=1时内循环执行n-1次;i=2时执行n-2次...;i=n-1时执行1次</span></span><br><span class="line">        x++;</span><br><span class="line"><span class="comment">//因为x++共执行了n-1+n-2+...+1=n(n-1)/2,所以执行时间为O(n^2)</span></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">    i=i*<span class="number">3</span>;</span><br><span class="line"><span class="comment">//O(log3^n)</span></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Func4</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">00</span>;k&lt;<span class="number">100</span>;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(1)时间复杂度是只能运行常数次，不代表算法运行一次</span></span><br><span class="line"><span class="comment">//4.计算strchar的时间复杂度</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="title function_">strchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * str ,<span class="type">int</span> character)</span></span><br><span class="line"><span class="comment">//strchar指的是在字符串中查找一个字符</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hellow world</span></span><br><span class="line"><span class="comment">假设查找的是h  最好情况:任意输入规模最小运行次数</span></span><br><span class="line"><span class="comment">假设查找的是w  平均情况:任意输入规模期望运行次数</span></span><br><span class="line"><span class="comment">假设查找的是d  最坏情况:任意输入规模最大运行次数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">while</span><span class="params">(*str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*str==character)</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ++str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(N)</span></span><br><span class="line"><span class="comment">//当一个算法随着输入不同，时间复杂度不同，时间复杂度做悲观预期，看最坏情况</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算冒泡排序的时间复杂度 同上1.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> end=n;end&gt;<span class="number">0</span>;--end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> exchange=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">1</span>;i&lt;end;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i<span class="number">-1</span>]&gt;a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                Swap(&amp;a[i<span class="number">-1</span>],&amp;a[i]);</span><br><span class="line">                exchange=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(exchange==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//n-1+n-2+...+1=n*(n-1)/2则时间复杂度为O(n^2)</span></span><br><span class="line"><span class="comment">//看算法复杂度不能只看是几层循环</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BnarySearch</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(a);</span><br><span class="line">    <span class="type">int</span> begin=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end=n;</span><br><span class="line">    <span class="keyword">while</span>(begin&lt;end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=begin+((end-begin)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&lt;x)</span><br><span class="line">            begin=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&gt;x)</span><br><span class="line">            end=mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度为log2^N;</span></span><br><span class="line"><span class="comment">//最好情况O(1);</span></span><br><span class="line"><span class="comment">//最坏情况O(log2^N);找不到的情况</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设找了x次，元素一共有N个</span></span><br><span class="line"><span class="comment">1*2*2*2……=N</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//斐波那契算法的时间复杂度</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">Fib</span><span class="params">(<span class="type">size_t</span> N)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(N&lt;<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Fib(N<span class="number">-1</span>)+Fib(N<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归算法时间复杂度:递归次数*每次递归调用的次数，在这里每次递归调用的次数为常数1</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pipi1002/markdown_pic@main/202310101950504.png" alt=""></p><h3 id="消失的数字"><a href="#消失的数字" class="headerlink" title="消失的数字"></a>消失的数字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数，要求时间复杂度在O(n)内</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先给一个值x=0</span></span><br><span class="line"><span class="comment">x先跟[0,n]的所有值异或</span></span><br><span class="line"><span class="comment">x再跟数组中每个值异或</span></span><br><span class="line"><span class="comment">最后x就是缺的那个数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">异或:(先转化为2进制数)相同返回0，不同返回1,0和任何数字异或都为其本身,两个相同的数异或为0;异或满足交换律和结合律</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">missingNumber</span><span class="params">(<span class="type">int</span>* nums,intt numsSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//跟[0,n]异或</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=numsSize;++i)<span class="comment">//注意这里是&lt;=</span></span><br><span class="line">    &#123;</span><br><span class="line">        x^=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再跟数组中值异或</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x^=num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异或问题的拓展</span></span><br><span class="line"><span class="comment">//找出一个数组中出现一次的数(其它数出现了2次)</span></span><br><span class="line"><span class="type">int</span>[]arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    x=x^arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找出数组当中出现两次的数</span></span><br><span class="line"><span class="type">int</span> []arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>&#125;;<span class="comment">//x^x^y=y</span></span><br><span class="line"><span class="comment">//(A^B^C^B)^(A^B^C)=(A^C)^(A^B^C)=B</span></span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    x=x^arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">7</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    x=x^i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure><h3 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个数组，将数组中的元素向右移动k个位置，其中k是非负数  O(1)  相当于是旋转k次</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">旋转数组的方法:</span></span><br><span class="line"><span class="comment">输入:nums=[1,2,3,4,5,6,7],k=3</span></span><br><span class="line"><span class="comment">输出:[5,6,7,1,2,3,4]</span></span><br><span class="line"><span class="comment">解释:</span></span><br><span class="line"><span class="comment">向右旋转1步:[7,1,2,3,4,5,6]</span></span><br><span class="line"><span class="comment">向右旋转2步:[6,7,1,2,3,4,5]</span></span><br><span class="line"><span class="comment">向右旋转3步:[5,6,7,1,2,3,4]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入:num=[1,2,3,4,5,6,7],k=3</span></span><br><span class="line"><span class="comment">输出:num=[5,6,7,1,2,3,4]</span></span><br><span class="line"><span class="comment">方法:</span></span><br><span class="line"><span class="comment">( 4 3 2 1 ) 5 6 7   前n-k个逆置</span></span><br><span class="line"><span class="comment">4 3 2 1 ( 7 6 5 )   再后k个逆置</span></span><br><span class="line"><span class="comment">( 5 6 7 1 2 3 4 )   整体逆置</span></span><br><span class="line"><span class="comment">时间复杂度O(N) 空间复杂度O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Reverse</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> left,<span class="type">int</span> right)</span><span class="comment">//逆置算法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp=num[left];</span><br><span class="line">        num[left]=num[right];</span><br><span class="line">        num[right]=temp;</span><br><span class="line">        ++left;</span><br><span class="line">        --right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>* num,<span class="type">int</span> numsSize,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=numsSize)</span><br><span class="line">        k%=numsSize;</span><br><span class="line">    <span class="comment">//前n-k个数逆置</span></span><br><span class="line">    Reverse(nums,<span class="number">0</span>,numsSize-k<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//后k个逆置</span></span><br><span class="line">    Reverse(num,numsSize-k,numsSize<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//整体逆置</span></span><br><span class="line">    Reverse(nums,<span class="number">0</span>,numsSize<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当k==n时，相当于不旋转</span></span><br><span class="line"><span class="comment">当k&gt;n时，相当于旋转k%n次</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h6 id="本质就是数组，但是存储的数据不能跳跃要连续"><a href="#本质就是数组，但是存储的数据不能跳跃要连续" class="headerlink" title="本质就是数组，但是存储的数据不能跳跃要连续"></a>本质就是数组，但是存储的数据不能跳跃要连续</h6><h6 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h6><p>1.空间不够了需要增容，需要付出代价</p><p>2.为避免频繁扩容，我们基本都是扩2倍，空间浪费</p><p>3.顺序表要求数据从开始位置连续存储，那么我们在头部或者中间位置插入删除数据就需要挪动数据</p><p>realloc扩容有两种方式</p><ul><li>原地扩容，后面如果有足够大的内存空间，返回原空间地址，代价小</li><li>异地扩容 ，如果后面没有足够大的内存空间，会找一块足够大的空间，将原空间内容拷贝过来并释放原空间，返回的是新空间地址，代价大</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SeqList.h</span></span><br><span class="line"><span class="meta">#prama once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> SLDataTpye;</span><br><span class="line"><span class="comment">//动态顺序表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType* a;</span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//表示数组中存储了多少个数据</span></span><br><span class="line">    <span class="type">int</span> capasity;<span class="comment">//数组实际能存储数据的空间容量是多大</span></span><br><span class="line">&#125;SL;</span><br><span class="line"><span class="comment">//接口函数--命名风格是跟着STL走的</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInit</span><span class="params">(SL* ps)</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushBack</span><span class="params">(SL* ps,SLDataType x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopBack</span><span class="params">(SL* ps)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushFront</span><span class="params">(SL* ps,SLDataType x)</span>;<span class="comment">//前插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListCheckCapacity</span><span class="params">(SL* ps)</span>;<span class="comment">//检查是否需要增容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopFront</span><span class="params">(SL* ps)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SeqList.c</span></span><br><span class="line"><span class="comment">//顺序表初始化相当于尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInit</span><span class="params">(SL* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps.a=<span class="literal">NULL</span>;</span><br><span class="line">    ps.size=ps.capacity=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查是否需要增容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListCheckCapacity</span><span class="params">(SL* ps)</span>;</span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//如果没有空间或者空间不足，那么我们就扩容</span></span><br><span class="line">    <span class="keyword">if</span>(ps-&gt;size==ps-&gt;capasity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> capasity=ps-&gt;capasity==<span class="number">0</span>? <span class="number">4</span>:ps-&gt;capasity;</span><br><span class="line">        SLDataType* tmp=(SLDataType*)<span class="built_in">realloc</span>(ps-&gt;a,newcapacity*<span class="keyword">sizeof</span>(SLDataType));</span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="literal">NULL</span>) <span class="comment">//如果没有扩容成功，直接退出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;realloc fail\n&quot;</span>)</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ps-&gt;a=tmp;</span><br><span class="line">        ps-&gt;capacity=newcapacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushBack</span><span class="params">(SL* ps,SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    SeqListCheckCapacity(ps);<span class="comment">//检查增容</span></span><br><span class="line">    ps-&gt;a[ps-&gt;size]=x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushBack</span><span class="params">(SL* ps,SLDataType x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopBack</span><span class="params">(SL* ps)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushFront</span><span class="params">(SL* ps,SLDataType x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopFront</span><span class="params">(SL* ps)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SL s1;</span><br><span class="line">    SeqListInit(s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//TestSeqList1();</span></span><br><span class="line">    TestSeqList2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Text1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestSeqList1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SL s1;</span><br><span class="line">    SeqListInit(&amp;s1);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">1</span>);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">2</span>);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">3</span>);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">4</span>);</span><br><span class="line">    SeqListPrint(&amp;s1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插法(把一个数据x插入最前面)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPushFront</span><span class="params">(SL* ps,SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当释放数据时会检查数据是否越界，越界就会报错，如果满了就需要增容</span></span><br><span class="line">    </span><br><span class="line">    SeqListCheckCapacity(ps);<span class="comment">//考虑是否需要增容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//挪动数据</span></span><br><span class="line">    <span class="type">int</span> end=ps-&gt;size<span class="number">-1</span>;<span class="comment">//end开始指向最后数据的下标值</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">endl</span>&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;a[end+<span class="number">1</span>]=ps-&gt;a[end];</span><br><span class="line">        --end;</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;a[<span class="number">0</span>]=x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Text2.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestSeqList2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SL s1;</span><br><span class="line">    SeqListInit(&amp;s1);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">1</span>);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">2</span>);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">3</span>);</span><br><span class="line">    SeqListPushBack(&amp;s1,<span class="number">4</span>);</span><br><span class="line">    SeqListPrint(&amp;s1);</span><br><span class="line">    </span><br><span class="line">    SeqListPushFront(&amp;s1,<span class="number">10</span>);</span><br><span class="line">    SeqListPushFront(&amp;s1,<span class="number">20</span>);</span><br><span class="line">    SeqListPushFront(&amp;s1,<span class="number">30</span>);</span><br><span class="line">    SeqListPrint(&amp;s1);</span><br><span class="line">    SeqListPopFont(&amp;s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//头删(因为顺序表要求从头开始存储，并且连续，所以size--是尾删)从前向后覆盖</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListPopFont</span><span class="params">(SL*)</span><span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(ps-&gt;size&gt;<span class="number">0</span>);<span class="comment">//(暴力方式)判断顺序表中有没有数据</span></span><br><span class="line">    <span class="comment">//挪动数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> begin=<span class="number">1</span>;<span class="comment">//使begin为下标1，也就是第二个数据的下标</span></span><br><span class="line">    <span class="keyword">while</span>(begin&lt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;a[begin<span class="number">-1</span>]=ps-&gt;a[begin];</span><br><span class="line">        ++begin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找一个值x的位置，找到返回x位置下标，没有返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SeqListFind</span><span class="params">(SL* ps,SLDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ps-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ps-&gt;a[i]==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//暴力求解</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在pos位置前插入数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListInsert</span><span class="params">(SL* ps,<span class="type">int</span> pos,SLDataType x)</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*1.</span></span><br><span class="line"><span class="comment">    if(pos&gt;ps-&gt;size||pose&lt;0)//pos可以等于size，选择尾插</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;pos invalid\n&quot;);</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    assert(pos&gt;=<span class="number">0</span>&amp;&amp;pos&lt;=ps-&gt;size)<span class="comment">//括号为假就报错</span></span><br><span class="line">        SeqListCheckCapacity(ps);<span class="comment">//考虑是否需要增容</span></span><br><span class="line">    <span class="type">int</span> end=ps-&gt;size<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(end&gt;=pos)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;a[end+<span class="number">1</span>]=ps-&gt;a[end];</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;a[pos]=x;</span><br><span class="line">    ps-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除pos位置的数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SeqListEarse</span><span class="params">(SL* ps,<span class="type">int</span> pos)</span>; </span><br><span class="line">&#123;</span><br><span class="line">    assert(pos&gt;=<span class="number">0</span> &amp;&amp; pos&lt;ps-&gt;size);</span><br><span class="line">    <span class="type">int</span> begin=pos+<span class="number">1</span>;<span class="comment">//使begin指向要删除位置数据的后一位</span></span><br><span class="line">    <span class="keyword">while</span>(begin&lt;ps-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;a[begin<span class="number">-1</span>]=ps-&gt;a[begin];</span><br><span class="line">        ++begin;</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SList.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPrint</span><span class="params">(SLTNode* phead)</span></span><br><span class="line">&#123;</span><br><span class="line">    SLTNode* cur=phead;<span class="comment">//cur是一个指向结构体的指针</span></span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,cur-&gt;data);</span><br><span class="line">        cur=cur-&gt;next;<span class="comment">//地址指针不连续</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void SListPushBack(SLTNode* phead,SLTDateType x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.尾插，为了解决插入第一个节点的问题要用二级指针，第二个就不用了，因为第二个改变的是结构体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPushBack</span><span class="params">(SLTNode** pphead,SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    SLTNode* newnode=(SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLNode));</span><br><span class="line">    newnode-&gt;data=x;</span><br><span class="line">    newnode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(*pphead==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *pphead=newnode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找到尾节点</span></span><br><span class="line">    SLTNode* tail=*pphead;</span><br><span class="line">      <span class="keyword">while</span>(tail-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          tail=tail-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">    tail-&gt;next=newnode;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.头插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPushFront</span><span class="params">(SLTNode** pphead,SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">   SLTNode* newnode=BuyListNode(x);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    SLDNode* BuyListNode(SLTDateType x)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    SLTNode*newnode=(SLTNode*)malloc(sizeof(SLTNode));</span></span><br><span class="line"><span class="comment">    if(newnode==NULL)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      printf(&quot;malloc fail\n&quot;);</span></span><br><span class="line"><span class="comment">      exit(-1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    newnode-&gt;data=x;</span></span><br><span class="line"><span class="comment">    newnode-&gt;next=NULL;</span></span><br><span class="line"><span class="comment">    return newnode;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    newnode-&gt;next=*pphead;</span><br><span class="line">    *pphead=newnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.尾删,如果删完就需要二级指针</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPopBack</span><span class="params">(SLTNode**pphead)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*pphead==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((*pphead)-&gt;next==<span class="literal">NULL</span>)<span class="comment">//只有一个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(*pphead);</span><br><span class="line">        *pphead=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SLTNode* prev=<span class="literal">NULL</span>;</span><br><span class="line">        SLTNode* tail=*pphead;</span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        prev=tail;</span><br><span class="line">        tail=tail-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="built_in">free</span>(tail);</span><br><span class="line">        tail=<span class="literal">NULL</span>;<span class="comment">//打印的时候要预防野指针问题，所以加下一行代码</span></span><br><span class="line">        prev-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPopFront</span><span class="params">(SLTNode** pphead)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*pphead==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    SLTNode* next=(*pphead)-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(*pphead);</span><br><span class="line">    *pphezd=next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.查找</span></span><br><span class="line">SLTNode* <span class="title function_">SListFind</span><span class="params">(SLTNode* phead,SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    SLTNode* cur=phead;</span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;data==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.在pos前插入一个节点</span></span><br><span class="line">SLTNode* <span class="title function_">SListInsert</span><span class="params">(SLTNode* phead,STNode* pos,SLTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    SLTNode* newnode=BuyListNode(x);</span><br><span class="line">    newnode-&gt;next=pos-&gt;next;</span><br><span class="line">    pos-&gt;next=newnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.删除pos节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListEraes</span><span class="params">(SLTNode** pphead,SLTNode* pos)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//特殊情况要删除头节点</span></span><br><span class="line">    <span class="keyword">if</span>(*pphead==pos)</span><br><span class="line">    &#123;</span><br><span class="line">        *pphead=pos-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SListNode* prev=*pphead;</span><br><span class="line">        <span class="keyword">while</span>(prev-&gt;next!=pos)</span><br><span class="line">        &#123;</span><br><span class="line">            prev=prev-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        prev-&gt;next=pos-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(pos)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231019_204619.png" alt=""></p><h6 id="prev图如上"><a href="#prev图如上" class="headerlink" title="prev图如上"></a>prev图如上</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SLisst.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SLDataType</span><br><span class="line">    </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SLDataType data;<span class="comment">//定义一个数据类型为SLDataType的数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span><span class="comment">//节点(结构体)指针指向下一个节点，存的是下一个节点的地址</span></span><br><span class="line">&#125;SLTNode;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPrint</span><span class="params">(SLTNode* phead)</span>;<span class="comment">//不会改变phead的值不用传二级</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPushBack</span><span class="params">(SLTNode** pphead,SLTDateType x)</span>;<span class="comment">//尾插一个新节点1.找到原来的尾(尾的标志是该节点所存的地址是空)2.让原来最后节点指向要插入的节点</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SListPushFront</span><span class="params">(SLTNode** pphead,SLTDateType x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">SLTNode* <span class="title function_">SListFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;SList.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestSList1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// SListNode* plist=NULL;phezd和plist都是指向首节点的指针  问题是形参phead的改变没有影响实参plist</span></span><br><span class="line">    SListNode* plist=<span class="literal">NULL</span>;</span><br><span class="line">    SListPushBack(&amp;plist,<span class="number">1</span>);</span><br><span class="line">    SListPushBack(&amp;plist,<span class="number">2</span>);</span><br><span class="line">    SListPushBack(&amp;plist,<span class="number">3</span>);</span><br><span class="line">    SListPushBack(&amp;plist,<span class="number">4</span>);</span><br><span class="line">    SListPrint(plist);</span><br><span class="line">    </span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">1</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">2</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">3</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestSList2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">1</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">2</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">3</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">4</span>);</span><br><span class="line">    SListPopBack(&amp;plist);</span><br><span class="line">    </span><br><span class="line">    SListPrint(plist);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestSList3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">1</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">2</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">3</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">2</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">4</span>);</span><br><span class="line">    SListPushFront(&amp;plist,<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    SLTNode* pos=SListFind(plist,<span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos)<span class="comment">//当要寻找的值在链表中出现好几次时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个pos节点:%p-&gt;%d\n&quot;</span>,i++,pos,pos-&gt;data);</span><br><span class="line">        pos=SListFind(pos-&gt;next,<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改3-&gt;30</span></span><br><span class="line">    pos=SListFind(plist,<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span>(pos)</span><br><span class="line">        &#123;</span><br><span class="line">            pos-&gt;data=<span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    SListPrint(plist);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    TestSList1();</span><br><span class="line">    TestSList2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231017_204914.png" alt=""></p><h6 id="二级指针（通过指针去改变指向空间的内容传一级指针，改变指针的指向传二级指针）"><a href="#二级指针（通过指针去改变指向空间的内容传一级指针，改变指针的指向传二级指针）" class="headerlink" title="二级指针（通过指针去改变指向空间的内容传一级指针，改变指针的指向传二级指针）"></a>二级指针（通过指针去改变指向空间的内容传一级指针，改变指针的指向传二级指针）</h6><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231019_175820.png" alt=""></p><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231019_175931.png" alt=""></p><h3 id="哨兵位的头节点不需要存储有效数据"><a href="#哨兵位的头节点不需要存储有效数据" class="headerlink" title="哨兵位的头节点不需要存储有效数据"></a>哨兵位的头节点不需要存储有效数据</h3><h6 id="head-tail-ListNode-malloc-sizeof-ListNode"><a href="#head-tail-ListNode-malloc-sizeof-ListNode" class="headerlink" title="head=tail=(ListNode*)malloc(sizeof(ListNode));"></a>head=tail=(ListNode*)malloc(sizeof(ListNode));</h6><h6 id="但是不能直接返回head哨兵位头节点"><a href="#但是不能直接返回head哨兵位头节点" class="headerlink" title="但是不能直接返回head哨兵位头节点"></a>但是不能直接返回head哨兵位头节点</h6><h2 id="带头的循环链表"><a href="#带头的循环链表" class="headerlink" title="带头的循环链表"></a>带头的循环链表</h2><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231102_200541.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListPushBack</span><span class="params">(LTNode* phead,LTDataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(phead);</span><br><span class="line">    LTNode* tail=phead-&gt;prev;</span><br><span class="line">    LTNode* newnode=(LTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LTNode));</span><br><span class="line">    newnode-&gt;data=x;</span><br><span class="line">    </span><br><span class="line">    tail-&gt;next=newnode;</span><br><span class="line">    newnode-&gt;prev=tail;</span><br><span class="line">    newnode-&gt;next=phead;</span><br><span class="line">    phead-&gt;prev=newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="type">void</span> ListpopBack(LTNode* phead)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果继续删除会把哨兵位的头节点也删除所以要加断言</span></span><br><span class="line">    assert(phead);</span><br><span class="line">    assert(phead-&gt;next!=phead);</span><br><span class="line">    LTNode* tail=phead-&gt;prev;</span><br><span class="line">    LTNode* tail-&gt;prev;</span><br><span class="line">    <span class="comment">//先释放会产生野指针问题,所以要记录tail的前一个指针</span></span><br><span class="line">    <span class="built_in">free</span>(phead-&gt;prev);</span><br><span class="line">    </span><br><span class="line">    tailPrev-&gt;next=phead;</span><br><span class="line">    phead-&gt;prev=tailPrev;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插 </span></span><br><span class="line"><span class="comment">//phead指向哨兵位的头，next指针指向除了哨兵位的第一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*LTNode* BuyListNode(LTDateType x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    LtNode* newnode=(LTNode*)malloc(sizeof(LTNode));</span></span><br><span class="line"><span class="comment">    newnode-&gt;data=x;</span></span><br><span class="line"><span class="comment">    newnode-&gt;next=NULL;</span></span><br><span class="line"><span class="comment">    newnode-&gt;prev=NULL;</span></span><br><span class="line"><span class="comment">    return newnode;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListPushFront</span><span class="params">(LTNode* phead,LTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(phead);</span><br><span class="line">    LTNode* newnode=BuyistNode(x);</span><br><span class="line">    LTNode* next=phead-&gt;next;</span><br><span class="line">    </span><br><span class="line">    phead-&gt;next=newnode;</span><br><span class="line">    newnode-&gt;prev=phead;</span><br><span class="line">    </span><br><span class="line">    newnode-&gt;next=next;</span><br><span class="line">    next-&gt;prev=newnode;</span><br><span class="line">    <span class="comment">//如果这个链表是一个空链表也不会有问题(此时phead的prev指向自己，phead的next也指向自己)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListPopFront</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(phead);</span><br><span class="line">    <span class="comment">//链表空</span></span><br><span class="line">    assert(phead-&gt;next!=phead);</span><br><span class="line">    </span><br><span class="line">    LTNode* next=phead-&gt;next;<span class="comment">//多定义一个变量</span></span><br><span class="line">    LTNode* nextNext=next-&gt;next;<span class="comment">//再多定义一个变量，就可以不用管是否先后释放内存</span></span><br><span class="line">    </span><br><span class="line">    phead-&gt;next=nextNext;</span><br><span class="line">    nextNext-&gt;prev=phead;</span><br><span class="line">    <span class="built_in">free</span>(next);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到值为x的节点</span></span><br><span class="line">LTNode* <span class="title function_">ListFind</span><span class="params">(LTNode* phead,LTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(phead);</span><br><span class="line">    LTNode* cur=phead-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(cur!=phead)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">if</span>(cur-&gt;data==x)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">return</span> cur;</span><br><span class="line">         &#125;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pos位置之前插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(LTNode* pos,LTDateType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(pos);</span><br><span class="line">    LTNode* posPrev=pos-&gt;prev;</span><br><span class="line">    LTNode* newnode=BuyListNode(x);</span><br><span class="line">    </span><br><span class="line">    posPrev-&gt;next=newnode;</span><br><span class="line">    newnode-&gt;prev=posPrev;</span><br><span class="line">    newnode-&gt;next=pos;</span><br><span class="line">    pos-&gt;prev=newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在pos位置插入"><a href="#在pos位置插入" class="headerlink" title="在pos位置插入"></a>在pos位置插入</h6><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231104_155117.png" alt=""></p><h6 id="下图相当于头插尾插"><a href="#下图相当于头插尾插" class="headerlink" title="下图相当于头插尾插"></a>下图相当于头插尾插</h6><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231104_155653.png" alt=""></p><h3 id="相比于顺序表链表cup命中率不高，有可能造成缓存污染-连续的物理空间造成的"><a href="#相比于顺序表链表cup命中率不高，有可能造成缓存污染-连续的物理空间造成的" class="headerlink" title="相比于顺序表链表cup命中率不高，有可能造成缓存污染(连续的物理空间造成的)"></a>相比于顺序表链表cup命中率不高，有可能造成缓存污染(连续的物理空间造成的)</h3><h6 id="访问存储数据的内存位置，先看这个地址在不在缓存中，在就直接访问，不在就先加载到缓存再访问（加载到缓存不只加载着一个数据位置，而是预加载就近原则的一片数据内存位置）"><a href="#访问存储数据的内存位置，先看这个地址在不在缓存中，在就直接访问，不在就先加载到缓存再访问（加载到缓存不只加载着一个数据位置，而是预加载就近原则的一片数据内存位置）" class="headerlink" title="访问存储数据的内存位置，先看这个地址在不在缓存中，在就直接访问，不在就先加载到缓存再访问（加载到缓存不只加载着一个数据位置，而是预加载就近原则的一片数据内存位置）"></a>访问存储数据的内存位置，先看这个地址在不在缓存中，在就直接访问，不在就先加载到缓存再访问（加载到缓存不只加载着一个数据位置，而是预加载就近原则的一片数据内存位置）</h6><p><img src="C:\Users\王锐蕊\Pictures\Screenshots\屏幕截图_20231104_163730.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;时间复杂度（时间复杂度及空间复杂度）&quot;&gt;&lt;a href=&quot;#时间复杂度（时间复杂度及空间复杂度）&quot; class=&quot;</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MatlabClass</title>
    <link href="https://pipi1002.github.io/2023/07/17/MatlabClass/"/>
    <id>https://pipi1002.github.io/2023/07/17/MatlabClass/</id>
    <published>2023-07-17T06:33:43.000Z</published>
    <updated>2023-09-08T02:29:29.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matlab-的学习"><a href="#Matlab-的学习" class="headerlink" title="Matlab 的学习"></a>Matlab 的学习</h1><h2 id="matlab系统环境"><a href="#matlab系统环境" class="headerlink" title="matlab系统环境"></a>matlab系统环境</h2><h6 id="matlab的搜索路径为："><a href="#matlab的搜索路径为：" class="headerlink" title="matlab的搜索路径为："></a>matlab的搜索路径为：</h6><p>变量，内部函数，程序文件（先搜索当前文件再在文件搜索路径下搜索）</p><ul><li>如果在当前文件夹和搜索路径文件夹下建立了一个同名的M文件，那么在命令行窗口输入文件名时，会执行哪个文件？<ul><li>答：执行当前文件夹下的文件</li></ul></li><li>如果用户建立的文件既没有保存在当前文件夹下，又没有保存在文件搜索路径中，那么在命令行窗口输入文件名时会出现什么信息？<ul><li>答：系统找不到，会报错</li></ul></li></ul><h2 id="matlab数值数据"><a href="#matlab数值数据" class="headerlink" title="matlab数值数据"></a>matlab数值数据</h2><ul><li>整型数据    MatLab提供了数据类型转换函数来实现数据类型的转换。例如uint8函数将数值数据转换为无符号8位整数，int8函数将数值数据转换为带符号8位整数</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;x=int8(<span class="number">129</span>)</span><br><span class="line">x=</span><br><span class="line">  <span class="number">127</span>      //因为带符号整数取值为<span class="number">-2</span>的<span class="number">7</span>次方到+<span class="number">2</span>的<span class="number">7</span>次方减<span class="number">1</span>(<span class="number">-128</span>~<span class="number">127</span>),所以转换成带 &gt;&gt;x=uint8(<span class="number">129</span>)     符号数的最大值<span class="number">127</span></span><br><span class="line">x=</span><br><span class="line">  <span class="number">129</span>   //不带符号数的取值为<span class="number">0</span>~<span class="number">2</span>的<span class="number">8</span>次方减<span class="number">1</span>(<span class="number">0</span>~<span class="number">255</span>)</span><br></pre></td></tr></table></figure><ul><li>浮点型   在matlab中数值数据默认为浮点型，浮点型数据分为双精度和单精度两种，单精度占4个字节，双精度占8个字节，所以双精度型的数据精度更高。<ul><li>single函数：将其他类型的数据转换为单精度型</li><li>double函数：将其他类型的数据转换为双精度型</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;class(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">double</span><br><span class="line">&gt;&gt;class(single(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">single</span><br></pre></td></tr></table></figure><ul><li>复型数据 复型数据包括实部和虚部两个部分，实部和虚部默认为双精度类型，叙述单位用i或者j来表示<ul><li>real函数：求复数的实部</li><li>imag函数：求负数的虚部</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;<span class="number">6</span>+<span class="number">5</span><span class="built_in">i</span></span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">6.0000</span>+<span class="number">5.0000</span><span class="built_in">i</span></span><br><span class="line">&gt;&gt;<span class="number">6</span>+<span class="number">5</span><span class="built_in">j</span></span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">6.0000</span>+<span class="number">5.0000</span><span class="built_in">i</span>  //这两个表示的是同一个负数</span><br></pre></td></tr></table></figure><ul><li><h4 id="format命令的格式：formt格式符"><a href="#format命令的格式：formt格式符" class="headerlink" title="format命令的格式：formt格式符"></a>format命令的格式：formt格式符</h4></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;format long</span><br><span class="line">&gt;&gt;<span class="number">50</span>/<span class="number">3</span></span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">16.666666666666668</span>  //小数点后<span class="number">15</span>位</span><br><span class="line">&gt;&gt;format  //默认short型</span><br><span class="line">&gt;&gt;<span class="number">50</span>/<span class="number">3</span></span><br><span class="line"><span class="built_in">ans</span>=<span class="number">16.66667</span>  //小数点后<span class="number">5</span>位</span><br></pre></td></tr></table></figure><h6 id="format命令只影响数据输出格式而不影响数据的计算和存储"><a href="#format命令只影响数据输出格式而不影响数据的计算和存储" class="headerlink" title="format命令只影响数据输出格式而不影响数据的计算和存储"></a>format命令只影响数据输出格式而不影响数据的计算和存储</h6><h4 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h4><ul><li>函数的调用格式为：</li></ul><p>函数名（函数自变量的值）  函数的自变量规定为矩阵变量，当然也可以是标量，标量本身是矩阵的一种特例。函数在运算时是将函数逐项作用于矩阵的每个元素上，所以最后遇的结果就是一个与自变量同型的矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">4</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">6</span></span><br><span class="line">&gt;&gt;B=<span class="built_in">exp</span>(A)    //A把调用结果赋给B</span><br><span class="line">B=<span class="number">54.5982</span>  <span class="number">7.3891</span>  //B最后结果也为和A一样的同型矩阵，并且对应的每个数字都是求对数字求自然指数得来的</span><br><span class="line">  <span class="number">20.0855</span>  <span class="number">403.4288</span></span><br></pre></td></tr></table></figure><h2 id="matlab变量与数值语句"><a href="#matlab变量与数值语句" class="headerlink" title="matlab变量与数值语句"></a>matlab变量与数值语句</h2><ul><li>在matlab中，变量以字母开头，后接数字或下划线，最多63给字符<ul><li>变量=表达式</li><li>表达式赋值给matlab预定义变量ans</li></ul></li></ul><p>注意：如果在赋值语句后加；那么matlab仅仅执行赋值操作，不会显示运算后变量的结果</p><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230723_073027.png" alt=""></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;x=<span class="built_in">sqrt</span>(<span class="number">7</span>)<span class="number">-2</span><span class="built_in">i</span>;</span><br><span class="line">&gt;&gt;y=<span class="built_in">exp</span>(<span class="built_in">pi</span>/<span class="number">2</span>);</span><br><span class="line">&gt;&gt;z=(<span class="number">5</span>+<span class="built_in">cosd</span>(<span class="number">47</span>)/(<span class="number">1</span>+<span class="built_in">abs</span>(x-y)))</span><br></pre></td></tr></table></figure><ul><li>ans是默认赋值变量</li><li>i和j代表虚数单位</li><li>pi代表圆周率</li><li>NaN代表非数</li></ul><h5 id="变量的管理："><a href="#变量的管理：" class="headerlink" title="变量的管理："></a>变量的管理：</h5><p>（1）变量的删除和修改：可在工作区进行</p><ul><li>who命令可以显示出驻留变量的名称</li><li>whos命令不仅显示出名称还会给出它们的大小、所占字节数及数据类型等信息</li></ul><p>（2）内存变量文件：用于保存matlab工作区变量的文件叫做内存变量文件，其扩展名为.mat，也叫MAT文件（标准二进制文件）</p><ul><li>save命令：创建内存变量文件</li><li>load命令：装入内存变量文件<ul><li>若变量a和变量x存在matlab工作空间中，可以执行命令  &gt;&gt;save mydate a x 这样就会把a和x保存在mydate.mat文件中</li><li>在下一次重新进入matlab时，输入&gt;&gt;load mydate,就把mydate.mat文件中的内容装入matlab工作空间，那么在当前matlab工作环境中a和x已知</li></ul></li></ul><h2 id="matlab矩阵的表示"><a href="#matlab矩阵的表示" class="headerlink" title="matlab矩阵的表示"></a>matlab矩阵的表示</h2><ul><li>利用直接输入法建立矩阵：将矩阵的元素用中括号括起来，按矩阵行的顺序输入各个元素，同一行的各元素之间用逗号或空格分隔，不同行的元素之间用分号分隔 </li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">  <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">  <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><ul><li>利用已经建立好的矩阵建立更大的矩阵：一个大矩阵由两个小的拼接而成</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt;B=[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>;<span class="number">-4</span>,<span class="number">-5</span>,<span class="number">-6</span>;<span class="number">-7</span>,<span class="number">-8</span>,<span class="number">-9</span>];</span><br><span class="line">&gt;&gt;C=[A,B;B,A]</span><br><span class="line">C=</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span></span><br><span class="line">  <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">-4</span> <span class="number">-5</span> <span class="number">-6</span></span><br><span class="line">  <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">-7</span> <span class="number">-8</span> <span class="number">-9</span></span><br><span class="line">  <span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">  <span class="number">-4</span> <span class="number">-5</span> <span class="number">-6</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">  <span class="number">-7</span> <span class="number">-8</span> <span class="number">-9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h5 id="可以用实部矩阵和虚部矩阵构成复数矩阵"><a href="#可以用实部矩阵和虚部矩阵构成复数矩阵" class="headerlink" title="可以用实部矩阵和虚部矩阵构成复数矩阵"></a>可以用实部矩阵和虚部矩阵构成复数矩阵</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;B=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">&gt;&gt;C=[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>];</span><br><span class="line">&gt;&gt;A=B+<span class="built_in">i</span>*C</span><br><span class="line">A=</span><br><span class="line"><span class="number">1.0000</span>+<span class="number">6.0000</span><span class="built_in">i</span>  <span class="number">2.0000</span>+<span class="number">7.0000</span><span class="built_in">i</span>  <span class="number">3.0000</span>+<span class="number">8.0000</span><span class="built_in">i</span></span><br><span class="line"><span class="number">4.0000</span>+<span class="number">9.0000</span><span class="built_in">i</span>  <span class="number">5.0000</span>+<span class="number">10.0000</span><span class="built_in">i</span>  <span class="number">6.0000</span>+<span class="number">11.0000</span><span class="built_in">i</span></span><br></pre></td></tr></table></figure><h6 id="向量是矩阵的特殊类型，可以由冒号表达式产生行向量-也可用linspace函数产生一个行向量"><a href="#向量是矩阵的特殊类型，可以由冒号表达式产生行向量-也可用linspace函数产生一个行向量" class="headerlink" title="向量是矩阵的特殊类型，可以由冒号表达式产生行向量,也可用linspace函数产生一个行向量"></a>向量是矩阵的特殊类型，可以由冒号表达式产生行向量,也可用linspace函数产生一个行向量</h6><p><code>格式：</code>e1:e2:e3  //e1为初始值，e2为步长可省略默认为1，e3为终止值</p><p>​           linspace（a,b,n）,a为第一个元素，b为最后一个元素，n为元素总数当n省略时将自动产生100个元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;t=<span class="number">0</span>:<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">t=</span><br><span class="line">  <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">  </span><br><span class="line">&gt;&gt;x=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>,<span class="number">6</span>)</span><br><span class="line">x=</span><br><span class="line">  <span class="number">0</span> <span class="number">0.6283</span> <span class="number">1.2566</span> <span class="number">1.8850</span> <span class="number">2.5133</span> <span class="number">3.1416</span></span><br></pre></td></tr></table></figure><h3 id="结构矩阵和单元矩阵"><a href="#结构矩阵和单元矩阵" class="headerlink" title="结构矩阵和单元矩阵"></a>结构矩阵和单元矩阵</h3><h4 id="结构矩阵：数据类型不同而逻辑相关的数据组成一个有机整体，其中每个数据又构成了结构数据的一个成员（学生：学号，姓名，性别），学生这个结构数据，包含了这三个成员"><a href="#结构矩阵：数据类型不同而逻辑相关的数据组成一个有机整体，其中每个数据又构成了结构数据的一个成员（学生：学号，姓名，性别），学生这个结构数据，包含了这三个成员" class="headerlink" title="结构矩阵：数据类型不同而逻辑相关的数据组成一个有机整体，其中每个数据又构成了结构数据的一个成员（学生：学号，姓名，性别），学生这个结构数据，包含了这三个成员"></a>结构矩阵：数据类型不同而逻辑相关的数据组成一个有机整体，其中每个数据又构成了结构数据的一个成员（学生：学号，姓名，性别），学生这个结构数据，包含了这三个成员</h4><p><code>格式：</code>结构矩阵元素.成员名=表达式</p><p>eg.例如要建立含有三个元素的结构矩阵a，每个元素包含三个数据类型</p><p><code>我们只需要分别给结构矩阵a中的每个元素里的每个成员赋值就可以了</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;a(<span class="number">1</span>).x1=<span class="number">10</span>;a(<span class="number">1</span>).x2=<span class="string">&#x27;liu&#x27;</span>;a(<span class="number">1</span>).x3=[<span class="number">11</span>,<span class="number">21</span>;<span class="number">34</span>,<span class="number">78</span>];</span><br><span class="line">&gt;&gt;a(<span class="number">2</span>).x1=<span class="number">12</span>;a(<span class="number">2</span>).x2=<span class="string">&#x27;wang&#x27;</span>;a(<span class="number">2</span>).x3=[<span class="number">34</span>,<span class="number">191</span>;<span class="number">27</span>,<span class="number">578</span>];</span><br><span class="line">&gt;&gt;a(<span class="number">3</span>).x1=<span class="number">10</span>;a(<span class="number">3</span>).x2=<span class="string">&#x27;liu&#x27;</span>;a(<span class="number">3</span>).x3=[<span class="number">13</span>,<span class="number">890</span>;<span class="number">67</span>,<span class="number">231</span>];</span><br></pre></td></tr></table></figure><h4 id="单元矩阵：单元数据类型也是把不同数据类型放在一个变量中，单元矩阵的各个元素就是不同类型的数据，每个元素就是由不同数据类型组成的（而结构数据矩阵下的元素是由名字不同的成员构成）-建立单元矩阵和一般矩阵相似，直接输入就可以，只是单元矩阵元素用大括号括起来。"><a href="#单元矩阵：单元数据类型也是把不同数据类型放在一个变量中，单元矩阵的各个元素就是不同类型的数据，每个元素就是由不同数据类型组成的（而结构数据矩阵下的元素是由名字不同的成员构成）-建立单元矩阵和一般矩阵相似，直接输入就可以，只是单元矩阵元素用大括号括起来。" class="headerlink" title="单元矩阵：单元数据类型也是把不同数据类型放在一个变量中，单元矩阵的各个元素就是不同类型的数据，每个元素就是由不同数据类型组成的（而结构数据矩阵下的元素是由名字不同的成员构成）  建立单元矩阵和一般矩阵相似，直接输入就可以，只是单元矩阵元素用大括号括起来。"></a>单元矩阵：单元数据类型也是把不同数据类型放在一个变量中，单元矩阵的各个元素就是不同类型的数据，每个元素就是由不同数据类型组成的（而结构数据矩阵下的元素是由名字不同的成员构成）  建立单元矩阵和一般矩阵相似，直接输入就可以，只是单元矩阵元素用大括号括起来。</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;b=&#123;<span class="number">10</span>,<span class="string">&#x27;liu&#x27;</span>,[<span class="number">11</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">78</span>];<span class="number">12</span>,<span class="string">&#x27;wang&#x27;</span>,[<span class="number">34</span>,<span class="number">191</span>;<span class="number">27</span>,<span class="number">578</span>];<span class="number">14</span>,<span class="string">&#x27;cai&#x27;</span>,[<span class="number">13</span>,<span class="number">890</span>;<span class="number">67</span>,<span class="number">231</span>]&#125;</span><br><span class="line">b=</span><br><span class="line">  [<span class="number">10</span>]  <span class="string">&#x27;liu&#x27;</span>  [<span class="number">2</span>*<span class="number">2</span> double]</span><br><span class="line">  [<span class="number">12</span>]  <span class="string">&#x27;wang&#x27;</span> [<span class="number">2</span>*<span class="number">2</span> double]</span><br><span class="line">  [<span class="number">14</span>]  <span class="string">&#x27;cai&#x27;</span>  [<span class="number">2</span>*<span class="number">2</span> double]</span><br></pre></td></tr></table></figure><h2 id="矩阵元素的引用"><a href="#矩阵元素的引用" class="headerlink" title="矩阵元素的引用"></a>矩阵元素的引用</h2><ul><li>通过下标来引用矩阵元素  A(4,5)第四行第五列</li></ul><script type="math/tex; mode=display">>>A=[1,2,3;4,5,6];>>A(4,5)=10;A=  1 2 3 0 0  4 5 6 0 0  0 0 0 0 0  0 0 0 0 10  //自动补0</script><ul><li>通过序号引用  在matlab中矩阵元素按列存储，即首先存储矩阵的第一列元素，然后存储第二列元素一直存储到最后一列   矩阵元素的序号就是矩阵元素在内存中的排列顺序<ul><li>序号与下标是一一对应的，以m×n矩阵A为例，矩阵元素A(i,j)的序号为(j-1)×m+i</li><li>矩阵元素的序号可以与下标可以利用sub2ind和ind2sub函数实现相互转换。<ul><li><code>sub2ind函数</code>:将矩阵中指定元素的行，列下标转换成存储的序号。调用格式为：D=sub2ind(S,I,J)    <code>S:</code>行数和列数组成的向量   <code>I:</code>转换矩阵元素的行下标   <code>J:</code>转换矩阵元素的列下标    <code>D:</code>对应下标元素的序号</li><li><code>ind2sub函数:</code>将把矩阵元素的序号转换成对应的下标。调用格式为：[i,j]=ind2sub(S,D)   <code>S:</code>行数和列数组成的向量    <code>D:</code>对应下标元素的序号  <code>I:</code>转换矩阵元素的行下标   <code>J:</code>转换矩阵元素的列下标</li></ul></li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">  <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">&gt;&gt;A(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//<span class="built_in">size</span>函数的结果是由这个矩阵的行数和列数组成的一个矩阵</span><br><span class="line">//<span class="built_in">sub2ind</span>函数举例</span><br><span class="line">&gt;&gt;A=[<span class="number">1</span>:<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line">  <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">&gt;&gt;D=<span class="built_in">sub2ind</span>(<span class="built_in">size</span>(A),[<span class="number">1</span>,<span class="number">2</span>;<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>;<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">D=</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span></span><br><span class="line">  <span class="number">6</span> <span class="number">4</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&gt;&gt;[I,J]=<span class="built_in">ind2sub</span>([<span class="number">3</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])  //求一个三行三列矩阵的第一个第三个第五个元素的下标</span><br><span class="line">I=</span><br><span class="line">  <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line">J=</span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="利用冒号表达式获得子矩阵（子矩阵是指矩阵中的一部分元素构成的矩阵）"><a href="#利用冒号表达式获得子矩阵（子矩阵是指矩阵中的一部分元素构成的矩阵）" class="headerlink" title="利用冒号表达式获得子矩阵（子矩阵是指矩阵中的一部分元素构成的矩阵）"></a>利用冒号表达式获得子矩阵（子矩阵是指矩阵中的一部分元素构成的矩阵）</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="built_in">i</span>,:)           //第<span class="built_in">i</span>行的全部元素</span><br><span class="line">A(:,<span class="built_in">j</span>)           //第<span class="built_in">j</span>列的全部元素</span><br><span class="line">A(<span class="built_in">i</span>:<span class="built_in">i</span>+m,k:k+m)   //第<span class="built_in">i</span>~<span class="built_in">i</span>+m行内且在第k~k+m列中的所有元素</span><br><span class="line">A(<span class="built_in">i</span>:<span class="built_in">i</span>+m,:)       //第<span class="built_in">i</span>~<span class="built_in">i</span>+m行的全部元素</span><br></pre></td></tr></table></figure><p><code>end运算符：</code>表示某一维的末尾元素下标</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>;<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>];</span><br><span class="line">&gt;&gt;A(<span class="keyword">end</span>,:)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line">&gt;&gt;A([<span class="number">1</span>,<span class="number">4</span>],<span class="number">3</span>:<span class="keyword">end</span>)  //第一行到第四行的第三列到最后一列的元素</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line">  <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="利用空矩阵删除矩阵的元素，空矩阵是指没有任何元素的矩阵"><a href="#利用空矩阵删除矩阵的元素，空矩阵是指没有任何元素的矩阵" class="headerlink" title="利用空矩阵删除矩阵的元素，空矩阵是指没有任何元素的矩阵"></a>利用空矩阵删除矩阵的元素，空矩阵是指没有任何元素的矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;x=[]</span><br><span class="line">x=</span><br><span class="line">  []</span><br><span class="line">x是一个空矩阵</span><br><span class="line"></span><br><span class="line">&gt;&gt;A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">6</span>;<span class="number">1</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">8</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span>  <span class="number">3</span>  <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  <span class="number">7</span> <span class="number">0</span>  <span class="number">9</span>  <span class="number">2</span> <span class="number">6</span></span><br><span class="line">  <span class="number">1</span> <span class="number">4</span> <span class="number">-1</span>  <span class="number">1</span> <span class="number">8</span></span><br><span class="line">&gt;&gt;A(:,[<span class="number">2</span>,<span class="number">4</span>])=[]  //删除第二列和第四列的元素</span><br><span class="line">A=</span><br><span class="line">  <span class="number">1</span>  <span class="number">3</span> <span class="number">0</span></span><br><span class="line">  <span class="number">7</span>  <span class="number">9</span> <span class="number">6</span></span><br><span class="line">  <span class="number">1</span> <span class="number">-1</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="改变矩阵的形状"><a href="#改变矩阵的形状" class="headerlink" title="改变矩阵的形状"></a>改变矩阵的形状</h3><p><code>reshape:</code>在矩阵总元素保持不变的前提下，将矩阵A重新排成m×n的二维矩阵。<code>reshape函数只是改变原矩阵的行数和列数，但并不改变原矩阵元素个数及其存储顺序</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;x=[<span class="number">23</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">98</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">65</span>,<span class="number">43</span>,<span class="number">76</span>];</span><br><span class="line">&gt;&gt;y=<span class="built_in">reshape</span>(x,<span class="number">3</span>,<span class="number">4</span>)  //就是把x矩阵变为<span class="number">3</span>×<span class="number">4</span>的矩阵</span><br><span class="line">y=</span><br><span class="line">  <span class="number">23</span> <span class="number">34</span> <span class="number">98</span> <span class="number">65</span></span><br><span class="line">  <span class="number">45</span> <span class="number">65</span> <span class="number">45</span> <span class="number">43</span></span><br><span class="line">  <span class="number">65</span> <span class="number">34</span> <span class="number">78</span> <span class="number">76</span></span><br></pre></td></tr></table></figure><p><code>A(:):</code>将矩阵A的每一列元素堆叠起来，成为一个列向量</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">-45</span>,<span class="number">65</span>,<span class="number">71</span>;<span class="number">27</span>,<span class="number">35</span>,<span class="number">91</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">-45</span> <span class="number">65</span> <span class="number">71</span></span><br><span class="line">   <span class="number">27</span> <span class="number">35</span> <span class="number">91</span></span><br><span class="line">&gt;&gt;B=A(:)    A(:)等价于<span class="built_in">reshape</span>(A,<span class="number">6</span>,<span class="number">1</span>)</span><br><span class="line">B=</span><br><span class="line">  <span class="number">-45</span></span><br><span class="line">   <span class="number">27</span></span><br><span class="line">   <span class="number">65</span></span><br><span class="line">   <span class="number">35</span></span><br><span class="line">   <span class="number">71</span></span><br><span class="line">   <span class="number">91</span></span><br></pre></td></tr></table></figure><h2 id="matlab基本运算（matlab的运算都是根据矩阵而言的）"><a href="#matlab基本运算（matlab的运算都是根据矩阵而言的）" class="headerlink" title="matlab基本运算（matlab的运算都是根据矩阵而言的）"></a>matlab基本运算（matlab的运算都是根据矩阵而言的）</h2><ul><li><p>算数运算</p><ul><li><p>基本算数运算：基本运算符:+  ， -，  * ， /(右除) ， \ (左除)，^(乘方)  <code>matlab的算数运算是在矩阵意义下进行的。单个数据的算数运算只是矩阵运算的一种特例</code></p><ul><li>加减运算必须是同型矩阵</li><li>两矩阵相乘要求矩阵A的列数和矩阵B的行数相同</li><li>有两种矩阵除法，如果A矩阵是非奇异方阵，则B/A等效于B<em>inv(A),A\B等效于inv(A) </em>B</li><li>A^x乘方运算要求A为方阵，x为标量</li></ul></li><li><p>点运算：点运算符：.* , ./  , .\  ,.^</p><ul><li>要求两个矩阵同型</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">&gt;&gt;B=[<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">&gt;&gt;C=A.*B</span><br><span class="line">C=</span><br><span class="line">  <span class="number">-1</span>  <span class="number">0</span> <span class="number">3</span> </span><br><span class="line">   <span class="number">4</span> <span class="number">-5</span> <span class="number">0</span></span><br><span class="line">   <span class="number">0</span>  <span class="number">8</span> <span class="number">9</span></span><br><span class="line">&gt;&gt;D=A*B</span><br><span class="line">D=</span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//当x=<span class="number">0.1</span>、<span class="number">0.4</span>、<span class="number">0.7</span>、<span class="number">1</span>时，分别求y=sinxcosx的值</span><br><span class="line">&gt;&gt;x=<span class="number">0.1</span>:<span class="number">0.3</span>:<span class="number">1</span>;</span><br><span class="line">&gt;&gt;y=<span class="built_in">sin</span>(x).*<span class="built_in">cos</span>(x);  //这里必须用点乘，因为x是一个向量，<span class="built_in">sin</span>(x)和<span class="built_in">cos</span>(x)是和x同长度的向量,如果用乘法没用点乘就会出现不相容(A行不等B列)的情况</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>关系运算</p><ul><li>关系运算符：&lt;, &gt;, &lt;= ,&gt;= ,==,~=(不等于)   若两个数是标量时，直接比较两个数大小，若关系成立则为1否则为0<ul><li>当参与比较的是两个同型的矩阵时，比较是对两矩阵位置的元素按标量关系运算规则逐个进行，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成</li><li>当参与比较的一个是标量，而另一个是矩阵时，则把标量与矩阵的每个元素按标量关系运算规则逐个比较，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成</li></ul></li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">rem</span>(A,<span class="number">2</span>)是求A中每个元素除二的余数矩阵</span><br><span class="line">&gt;&gt;A=[<span class="number">24</span>,<span class="number">35</span>,<span class="number">13</span>;<span class="number">22</span>,<span class="number">63</span>,<span class="number">23</span>;<span class="number">39</span>,<span class="number">47</span>,<span class="number">80</span>]</span><br><span class="line">A=</span><br><span class="line">  <span class="number">24</span> <span class="number">35</span> <span class="number">13</span> </span><br><span class="line">  <span class="number">22</span> <span class="number">63</span> <span class="number">23</span></span><br><span class="line">  <span class="number">39</span> <span class="number">47</span> <span class="number">80</span></span><br><span class="line">&gt;&gt;P=<span class="built_in">rem</span>(A,<span class="number">2</span>)==<span class="number">0</span></span><br><span class="line">P=</span><br><span class="line">  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">  //P中元素为<span class="number">1</span>的矩阵就是元素为偶数的位置</span><br></pre></td></tr></table></figure><ul><li>逻辑运算<ul><li>逻辑运算符：&amp;，|，~<ul><li>a&amp;b a和b要全是1，才为1</li><li>a|b a和b一个为1就是1</li><li>~a  a为0，运算结果为1；a为非0，运算结果为0</li><li>当参与逻辑运算的是两个同型的矩阵时，比较是对两矩阵位置的元素按逻辑关系运算规则逐个进行，最终的逻辑运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成</li><li>当参与逻辑运算的一个是标量，而另一个是矩阵时，则把标量与矩阵的每个元素按逻辑关系运算规则逐个比较，最终的逻辑运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成</li></ul></li></ul></li></ul><p><code>算数运算的优先级最高，逻辑运算优先级最低，但逻辑非运算是单目运算，它的优先级比双目运算要高</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//水仙花数</span><br><span class="line">&gt;&gt;m1=<span class="number">100</span>:<span class="number">999</span></span><br><span class="line">&gt;&gt;m2=<span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>);</span><br><span class="line">&gt;&gt;m3=<span class="built_in">fix</span>(m/<span class="number">100</span>);</span><br><span class="line">&gt;&gt;k=<span class="built_in">find</span>(m==m1.*m1.*m1+m2.*m2.*m2+m3.*m3.*m3)</span><br><span class="line">k=</span><br><span class="line">  <span class="number">54</span> <span class="number">271</span> <span class="number">272</span> <span class="number">308</span></span><br><span class="line">&gt;&gt;s=m(k)</span><br><span class="line">s=</span><br><span class="line">  <span class="number">153</span> <span class="number">370</span> <span class="number">371</span> <span class="number">407</span></span><br></pre></td></tr></table></figure><h2 id="字符串的处理"><a href="#字符串的处理" class="headerlink" title="字符串的处理"></a>字符串的处理</h2><ul><li>在matlab中，字符串是用单引号括起来的字符序列</li><li>若字符串中的字符有单引号，则该单引号字符要用两个单引号来表示</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;xm=<span class="string">&#x27;Central South University&#x27;</span></span><br><span class="line">&gt;&gt;xm(<span class="number">1</span>:<span class="number">3</span>)  //取字符串的第<span class="number">1</span>到第<span class="number">3</span>个字符</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">Cen</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="string">&#x27;I &quot;m a teacher.&#x27;</span></span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">I&#x27;m a teacher.</span><br></pre></td></tr></table></figure><ul><li>matlab中可以建立多行字符串，形成字符串矩阵，字符串就相当于一个行向量，每个字符就是其中一个元素</li></ul><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230727_235647.jpg" alt=""></p><h3 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h3><ul><li>字符串的执行：<code>eval(s)  这里的s是一个字符串</code></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;t=<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt;m=<span class="string">&#x27;[t,sin(t),cos(t)]&#x27;</span>;</span><br><span class="line">&gt;&gt;y=eval(m)</span><br><span class="line">y=</span><br><span class="line">  <span class="number">3.1416</span> <span class="number">0.0000</span> <span class="number">-1.0000</span></span><br></pre></td></tr></table></figure><ul><li>字符串与数值之间的转换<ul><li>abs和double函数都可以用来获取字符串矩阵所对应的ASCII码数值矩阵</li><li>char函数可以把ASCII码矩阵转换为字符串矩阵</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;s1=<span class="string">&#x27;MATLAB&#x27;</span>;</span><br><span class="line">&gt;&gt;a=<span class="built_in">abs</span>(s1)</span><br><span class="line">a=</span><br><span class="line">  <span class="number">77</span> <span class="number">65</span> <span class="number">84</span> <span class="number">76</span> <span class="number">65</span> <span class="number">66</span></span><br><span class="line">&gt;&gt;char(a+<span class="number">32</span>)</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">matlab</span><br></pre></td></tr></table></figure><ul><li>字符串的比较<ul><li>关系运算符：两个字符串的每个字符依次按ASCII值大小逐个进行比较，比较的结果是一个数值向量，向量中的元素要么是1，要么是0</li><li>字符串比较函数<ul><li>strcmp(s1,s2):用来比较字符串s1和s2是否相等，相等返回1，否则0</li><li>strncmp(s1,s2,n):用来比较两个字符串前n个字符是否相等，相等返回1，否则0</li><li>strcmpi(s1,s2):在忽略字母大小写前提下来比较字符串s1和s2是否相等，相等返回1，否则0</li><li>strncmpi(s1,s2,n)：在忽略字母大小写前提下比较两个字符串前n个字符是否相等，相等返回1，否则0</li></ul></li></ul></li><li>字符串的查找与替换<ul><li>findstr(s1,s2):返回段字符串在长字符串中的开始位置</li><li>strrep(s1,s2,s3):将字符串s1中的所有字符串s2替换成字符串s3</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;p=findstr(<span class="string">&#x27;This is test!&#x27;</span>,<span class="string">&#x27;is&#x27;</span>)</span><br><span class="line">p=</span><br><span class="line">  <span class="number">3</span> <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;p=findstr(<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;This is test!&#x27;</span>)</span><br><span class="line">p=</span><br><span class="line">  <span class="number">3</span> <span class="number">6</span></span><br><span class="line">&gt;&gt;result=strrep(<span class="string">&#x27;This is a test!&#x27;</span>,<span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">result=</span><br><span class="line">This is a class</span><br></pre></td></tr></table></figure><h2 id="特殊矩阵（调用方式相似）"><a href="#特殊矩阵（调用方式相似）" class="headerlink" title="特殊矩阵（调用方式相似）"></a>特殊矩阵（调用方式相似）</h2><ul><li><p>zreos函数：产生全0矩阵，即零矩阵</p><ul><li><p>zero(m):产生m×m零矩阵</p></li><li><p>zeros(m,n):产生m×n零矩阵</p></li><li><p>zero(size(A)):产生与矩阵A同样大小的零矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;A=<span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">A=</span><br><span class="line">  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">&gt;&gt;<span class="built_in">zeros</span>(<span class="built_in">size</span>(<span class="built_in">reshape</span>(A,<span class="number">3</span>,<span class="number">2</span>)))  //把矩阵A变为三行两列的矩阵并产生和改变后的矩阵A相同的大小的零矩阵</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>ones函数：产生全1矩阵，即幺矩阵</p></li><li><p>eye函数：产生对角线为1的矩阵，当矩阵是方阵时，得到一个单位矩阵</p></li><li><p>rand函数：产生（0，1）区间均匀分布的随机矩阵</p></li><li><p>randn函数：产生均值为0，方差为1的标准正太分布随机矩阵</p></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//首先产生<span class="number">5</span>阶两位随机整数矩阵A，再产生均值为<span class="number">0.6</span>，方差为<span class="number">0.1</span>的<span class="number">5</span>阶正太分布矩阵B，最后验证(A+B)I=IA+BI(I为单位矩阵)</span><br><span class="line">//<span class="built_in">rand</span>函数：产生（<span class="number">0</span>，<span class="number">1</span>）区间均匀分布的随机数</span><br><span class="line">//<span class="built_in">fix</span>(a+(b-a+<span class="number">1</span>)*x):产生[a,b]区间上均匀分布的随机整数</span><br><span class="line">//<span class="built_in">rand</span>函数:产生均值为<span class="number">0</span>，方差为<span class="number">1</span>的标准正太分布随机矩阵</span><br><span class="line">//μ+σx:得到均值为μ，方差为σ^<span class="number">2</span>的随机数</span><br><span class="line">&gt;&gt;A=<span class="built_in">fix</span>(<span class="number">10</span>+(<span class="number">99</span><span class="number">-10</span>+<span class="number">1</span>)*<span class="built_in">rand</span>(<span class="number">5</span>)); //产生<span class="number">5</span>行<span class="number">5</span>列的矩阵其值时<span class="number">10</span>到<span class="number">99</span>之间的矩阵A</span><br><span class="line">&gt;&gt;B=<span class="number">0.6</span>+<span class="built_in">sqrt</span>(<span class="number">0.1</span>)*<span class="built_in">randn</span>(<span class="number">5</span>);  //产生均值为<span class="number">0.6</span>方差为<span class="number">0.1</span>的<span class="number">5</span>行<span class="number">5</span>列的正态分布随机矩阵矩阵B</span><br><span class="line">&gt;&gt;C=<span class="built_in">eye</span>(<span class="number">5</span>);  //产生<span class="number">5</span>阶单位阵</span><br><span class="line">&gt;&gt;(A+B)*C==C*A+B*C</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="用于专门学科的特殊矩阵"><a href="#用于专门学科的特殊矩阵" class="headerlink" title="用于专门学科的特殊矩阵"></a>用于专门学科的特殊矩阵</h3><ul><li>魔方矩阵<ul><li>n阶魔方阵由1，2，3……n^2共n^2个整数组成，且每行，每列以及主副对角线上各n个元素之和都相等</li><li>n阶魔方阵每行每列元素的和为(1+2+3+……+n^2)/n=(n+n^3)/2</li><li>MATLAB函数magic(n)产生一个特定的魔方阵</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//产生<span class="number">8</span>阶魔方阵，求其每行每列元素的和</span><br><span class="line">&gt;&gt;M=<span class="built_in">magic</span>(<span class="number">8</span>);</span><br><span class="line">&gt;&gt;sum(M(<span class="number">1</span>,:));</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">260</span></span><br><span class="line">&gt;&gt;sum(M(:,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">ans</span>=</span><br><span class="line">  <span class="number">260</span></span><br></pre></td></tr></table></figure><ul><li><p>范德蒙矩阵</p><ul><li><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_170619.jpg" alt=""></li><li><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_170604.jpg" alt=""></li></ul></li><li><p>希尔伯特矩阵</p><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_170954.jpg" alt=""></p></li></ul><h2 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h2><ul><li><p>对角阵</p><ul><li><p>对角矩阵：只有对角线上有非零元素的矩阵</p></li><li><p>数量矩阵：对角线上的元素相等的对角矩阵</p></li><li><p>单位矩阵：对角线上的元素都为1的矩阵</p><ul><li><h5 id="提取矩阵的对角线元素"><a href="#提取矩阵的对角线元素" class="headerlink" title="提取矩阵的对角线元素"></a>提取矩阵的对角线元素</h5></li><li><h6 id="规定与主对角线平行向上为第1条对角线，向下为第-1条，主对角线为第0条对角线"><a href="#规定与主对角线平行向上为第1条对角线，向下为第-1条，主对角线为第0条对角线" class="headerlink" title="规定与主对角线平行向上为第1条对角线，向下为第-1条，主对角线为第0条对角线"></a>规定与主对角线平行向上为第1条对角线，向下为第-1条，主对角线为第0条对角线</h6></li><li><p>diag(A):提取矩阵A主对角线元素，产生一个列向量</p></li><li><p>diag(A,k):提取矩阵A第k条对角线的元素，产生一个列向量</p></li><li><h5 id="构造对角矩阵"><a href="#构造对角矩阵" class="headerlink" title="构造对角矩阵"></a>构造对角矩阵</h5></li><li><p>diag(V):以向量V为主对角线元素，产生对角矩阵</p></li><li><p>diag(V,k):以向量V为第k条对角线元素，产生对角矩阵</p></li><li><p>```matlab<br>//先建立5×5矩阵A，然后将A的第一行元素乘以1，第二行元素乘以2……，第五行乘以5<br>//方法：提取一个列向量，元素为1，2，3……5，接着让这个列向量的第一行的第一个元素乘以A的第一行，第二行第二个元素乘以A的第二行…………即让这个列向量左乘矩阵A</p><blockquote><blockquote><p>A=[7,0,1,0,5;3,5,7,4,1;4,0,3,0,2;1,1,9,2,3;1,8,5,2,9]<br>A=<br>  7 0 1 0 5<br>  3 5 7 4 1<br>  4 0 3 0 2<br>  1 1 9 2 3<br>  1 8 5 2 9<br>D=diag(1;5)<br>D*A<br>ans=<br>  7  0  1  0  5<br>  6 10 14  8  2<br> 12  0  9  0  6<br>  4  4 36  8 12<br>  5 40 25 10 45</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```matlab</span><br><span class="line">  //要将A的各列元素分别乘以对角阵的对角线元素，如何实现?  右乘矩阵</span><br><span class="line">  &gt;&gt;A=[7,0,1,0,5;3,5,7,4,1;4,0,3,0,2;1,1,9,2,3;1,8,5,2,9]</span><br><span class="line">  A=</span><br><span class="line">    7 0 1 0 5 </span><br><span class="line">    3 5 7 4 1 </span><br><span class="line">    4 0 3 0 2</span><br><span class="line">    1 1 9 2 3 </span><br><span class="line">    1 8 5 2 9</span><br><span class="line">  &gt;&gt;D=diag(1:5);</span><br><span class="line">  &gt;&gt;A*D</span><br><span class="line">  ans=</span><br><span class="line">    7  0  3  0 25</span><br><span class="line">    3 10 21 16  5</span><br><span class="line">    4  0  9  0 10</span><br><span class="line">    1  2 27  8 15</span><br><span class="line">    1 16 15  8 45</span><br></pre></td></tr></table></figure></blockquote></blockquote></li></ul></li></ul></li><li><p>三角阵</p><ul><li><p>上三角矩阵</p><ul><li><p>triu(A):提取矩阵A的主对角线以及以上元素</p></li><li><p>triu(A,k):提取矩阵A的第k条对角线及以上的元素</p></li><li><p>```matlab</p><blockquote><blockquote><p>triu(ones(4),-1)<br>ans=<br>  1 1 1 1<br>  1 1 1 1<br>  0 1 1 1<br>  0 0 1 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 下三角矩阵</span><br><span class="line"></span><br><span class="line">    - tril函数和triu用法一样</span><br><span class="line"></span><br><span class="line">### 矩阵转置</span><br><span class="line"></span><br><span class="line">- 转置运算符是小数点后面接单引号(.&#x27;)</span><br><span class="line">- 共轭转置，其运算符是单引号(&#x27;),它在转置的基础上还要取每个数的复共轭</span><br><span class="line">- ![](https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_174731.jpg)</span><br><span class="line"></span><br><span class="line">### 矩阵的旋转和旋转（上下翻转后主副对角线互换）</span><br><span class="line"></span><br><span class="line">![](https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_174757.jpg)</span><br><span class="line"></span><br><span class="line">![](https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_174844.jpg)</span><br><span class="line"></span><br><span class="line">![](https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/Screenshot_20230729_175149.jpg)</span><br><span class="line"></span><br><span class="line">### 矩阵求逆（inv函数）</span><br><span class="line"></span><br><span class="line">![](https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/qq_pic_merged_1690624552843.jpg)</span><br><span class="line"></span><br><span class="line">```matlab</span><br><span class="line">&gt;&gt;A=[1,2,3;1,4,9;1,8,27];</span><br><span class="line">&gt;&gt;b=[5;-2;6];</span><br><span class="line">&gt;&gt;x=inv(A)*b</span><br><span class="line">x=</span><br><span class="line">  23.0000</span><br><span class="line"> -14.5000</span><br><span class="line">  3.6667</span><br><span class="line">  </span><br><span class="line">//也可以用左除运算符  </span><br><span class="line">&gt;&gt;x=A\b</span><br><span class="line">x=</span><br><span class="line">  23.0000</span><br><span class="line"> -14.5000</span><br><span class="line">  3.6667</span><br></pre></td></tr></table></figure></blockquote></blockquote></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Matlab-的学习&quot;&gt;&lt;a href=&quot;#Matlab-的学习&quot; class=&quot;headerlink&quot; title=&quot;Matlab 的学习&quot;&gt;&lt;/a&gt;Matlab 的学习&lt;/h1&gt;&lt;h2 id=&quot;matlab系统环境&quot;&gt;&lt;a href=&quot;#matlab系统环境&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ mistakes</title>
    <link href="https://pipi1002.github.io/2023/05/04/C++mistakes/"/>
    <id>https://pipi1002.github.io/2023/05/04/C++mistakes/</id>
    <published>2023-05-04T04:41:44.000Z</published>
    <updated>2023-06-26T08:17:34.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-关于函数-lt-返回值类型-gt-下列表述错误的是："><a href="#1-关于函数-lt-返回值类型-gt-下列表述错误的是：" class="headerlink" title="1.关于函数&lt;返回值类型&gt;,下列表述错误的是："></a>1.关于函数&lt;返回值类型&gt;,下列表述错误的是：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A &lt;返回类型&gt;中有可能包含关键字<span class="type">int</span></span><br><span class="line">B &lt;返回类型&gt;中有可能包含自定义标识符  <span class="comment">//B</span></span><br><span class="line">C &lt;返回类型&gt;中有可能包含字符 *</span><br><span class="line">D &lt;返回类型&gt;中有可能包含 []</span><br></pre></td></tr></table></figure><p>注意：这里的类型可以是预定义类型（如int），复合类型（如double*），用户自定义类型（如枚举类），若返回值只做更新（或设置）等操作，则该函数返回类型是void，<code>函数类型和内置数组不能作为返回值类型</code></p><h2 id="2-程序阅读"><a href="#2-程序阅读" class="headerlink" title="2.程序阅读"></a>2.程序阅读</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> a = <span class="number">10</span>, b = <span class="number">30</span>, l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) a++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> m=a;m&lt;=b;m+=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fun</span>(m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (l++ % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fun</span><span class="params">(<span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sqrtm = (<span class="type">int</span>)<span class="built_in">sqrt</span>(n);  <span class="comment">//sprt:求参数的平方根，并且其参数是一个double类型，返回值也是double类型</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= sqrtm; i++)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//11 ，13 ，17 ，19 ，23 ，29</span></span><br></pre></td></tr></table></figure><h2 id="3-假定一个类的构造函数为“A（int-i-4，int-j-0）-a-i-n-j-”-则执行”A-x-1-”语句后，x-a和x-b的值分别为（）"><a href="#3-假定一个类的构造函数为“A（int-i-4，int-j-0）-a-i-n-j-”-则执行”A-x-1-”语句后，x-a和x-b的值分别为（）" class="headerlink" title="3.假定一个类的构造函数为“A（int i=4，int j=0）{a=i;n=j;}”,则执行”A x(1);”语句后，x.a和x.b的值分别为（）"></a>3.假定一个类的构造函数为“A（int i=4，int j=0）{a=i;n=j;}”,则执行”A x(1);”语句后，x.a和x.b的值分别为（）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A <span class="number">1</span>和<span class="number">0</span></span><br><span class="line">B <span class="number">1</span>和<span class="number">4</span></span><br><span class="line">C <span class="number">4</span>和<span class="number">0</span></span><br><span class="line">D <span class="number">4</span>和<span class="number">1</span></span><br><span class="line"><span class="comment">//带默认的构造函数，对应实参没有值时就采用形参值。调用构造函数时，i=1，不采用默认值，而只有一个参数，j采用默认值0，因此a=1，b=0；</span></span><br></pre></td></tr></table></figure><h2 id="4-派生类构造函数的成员初始化列表中，不能包含的初始化项是："><a href="#4-派生类构造函数的成员初始化列表中，不能包含的初始化项是：" class="headerlink" title="4.派生类构造函数的成员初始化列表中，不能包含的初始化项是："></a>4.派生类构造函数的成员初始化列表中，不能包含的初始化项是：</h2><p><code>A：</code>基类的构造函数</p><p><code>B：</code>基类的子对象  //B</p><p><code>C：</code>派生类的子对象</p><p><code>D：</code>派生类自身的数据成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为在C++中，构造函数不能被继承，因此，派生类的构造函数必须通过调用基类的构造函数来初始化基类子对象（在派生类初始化列表直接初始化基类的成员，被称为“越级初始化”）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//基类的子对象</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> temp):<span class="built_in">n</span>(temp)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:<span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//    B(int temp):n(temp)&#123;&#125;   对基类子对象进行初始化“越级初始化”</span></span><br><span class="line">    <span class="comment">//但是可以&quot;越级赋值&quot;</span></span><br><span class="line">    <span class="built_in">B</span>(<span class="type">int</span> temp)&#123;n=temp&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">B</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-多继承派生类构造函数构造对象时，（B）被最先调用"><a href="#5-多继承派生类构造函数构造对象时，（B）被最先调用" class="headerlink" title="5.多继承派生类构造函数构造对象时，（B）被最先调用"></a>5.多继承派生类构造函数构造对象时，（B）被最先调用</h2><p><code>A:</code>派生类自己的构造函数</p><p><code>B:</code>虚基类的构造函数</p><p><code>C:</code>非虚基类的构造函数</p><p><code>D:</code>派生类中子对象类的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先调用（构造函数）所有基类的构造函数；再调用派生类中子对象类的构造函数（如派生类的子对象）（在一个类中内嵌另一个类的对象作为数据成员,称为类的组合。该内嵌对象称为对象成员,也称为子对象。）</span></span><br><span class="line">；最后调用派生类构造函数</span><br><span class="line"><span class="comment">//`注意`：处于同一层次的各基类构造函数的调用顺序取决于派生类所指定的的基类顺序，与派生类构造函数中所定义的成员函数初始化无关</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>(<span class="type">int</span> i)&#123;</span><br><span class="line">        a=i;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Constructing Base1 a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>(<span class="type">int</span> i)&#123;</span><br><span class="line">        b=i;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Constructing Base1 b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derivedclass</span>:<span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derivedclass</span>(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line">Derivedclass::<span class="built_in">Derivedclass</span>(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k):<span class="built_in">Base2</span>(i),<span class="built_in">Base1</span>(j)  <span class="comment">//先调用Base1再调用Base2，虽然在初始化列表顺序中，先调用了Base2再调用了Base1，但是根据前文介绍先调用Base1</span></span><br><span class="line">&#123;</span><br><span class="line">    d=k;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Constructing Derivedcalss d=&quot;</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derivedcalss <span class="title">x</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果派生类有一个虚基类作为祖先类，那么在派生类构造函数的初始化列表中需要对虚基类构造函数的调用，如果未列出则表明用的是虚基类的无参构造函数</span></span><br><span class="line"><span class="comment">//注意：不管初始化列表中次序如何，对虚基类构造函数的调用总是先于普通基类的构造函数（虚基类的唯一副本只被初始化一次）</span></span><br><span class="line">例如；</span><br><span class="line">    带有基类的多层派生类构造函数的成员初始化列表中都要列出虚基类的构造函数，这样将对虚基类的子对象初始化<span class="number">1</span>次</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>()&#123;cout&lt;&lt;<span class="string">&quot;Constructing Base1&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>()&#123;cout&lt;&lt;<span class="string">&quot;Constructing Base2&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived1</span>:<span class="keyword">public</span> Base2,<span class="keyword">virtual</span> <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived1</span>()&#123;cout&lt;&lt;<span class="string">&quot;Constructing Derived1&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived2</span>:<span class="keyword">public</span> Base2,<span class="keyword">virtual</span> <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived1</span>()&#123;cout&lt;&lt;<span class="string">&quot;Constructing Derived2&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived3</span>:<span class="keyword">public</span> Derived1,<span class="keyword">virtual</span> <span class="keyword">public</span> Derived2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived1</span>()&#123;cout&lt;&lt;<span class="string">&quot;Constructing Derived3&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Derived3 obj;</span><br><span class="line">    return0;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">Constructing Base1</span><br><span class="line">Constructing Base2</span><br><span class="line">Constructing Derived2</span><br><span class="line">Constructing Base2</span><br><span class="line">Constructing Derived1</span><br><span class="line">Constructing Derived3</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有多个子对象的类的构造函数如何定义</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">X</span> &#123;</span><br><span class="line">   类名<span class="number">1</span>  对象成员名<span class="number">1</span>;</span><br><span class="line">   类名<span class="number">2</span>  对象成员名<span class="number">2</span>;</span><br><span class="line">           …</span><br><span class="line">   类名n  对象成员名n;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="comment">//则类X的构造函数应该这样定义</span></span><br><span class="line">X∷<span class="built_in">X</span>(参数表<span class="number">0</span>)：对象成员名<span class="number">1</span>(参数表<span class="number">1</span>)，对象成员名<span class="number">2</span></span><br><span class="line">       (参数表<span class="number">2</span>)，…，对象成员名<span class="built_in">n</span>(参数表n) </span><br><span class="line">  &#123;</span><br><span class="line">     类X的构造函数体</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//参数表1、参数表2 、… 、参数表n的数据，一般来自参数表0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用构造函数D∷D( )时:</span></span><br><span class="line"><span class="comment">   首先按各对象成员在类定义中的顺序依次调用它们的构造函数，对这些对象初始化。</span></span><br><span class="line"><span class="comment">   最后再执行D∷D( )的函数体。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//撤销类D的对象d1时,调用析构函数的调用顺序与调用构造函数的顺序相反。</span></span><br></pre></td></tr></table></figure><h2 id="6-程序阅读题"><a href="#6-程序阅读题" class="headerlink" title="6.程序阅读题"></a>6.程序阅读题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base</span>(<span class="type">int</span> i) &#123; cout &lt;&lt; i; &#125;</span><br><span class="line">  ~<span class="built_in">Base</span> () &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base1</span>(<span class="type">int</span> i, <span class="type">int</span> j=<span class="number">0</span>) : <span class="built_in">Base</span>(j) &#123; cout &lt;&lt; i; &#125;</span><br><span class="line">  ~<span class="built_in">Base1</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Base2</span>(<span class="type">int</span> i, <span class="type">int</span> j=<span class="number">0</span>) : <span class="built_in">Base</span>(j) &#123; cout &lt;&lt; i; &#125;</span><br><span class="line">  ~<span class="built_in">Base2</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Derived</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d) : <span class="built_in">mem1</span>(a), <span class="built_in">mem2</span>(b), <span class="built_in">Base1</span>(c), </span><br><span class="line">                                         <span class="built_in">Base2</span>(d), <span class="built_in">Base</span>(a) </span><br><span class="line">    &#123; cout &lt;&lt; b; &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  Base2 mem2;</span><br><span class="line">  Base1 mem1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="function">Derived <span class="title">objD</span> <span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//14302012</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230507_154148.png" alt=""></p><h2 id="7-不能在类声明中给成员赋值"><a href="#7-不能在类声明中给成员赋值" class="headerlink" title="7.不能在类声明中给成员赋值"></a>7.不能在类声明中给成员赋值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">abc</span> </span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> a=<span class="string">&#x27;q&#x27;</span>; <span class="comment">//错误     </span></span><br><span class="line"><span class="type">int</span>  b=<span class="number">33</span>; <span class="comment">//错误     </span></span><br><span class="line"><span class="keyword">public</span>:       </span><br><span class="line">    … </span><br><span class="line">&#125;;</span><br><span class="line">   <span class="comment">// C++规定，只有在对象定义之后才能给数据成员赋初值</span></span><br></pre></td></tr></table></figure><p>注意：<code>声明了一个类便声明了一种类型，这时没有给它分配存储空间，只有定义了对象后，系统才为对象分配存储空间</code></p><h2 id="8-数据成员是按照它们在类中声明的顺序进行初始化的-与它们在成员初始化列表中列出的顺序无关"><a href="#8-数据成员是按照它们在类中声明的顺序进行初始化的-与它们在成员初始化列表中列出的顺序无关" class="headerlink" title="8.数据成员是按照它们在类中声明的顺序进行初始化的,与它们在成员初始化列表中列出的顺序无关"></a>8.数据成员是按照它们在类中声明的顺序进行初始化的,与它们在成员初始化列表中列出的顺序无关</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">   <span class="type">int</span> mem1;</span><br><span class="line">   <span class="type">int</span> mem2;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">D</span>(<span class="type">int</span> i):<span class="built_in">mem1</span>(i),<span class="built_in">mem2</span>(mem1+<span class="number">1</span>)</span><br><span class="line">   &#123; cout&lt;&lt;<span class="string">&quot;mem1: &quot;</span>&lt;&lt;mem1&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;mem2: &quot;</span>&lt;&lt;mem2&lt;&lt;endl; &#125; &#125;;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;  <span class="function">D <span class="title">d</span><span class="params">(<span class="number">15</span>)</span></span>; &#125; </span><br><span class="line"><span class="comment">//运行结果为 mem1: 15 mem2: 16</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">   <span class="type">int</span> mem1;</span><br><span class="line">   <span class="type">int</span> mem2;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">D</span>(<span class="type">int</span> i):<span class="built_in">mem2</span>(i),<span class="built_in">mem1</span>(mem2+<span class="number">1</span>)</span><br><span class="line">   &#123; cout&lt;&lt;<span class="string">&quot;mem1: &quot;</span>&lt;&lt;mem1&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;mem2:&quot;</span>&lt;&lt;mem2&lt;&lt;endl; &#125; &#125;;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;  <span class="function">D <span class="title">d</span><span class="params">(<span class="number">15</span>)</span></span>; &#125; </span><br><span class="line"><span class="comment">//注意：运行结果为 mem1: 858993459 mem2: 15</span></span><br><span class="line"><span class="comment">//初始化过程:</span></span><br><span class="line"><span class="number">1.</span>mem1=mem2+<span class="number">1</span>=随机数</span><br><span class="line"><span class="number">2.</span>mem2=i=<span class="number">15</span></span><br></pre></td></tr></table></figure><h2 id="9-在一个类中定义了全部是默认参数的构造函数后-不能同时再声明无参数的默认构造函数，或其他重载构造函数。"><a href="#9-在一个类中定义了全部是默认参数的构造函数后-不能同时再声明无参数的默认构造函数，或其他重载构造函数。" class="headerlink" title="9.在一个类中定义了全部是默认参数的构造函数后, 不能同时再声明无参数的默认构造函数，或其他重载构造函数。"></a>9.在一个类中定义了全部是默认参数的构造函数后, 不能同时再声明无参数的默认构造函数，或其他重载构造函数。</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个类中有以下构造函数的声明:</span></span><br><span class="line">   <span class="built_in">Box</span>(<span class="type">int</span> h=<span class="number">10</span>,<span class="type">int</span> w=<span class="number">10</span>,<span class="type">int</span> len=<span class="number">10</span>); </span><br><span class="line"><span class="comment">//就不能再声明无参数的构造函数：</span></span><br><span class="line">   <span class="built_in">Box</span>( ); </span><br><span class="line"><span class="comment">//否则,如用下面的语句建立对象</span></span><br><span class="line">   Box box1;</span><br><span class="line"><span class="comment">//box1不知道调用哪个构造函数，会产生二义性</span></span><br></pre></td></tr></table></figure><h2 id="10-对象数组"><a href="#10-对象数组" class="headerlink" title="10.对象数组"></a>10.对象数组</h2><p>  定义一维对象数组的格式如下:</p><p> <code>类名 数组名[下标表达式];</code></p><p>例如:</p><p>   exam ob[4];</p><h6 id="说明：共建立了四个对象-即每一个数组元素是一个对象-即ob-0-、ob-1-、ob-2-、-ob-3-，共调用了4次构造函数。"><a href="#说明：共建立了四个对象-即每一个数组元素是一个对象-即ob-0-、ob-1-、ob-2-、-ob-3-，共调用了4次构造函数。" class="headerlink" title="说明：共建立了四个对象,即每一个数组元素是一个对象(即ob[0]、ob[1]、ob[2]、 ob[3])，共调用了4次构造函数。"></a>说明：共建立了四个对象,即每一个数组元素是一个对象(即ob[0]、ob[1]、ob[2]、 ob[3])，共调用了4次构造函数。</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream.h&gt;</span>    </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exam</span>&#123;</span><br><span class="line">    <span class="type">int</span> x; </span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">exam</span>( )&#123; x=<span class="number">123</span>;&#125;</span><br><span class="line">  <span class="built_in">exam</span>(<span class="type">int</span> n) &#123; x=n;&#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">get_x</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;&#125;;      </span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  exam ob[<span class="number">4</span>]=&#123;<span class="number">55</span>,<span class="number">66</span>&#125;;   <span class="comment">//ob[0]和ob[1]调用带参构造函数，ob[2]和ob[3]调用无参构造函数</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) cout&lt;&lt;ob[i].<span class="built_in">get_x</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;  &#125;</span><br><span class="line"><span class="comment">//55 66 123 123</span></span><br></pre></td></tr></table></figure><h2 id="11-对象指针"><a href="#11-对象指针" class="headerlink" title="11.对象指针"></a>11.对象指针</h2><p>声明对象指针的一般语法形式为:</p><p><code>类名* 对象指针名;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setRec</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> wid)</span>      </span></span><br><span class="line"><span class="function">  </span>&#123; length=len; width=wid; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span> </span>&#123;  cout&lt;&lt;length&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;width&lt;&lt;endl; &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> length,width; &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; Rectangle rec ;        <span class="comment">//定义类Rectangle 的对象rec</span></span><br><span class="line">  Rectangle *pr;         <span class="comment">//定义pr为指向类Rectangle的对象指针变量</span></span><br><span class="line">  rec.<span class="built_in">setRec</span>(<span class="number">20</span>,<span class="number">30</span>);     <span class="comment">//调用对象rec中的函数setRec</span></span><br><span class="line">  pr=&amp;rec;               <span class="comment">// 将对象rec的起始地址赋给pr</span></span><br><span class="line">  pr-&gt;<span class="built_in">disp</span>();    <span class="comment">// 调用pr所指向的对象rec中的函数disp；用对象指针访问对象成员时，不能用“.”操作符，而应使用“-&gt; ”操作符</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;   &#125;</span><br><span class="line"></span><br><span class="line">程序的运行结果如下:</span><br><span class="line"><span class="number">20</span> <span class="number">30</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-静态数据成员的应用（在类Student中，声明数据成员count，希望每定义一个对象count加1，从而达到统计学生的总数的目的。）"><a href="#12-静态数据成员的应用（在类Student中，声明数据成员count，希望每定义一个对象count加1，从而达到统计学生的总数的目的。）" class="headerlink" title="12.静态数据成员的应用（在类Student中，声明数据成员count，希望每定义一个对象count加1，从而达到统计学生的总数的目的。）"></a>12.静态数据成员的应用（在类Student中，声明数据成员count，希望每定义一个对象count加1，从而达到统计学生的总数的目的。）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream.h&gt;</span>      </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="type">int</span> count;          <span class="comment">//声明数据成员count，表示学生数,用于统计学生的总数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">Student</span>( ) &#123; count++;  &#125;  <span class="comment">//   构造函数,希望每定义一个学生对象，学生数count加1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">( )</span>              <span class="comment">// 成员函数，显示当前学生数</span></span></span><br><span class="line"><span class="function"> </span>&#123;  cout&lt;&lt;<span class="string">&quot;count= &quot;</span>&lt;&lt; count &lt;&lt;endl;  &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"> <span class="built_in">main</span>( )</span><br><span class="line"> &#123; <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">   Student Stu1;  <span class="comment">//定义第1个学生对象Stu1,第1次调用构造函数</span></span><br><span class="line">   Student Stu2;  <span class="comment">//定义第2个学生对象Stu2,第2次调用构造函数</span></span><br><span class="line">   Stu1.<span class="built_in">print</span>();</span><br><span class="line">   Stu2.<span class="built_in">print</span>();  <span class="comment">//希望打印的结果为：count=2 count=2  实际打印的结果为： count= -858993459 count= -858993459</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//注意：出现错误的原因是:</span></span><br><span class="line"><span class="comment">// count  Stu1.count  Stu2,count  三者是独立的，互不相干  </span></span><br><span class="line"><span class="comment">//    一个学生对象的count仅仅属于这个学生对象,而不是所有学生对象所共享的,因此count不能表示所有学生的总人数。</span></span><br><span class="line"><span class="comment">// 解决方法：   为了实现同一个类的多个对象之间的数据共享,C++提出了静态数据成员的概念。 </span></span><br></pre></td></tr></table></figure><h6 id="更改后为："><a href="#更改后为：" class="headerlink" title="更改后为："></a>更改后为：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream.h&gt;</span>      </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> count;     <span class="comment">//声明静态数据成员count，被所有的对象共享, 用于统计学生的总数                       </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">Student</span>()&#123; count++;&#125;     <span class="comment">//构造函数,每创建一个学生对象,学生数count加1</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;  cout&lt;&lt;<span class="string">&quot;count= &quot;</span>&lt;&lt; count &lt;&lt;endl;  &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Student::count=<span class="number">0</span>;   <span class="comment">//给静态数据成员count赋初值0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123; Student Stu1; <span class="comment">//定义第1个学生对象Stu1,第1次调用构造函数Student Stu2;    //定义第2个学生对象Stu1,第2次调用构造函数</span></span><br><span class="line">  Stu1.<span class="built_in">print</span>();      </span><br><span class="line">  Stu2.<span class="built_in">print</span>();   </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; &#125; </span><br></pre></td></tr></table></figure><ol><li>静态数据成员属于类(准确地说，是属于类中一个对象集合)，而不像普通数据成员那样属于某一对象，因此可以使用“类名∷”访问静态的数据成员。用类名访问静态数据成员的格式如下:</li></ol><p>​       类名::静态数据成员名</p><p>2) 静态数据成员初始化应在类外单独进行,而且应在定义对象之前进行。一般在主函数main 之前,类声明之后的特殊地带为它提供定义和初始化（如果末对静态数据成员赋初值,则编译系统会自动赋予初值0）<br>3) 公有静态数据成员可以在对象定义之前被访问<br>4) 公有静态数据成员可通过对象进行访问</p><h2 id="13-调用拷贝构造函数的时机"><a href="#13-调用拷贝构造函数的时机" class="headerlink" title="13.调用拷贝构造函数的时机"></a>13.调用拷贝构造函数的时机</h2><h3 id="下列情况中，哪种情况不会调用拷贝构造函数"><a href="#下列情况中，哪种情况不会调用拷贝构造函数" class="headerlink" title="下列情况中，哪种情况不会调用拷贝构造函数"></a>下列情况中，哪种情况不会调用拷贝构造函数</h3><ul><li>[ ] 用派生类的对象去初始化该基类对象时</li><li>[x] <em>将类的一个对象赋值给该类的另一个对象时</em></li><li>[ ] 函数的形参是类的对象，调用函数进行形参和实参结合时</li><li>[ ] 函数的返回值是类的对象，调用函数进行形参和实参结合时</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将类的一个对象赋值给该类的另一个对象时，不用调用拷贝构造函数，是用赋值运算符重载实现的：</span></span><br><span class="line"><span class="function">MyClass <span class="title">a</span><span class="params">(b)</span></span>;</span><br><span class="line">或者 MyClass a=b;<span class="comment">//就会调用 赋值重载 operator=来赋值，对象a已经存在了，调用普通的赋值运算符就可以了，不用再调用构造函数</span></span><br></pre></td></tr></table></figure><ul><li>程序中需要创建一个新的对象，并用另一个对象对它初始化</li><li>函数的参数为类的对象</li><li>函数的返回值是类的对象</li></ul><h2 id="14-下列关于对象的描述错误的是"><a href="#14-下列关于对象的描述错误的是" class="headerlink" title="14.下列关于对象的描述错误的是"></a>14.下列关于对象的描述错误的是</h2><ul><li>[ ] 定义对象时系统会自动进行初始化</li><li>[ ] 对象成员的表示与C语言中结构变量的成员表示相同</li><li>[ ] 属于同一个类的对象占有内存字节数相同</li><li>[x] 一个类所能创建对象的个数是有限制的</li></ul><h2 id="15-程序阅读题"><a href="#15-程序阅读题" class="headerlink" title="15.程序阅读题"></a>15.程序阅读题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="built_in">point</span>()&#123;number++;&#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123;number--;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> point::number=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point *ptr;<span class="comment">//指针不会调用构造函数和析构函数，只是定义了一个指针，没有申请内存</span></span><br><span class="line">    point A,B;<span class="comment">// +2</span></span><br><span class="line">    &#123;</span><br><span class="line">        point *ptr_point=<span class="keyword">new</span> point[<span class="number">3</span>];<span class="comment">//使用new创建对象时，申请分配内存，调用构造函数  +3</span></span><br><span class="line">        ptr=ptr_point;</span><br><span class="line">    &#125;</span><br><span class="line">    point C;  <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">delete</span>[]ptr; <span class="comment">//释放空间会调用构造函数  -3</span></span><br><span class="line">    cout&lt;&lt;point::number&lt;&lt;endl;  <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Point *ptr_point = new Point[3];动态创建3个对象实例，调用默认构造函数3次。而ptr=ptr_point语句让ptr指向ptr_point动态数组，不会调用构造函数。ptr_point指针本身被释放的时，不会销毁指向的实例。</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">CT</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"> <span class="built_in">CT</span> () &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Default constructor called&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">CT</span> (<span class="type">const</span> CT &amp;rhs) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Copy constructor called&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> CT ct;</span><br><span class="line"> CT *p;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;Step1&quot;</span> &lt;&lt; endl;</span><br><span class="line"> p = <span class="keyword">new</span> CT;     <span class="comment">//动态创建一个对象实例，调用默认构造函数1次</span></span><br><span class="line"> <span class="function">CT <span class="title">ct3</span> <span class="params">(*p)</span></span>;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;Step2&quot;</span> &lt;&lt; endl;</span><br><span class="line"> <span class="keyword">delete</span> p;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Default constructor called </span></span><br><span class="line"><span class="comment">//Step1</span></span><br><span class="line"><span class="comment">//Default constructor called</span></span><br><span class="line"><span class="comment">//Copy constructor called</span></span><br><span class="line"><span class="comment">//Step2</span></span><br></pre></td></tr></table></figure><h2 id="16-理解int-p-3-和int-p-3-的意思"><a href="#16-理解int-p-3-和int-p-3-的意思" class="headerlink" title="16.理解int( p)[3]和int p[3]的意思"></a>16.理解int(<em> p)[3]和int </em>p[3]的意思</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下列程序输出结果是:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n[][<span class="number">3</span>]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span>(*p)[<span class="number">3</span>];</span><br><span class="line">    p=n;</span><br><span class="line">    cout&lt;&lt;p[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;*(p[<span class="number">0</span>]+<span class="number">1</span>)&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;(*p)[<span class="number">2</span>]&lt;&lt;endl; <span class="comment">//10，20，30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int(*p)[3]数组指针，p是一个指针，指向一个有3个变量的一维数组</span></span><br><span class="line"><span class="comment">//int *p[3]指针数组，p是一个有三个元素的数组，每个元素的类型都是整形指针</span></span><br><span class="line"><span class="comment">//因为定义数组[]的优先级高于定义指针*的优先级</span></span><br></pre></td></tr></table></figure><h2 id="17-程序阅读"><a href="#17-程序阅读" class="headerlink" title="17.程序阅读"></a>17.程序阅读</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">Base</span>() &#123; cout &lt;&lt; <span class="string">&#x27;A&#x27;</span>; &#125;  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Base</span>(<span class="type">char</span> c) &#123; cout &lt;&lt; c; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Derived</span>(<span class="type">char</span> c) &#123; cout &lt;&lt; c; &#125;   <span class="comment">//派生类构造函数中无基类参数表则调用无参的基类构造函数  //2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Derived <span class="title">d1</span><span class="params">(<span class="string">&#x27;B&#x27;</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AB</span></span><br></pre></td></tr></table></figure><h2 id="18-带有基类的多层派生类构造函数的成员初始化列表中都要列出虚基类的构造函数，这样将对虚基类的子对象初始化（）"><a href="#18-带有基类的多层派生类构造函数的成员初始化列表中都要列出虚基类的构造函数，这样将对虚基类的子对象初始化（）" class="headerlink" title="18.带有基类的多层派生类构造函数的成员初始化列表中都要列出虚基类的构造函数，这样将对虚基类的子对象初始化（）"></a>18.带有基类的多层派生类构造函数的成员初始化列表中都要列出虚基类的构造函数，这样将对虚基类的子对象初始化（）</h2><ul><li>[ ] 与虚基类下面的派生类个数有关</li><li>[ ] 多次</li><li>[ ] 二次</li><li>[x] 一次</li></ul><h2 id="19-程序阅读"><a href="#19-程序阅读" class="headerlink" title="19.程序阅读"></a>19.程序阅读</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> i) :<span class="built_in">a</span>(i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A:constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A:Destructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Geta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> i = <span class="number">0</span>, <span class="type">int</span> j = <span class="number">0</span>) :<span class="built_in">A</span>(i),<span class="built_in">a</span>(j), <span class="built_in">b</span>(i + j)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B:Constructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B:Destructor called.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A::<span class="built_in">Print</span>();</span><br><span class="line">cout &lt;&lt; b &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; a.<span class="built_in">Geta</span>()&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">B <span class="title">b1</span><span class="params">(<span class="number">8</span>)</span>, <span class="title">b2</span><span class="params">(<span class="number">12</span>, <span class="number">15</span>)</span></span>;</span><br><span class="line">b1.<span class="built_in">Print</span>();</span><br><span class="line">b2.<span class="built_in">Print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:constructor called.</span></span><br><span class="line"><span class="comment">A:constructor called.</span></span><br><span class="line"><span class="comment">B:Constructor called.</span></span><br><span class="line"><span class="comment">A:constructor called.</span></span><br><span class="line"><span class="comment">A:constructor called.</span></span><br><span class="line"><span class="comment">B:Constructor called.</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">8,0</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">27,15</span></span><br><span class="line"><span class="comment">B:Destructor called.</span></span><br><span class="line"><span class="comment">A:Destructor called.</span></span><br><span class="line"><span class="comment">A:Destructor called.</span></span><br><span class="line"><span class="comment">B:Destructor called.</span></span><br><span class="line"><span class="comment">A:Destructor called.</span></span><br><span class="line"><span class="comment">A:Destructor called.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">test</span>(<span class="type">int</span> i=<span class="number">0</span>):<span class="built_in">x</span>(i)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;text::x&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ft</span> :<span class="keyword">public</span> test</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ft::y=&quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ft</span>(<span class="type">int</span> i=<span class="number">2</span>):<span class="built_in">test</span>(i),<span class="built_in">y</span>(i)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ft <span class="title">ft1</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">void</span>(test:: * p)();</span><br><span class="line">p = test::fun1;  <span class="comment">//p指向fun1函数</span></span><br><span class="line">(ft1.* p)();   <span class="comment">//（ft1.*p）实际上就算调用ft1对象的fun1（）函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ft::y=3</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A::~A() called&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">buf = <span class="keyword">new</span> <span class="type">char</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]buf;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B::~B() called&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(A* a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* a = <span class="keyword">new</span> <span class="built_in">B</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">fun</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B::~B() called</span></span><br><span class="line"><span class="comment">//A::~A() called</span></span><br></pre></td></tr></table></figure><h2 id="20-运算符的使用"><a href="#20-运算符的使用" class="headerlink" title="20.运算符的使用"></a>20.运算符的使用</h2><h3 id="插入符-lt-lt-和-提取符-gt-gt"><a href="#插入符-lt-lt-和-提取符-gt-gt" class="headerlink" title="插入符&lt;&lt; 和 提取符&gt;&gt;"></a>插入符&lt;&lt; 和 提取符&gt;&gt;</h3><p>下列关于C++程序中使用提取符和插入符的输入/输出语句的描述中，错误的是（C ）</p><ul><li>[ ] 提取符是对右移运算符（&gt;&gt;）重载得到的</li><li>[ ] 插入符是对左移运算符（&lt;&lt;）重载得到的</li><li>[x] 提取符和插入符都是双目运算符，它们要求有两个操作数</li><li>[ ] 提取符和插入符在输入/输出语句中不可以连用</li></ul><h6 id="注意-操作数是指，参与运算操作的源数据，通常由指令的地址部分标识出来-提取符和插入符都是单目运算符"><a href="#注意-操作数是指，参与运算操作的源数据，通常由指令的地址部分标识出来-提取符和插入符都是单目运算符" class="headerlink" title="注意:操作数是指，参与运算操作的源数据，通常由指令的地址部分标识出来   提取符和插入符都是单目运算符"></a>注意:操作数是指，参与运算操作的源数据，通常由指令的地址部分标识出来   提取符和插入符都是单目运算符</h6><h3 id="不能用浮点数操作的运算符"><a href="#不能用浮点数操作的运算符" class="headerlink" title="不能用浮点数操作的运算符"></a>不能用浮点数操作的运算符</h3><p>1.&amp; 双目</p><p>2.%</p><p>3.==     !=</p><h3 id="类型转换运算符的使用"><a href="#类型转换运算符的使用" class="headerlink" title="类型转换运算符的使用"></a>类型转换运算符的使用</h3><ul><li>[ ] 类型转换运算符是(&lt;类型&gt;)</li><li>[ ] 类型转换运算符是单目运算符</li><li>[x] 类型转换运算符通常用于保值转换</li><li>[ ] 类型转换运算符作用与表达式左边</li></ul><h6 id="注意：类型转换运算符通常用于赋值中"><a href="#注意：类型转换运算符通常用于赋值中" class="headerlink" title="注意：类型转换运算符通常用于赋值中"></a>注意：类型转换运算符通常用于赋值中</h6><h2 id="21-返回类型"><a href="#21-返回类型" class="headerlink" title="21.返回类型"></a>21.返回类型</h2><p>关于函数中的&lt;返回类型&gt;，下列表述中错误的是（ B ）</p><ul><li>[ ] &lt;返回类型&gt;中有可能包含关键字int</li><li>[x] &lt;返回类型&gt;中有可能包含自定义标识符</li><li>[ ] &lt;返回类型&gt;中有可能包含字符</li><li>[ ] &lt;返回类型&gt;中可能包含［］</li></ul><h6 id="注意：-lt-返回类型-gt-又称函数类型，表示一个函数所计算（或运行）的结果值类型，这里的类型可以是预定义类型（如int），复合类型（如double-），用户定义类型（如枚举类），若返回值只做更新（或设置）等操作，则该函数返回值类型为void类型，函数类型和内置数组不能作为返回类型，但类类型可以被直接返回"><a href="#注意：-lt-返回类型-gt-又称函数类型，表示一个函数所计算（或运行）的结果值类型，这里的类型可以是预定义类型（如int），复合类型（如double-），用户定义类型（如枚举类），若返回值只做更新（或设置）等操作，则该函数返回值类型为void类型，函数类型和内置数组不能作为返回类型，但类类型可以被直接返回" class="headerlink" title="注意：&lt;返回类型&gt;又称函数类型，表示一个函数所计算（或运行）的结果值类型，这里的类型可以是预定义类型（如int），复合类型（如double*），用户定义类型（如枚举类），若返回值只做更新（或设置）等操作，则该函数返回值类型为void类型，函数类型和内置数组不能作为返回类型，但类类型可以被直接返回"></a>注意：&lt;返回类型&gt;又称函数类型，表示一个函数所计算（或运行）的结果值类型，这里的类型可以是预定义类型（如int），复合类型（如double*），用户定义类型（如枚举类），若返回值只做更新（或设置）等操作，则该函数返回值类型为void类型，函数类型和内置数组不能作为返回类型，但类类型可以被直接返回</h6><h2 id="22-虚函数-下列关于虚函数的说明中，正确的是（-B-）"><a href="#22-虚函数-下列关于虚函数的说明中，正确的是（-B-）" class="headerlink" title="22.虚函数   下列关于虚函数的说明中，正确的是（ B ）"></a>22.虚函数   下列关于虚函数的说明中，正确的是（ B ）</h2><ul><li>[ ] 从虚基类继承的函数都是虚函数</li><li>[x] 虚函数不得是静态成员函数</li><li>[ ] 只能通过指针或引用调用虚函数</li><li>[ ]  抽象类中的成员函数都是虚函数</li></ul><h6 id="注意：1-虚函数是被virtual关键字修饰的成员函数，且不能是静态成员函数"><a href="#注意：1-虚函数是被virtual关键字修饰的成员函数，且不能是静态成员函数" class="headerlink" title="注意：1.虚函数是被virtual关键字修饰的成员函数，且不能是静态成员函数"></a>注意：1.虚函数是被virtual关键字修饰的成员函数，且不能是静态成员函数</h6><h6 id="2-实现多态性之后不再定义声明，继承也为虚函数"><a href="#2-实现多态性之后不再定义声明，继承也为虚函数" class="headerlink" title="2.实现多态性之后不再定义声明，继承也为虚函数"></a>2.实现多态性之后不再定义声明，继承也为虚函数</h6><h6 id="3-动态联编只能通过指针或引用标识对象操作虚函数"><a href="#3-动态联编只能通过指针或引用标识对象操作虚函数" class="headerlink" title="3.动态联编只能通过指针或引用标识对象操作虚函数"></a>3.动态联编只能通过指针或引用标识对象操作虚函数</h6><h2 id="23-函数模板，关于函数模板-描述错误的是（-）。"><a href="#23-函数模板，关于函数模板-描述错误的是（-）。" class="headerlink" title="23.函数模板，关于函数模板,描述错误的是（    ）。"></a>23.函数模板，关于函数模板,描述错误的是（    ）。</h2><ul><li>[x] 函数模板必须由程序员实例化为可执行的函数模板</li><li>[ ] 函数模板的实例化由编译器实现</li><li>[ ] 一个类定义中,只要有一个函数模板,则这个类是类模板</li><li>[ ] 类模板的成员函数都是函数模板,类模板实例化后,成员函数也随之实例化</li></ul><h6 id="注意：成员函数模板当编译器遇到程序中对函数模板的调用是，由编译器实例化为可执行的模板函数"><a href="#注意：成员函数模板当编译器遇到程序中对函数模板的调用是，由编译器实例化为可执行的模板函数" class="headerlink" title="注意：成员函数模板当编译器遇到程序中对函数模板的调用是，由编译器实例化为可执行的模板函数"></a>注意：成员函数模板当编译器遇到程序中对函数模板的调用是，由<em>编译器</em>实例化为可执行的模板函数</h6><h2 id="24-已知fun-int-是类Test的公有成员函数，p是指向成员函数fun-的指针，采用（D）是正确的"><a href="#24-已知fun-int-是类Test的公有成员函数，p是指向成员函数fun-的指针，采用（D）是正确的" class="headerlink" title="24.已知fun(int)是类Test的公有成员函数，p是指向成员函数fun()的指针，采用（D）是正确的:"></a>24.已知fun(int)是类Test的公有成员函数，p是指向成员函数fun()的指针，采用（D）是正确的:</h2><ul><li>[ ] p=fun;</li><li>[ ] p=Test::fun();</li><li>[ ] p=fun();</li><li>[x] <strong>p=Test::fun;</strong></li></ul><h6 id="注意：首先fun是类Text的成员函数，因此在使用时需要加上类名，否则当类外有同名的fun函数的时候，p将指向类外的fun函数。其次，fun的函数名代表的是2函数的首地址，用首地址赋值给指针变量是正确的。而B，是缺少实参的函数调用"><a href="#注意：首先fun是类Text的成员函数，因此在使用时需要加上类名，否则当类外有同名的fun函数的时候，p将指向类外的fun函数。其次，fun的函数名代表的是2函数的首地址，用首地址赋值给指针变量是正确的。而B，是缺少实参的函数调用" class="headerlink" title="注意：首先fun是类Text的成员函数，因此在使用时需要加上类名，否则当类外有同名的fun函数的时候，p将指向类外的fun函数。其次，fun的函数名代表的是2函数的首地址，用首地址赋值给指针变量是正确的。而B，是缺少实参的函数调用"></a>注意：首先fun是类Text的成员函数，因此在使用时需要加上类名，否则当类外有同名的fun函数的时候，p将指向类外的fun函数。其次，fun的函数名代表的是2函数的首地址，用首地址赋值给指针变量是正确的。而B，是缺少实参的函数调用</h6><h2 id="25-程序设计结果"><a href="#25-程序设计结果" class="headerlink" title="25.程序设计结果"></a>25.程序设计结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">num</span> &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;sa[] = &#123; &#123;<span class="number">2</span>,<span class="number">32</span>&#125;,&#123;<span class="number">8</span>,<span class="number">16</span>&#125;,&#123;<span class="number">4</span>,<span class="number">48</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">num</span>* p = sa + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">x = p-&gt;y / sa[<span class="number">0</span>].x * ++p-&gt;x;    <span class="comment">//先计算p-&gt;y=16  sa[0].x=2  所以p-&gt;y/sa[0].x=8  再计算++p-&gt;x 先算p-&gt;x=8再++就x=9 最后计算 8*++p-&gt;x为8*9=72</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x=&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;p-&gt;x=&quot;</span> &lt;&lt; p-&gt;x &lt;&lt; endl;  <span class="comment">//x=9  p-&gt;x=72</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="type">int</span> x=<span class="number">3</span>,y=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span>(x%<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:  <span class="keyword">switch</span> (y)</span><br><span class="line"> &#123;   <span class="keyword">case</span> <span class="number">0</span>:cout&lt;&lt;<span class="string">&quot;first\t&quot;</span>;   <span class="comment">//\t相当于键盘上的Tab键，通常宽度相当于8个空格的位置</span></span><br><span class="line">             <span class="keyword">case</span> <span class="number">1</span>:cout&lt;&lt;<span class="string">&quot;second\t&quot;</span>;<span class="keyword">break</span>; </span><br><span class="line"> <span class="keyword">default</span>: cout&lt;&lt;<span class="string">&quot;hellow\t&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:cout&lt;&lt;<span class="string">&quot;third\n&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//hellow        third</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-关于函数-lt-返回值类型-gt-下列表述错误的是：&quot;&gt;&lt;a href=&quot;#1-关于函数-lt-返回值类型-gt-下列表述错误的是：&quot; class=&quot;headerlink&quot; title=&quot;1.关于函数&amp;lt;返回值类型&amp;gt;,下列表述错误的是：&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>EXAM-NOTE-C++</title>
    <link href="https://pipi1002.github.io/2023/02/23/EXAM-NOTE-C++/"/>
    <id>https://pipi1002.github.io/2023/02/23/EXAM-NOTE-C++/</id>
    <published>2023-02-23T09:40:52.000Z</published>
    <updated>2023-05-12T08:55:47.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数分文件编写"><a href="#函数分文件编写" class="headerlink" title="函数分文件编写"></a>函数分文件编写</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建.h后缀名头文件</span><br><span class="line">创建.cpp后缀名源文件</span><br><span class="line">在头文件中写函数的声明</span><br><span class="line">在源文件中写函数的定义</span><br></pre></td></tr></table></figure><h5 id="指针在32位机器下-×86-通通占4个字节，不管是什么数据类型"><a href="#指针在32位机器下-×86-通通占4个字节，不管是什么数据类型" class="headerlink" title="指针在32位机器下(×86)通通占4个字节，不管是什么数据类型"></a>指针在32位机器下(×86)通通占4个字节，不管是什么数据类型</h5><h5 id="指针在64位机器下通通占8个字节，不管是什么数据类型"><a href="#指针在64位机器下通通占8个字节，不管是什么数据类型" class="headerlink" title="指针在64位机器下通通占8个字节，不管是什么数据类型"></a>指针在64位机器下通通占8个字节，不管是什么数据类型</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//指针所在内存空间</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p=&amp;a;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(int *)=&quot;</span><span class="built_in">sizeof</span>(<span class="type">int</span> *)&lt;&lt;endl;  <span class="comment">//4</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(float *)=&quot;</span><span class="built_in">sizeof</span>(<span class="type">float</span> *)&lt;&lt;endl;  <span class="comment">//4</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(double *)=&quot;</span><span class="built_in">sizeof</span>(<span class="type">double</span> *)&lt;&lt;endl; <span class="comment">//4</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(char *)=&quot;</span><span class="built_in">sizeof</span>(<span class="type">char</span> *)&lt;&lt;endl;  <span class="comment">//4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="空指针和野指针"><a href="#空指针和野指针" class="headerlink" title="空指针和野指针"></a>空指针和野指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空指针：指针变量指向内存中编号为0的空间</span></span><br><span class="line"><span class="comment">//用途：初始化指针变量</span></span><br><span class="line"><span class="comment">//注意：空指针指向的内存是不可以访问的（因为0~ 255的内存是系统占用的，如果访问会报错）</span></span><br><span class="line"><span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//如果*p=100;这样就会冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//野指针(获取访问权限冲突)</span></span><br><span class="line"><span class="comment">//*p=(int *)0×1100;</span></span><br></pre></td></tr></table></figure><p>总结：空指针和野指针都不是我们申请访问的空间，因此不要访问</p><h2 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h2><h5 id="1-const修饰指针——-常量指针-指针指向可以改，指针的指向值不可以改"><a href="#1-const修饰指针——-常量指针-指针指向可以改，指针的指向值不可以改" class="headerlink" title="1.const修饰指针——-常量指针     指针指向可以改，指针的指向值不可以改"></a>1.const修饰指针——-常量指针     指针指向可以改，指针的指向值不可以改</h5><h5 id="2-const修饰常量——-指针常量-指针指向不可以改，指针的指向值可以改-引用的本质在C-内部实现是一个指针常量-引用一旦初始化就不能发生改变，变成别的变量的别名-所有的指针操作都是编译器做的"><a href="#2-const修饰常量——-指针常量-指针指向不可以改，指针的指向值可以改-引用的本质在C-内部实现是一个指针常量-引用一旦初始化就不能发生改变，变成别的变量的别名-所有的指针操作都是编译器做的" class="headerlink" title="2.const修饰常量——-指针常量     指针指向不可以改，指针的指向值可以改  引用的本质在C++内部实现是一个指针常量(引用一旦初始化就不能发生改变，变成别的变量的别名)所有的指针操作都是编译器做的"></a>2.const修饰常量——-指针常量     指针指向不可以改，指针的指向值可以改  引用的本质在C++内部实现是一个指针常量(引用一旦初始化就不能发生改变，变成别的变量的别名)所有的指针操作都是编译器做的</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ref=<span class="number">100</span>;<span class="comment">//ref是引用，转换为*ref=100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref=&amp;a;指针常量是指针指向不可以改，也说明为什么引用不可以改</span></span><br><span class="line">    <span class="type">int</span>&amp; ref=a;</span><br><span class="line">    ref=<span class="number">20</span>;<span class="comment">//内部发现ref是引用，自动帮我们转换成:*ref=20;</span></span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ref:&quot;</span>&lt;&lt;ref&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fun</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-const既可以修饰指针也可以修饰常量-指针指向和指针的指向都不可以改"><a href="#3-const既可以修饰指针也可以修饰常量-指针指向和指针的指向都不可以改" class="headerlink" title="3.const既可以修饰指针也可以修饰常量    指针指向和指针的指向都不可以改"></a>3.const既可以修饰指针也可以修饰常量    指针指向和指针的指向都不可以改</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p=&amp;a;</span><br><span class="line">*p=<span class="number">20</span>;  <span class="comment">//错误</span></span><br><span class="line">p=&amp;b;  <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针常量</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p=&amp;a;</span><br><span class="line">*p=<span class="number">20</span>;  <span class="comment">//正确</span></span><br><span class="line">p=&amp;b;  <span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p=&amp;a;</span><br><span class="line">*p=<span class="number">20</span>;  <span class="comment">//错误</span></span><br><span class="line">p=&amp;b;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="结构体中const的使用场景-const用来防止误操作"><a href="#结构体中const的使用场景-const用来防止误操作" class="headerlink" title="结构体中const的使用场景(const用来防止误操作)"></a>结构体中const的使用场景(const用来防止误操作)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//分数</span></span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将函数中的形参改为指针，可以减少内存空间，而且不会复制新的副本出来,但是只要在自定义函数中不小心误操作导致s变量的值更改的话，外部结构体变量信息也会更改，所以可以在形参前加一个const，这时候如果再更改结构体的数据时就会提示错误</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(<span class="type">const</span> student *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//s-&gt;age=150;</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;姓名&quot;</span>&lt;&lt;s.name&lt;&lt;<span class="string">&quot;年龄&quot;</span>&lt;&lt;s.age&lt;&lt;s.age&lt;&lt;<span class="string">&quot;得分：&quot;</span>&lt;&lt;s.score&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void printStudent(student s)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;&quot;姓名&quot;&lt;&lt;s.name&lt;&lt;&quot;年龄&quot;&lt;&lt;s.age&lt;&lt;s.age&lt;&lt;&quot;得分：&quot;&lt;&lt;s.score&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建结构体变量</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> s=&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">15</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    <span class="comment">//通过函数打印结构体变量的信息</span></span><br><span class="line">    <span class="comment">// printStudents(s);</span></span><br><span class="line">    <span class="built_in">printStudents</span>(&amp;s);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;main中张三的年龄为&quot;</span>&lt;&lt;s.age&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常量引用：使用场景是-用来修饰形参，防止误操作"><a href="#常量引用：使用场景是-用来修饰形参，防止误操作" class="headerlink" title="常量引用：使用场景是 用来修饰形参，防止误操作"></a>常量引用：使用场景是 用来修饰形参，防止误操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//val=1000;//在形参上加上const就可以防止误操作，这时修改引用的别名就会报错:表达式必须是可以修改的左值</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;val=&quot;</span>&lt;&lt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// int &amp;ref=10;//引用必须引一块合法的内存空间，这样的写法是错误的，要么引用栈上的内存空间要么引用堆上的内存空间，而10存放在常量池中</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加上const之后 编译器将代码修改 int temp=10;const int &amp; ref=temp;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;ref=<span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a=<span class="number">100</span>;<span class="comment">//打印a的值</span></span><br><span class="line">    <span class="built_in">showValue</span>(a);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h2><ul><li><p>代码区：存放函数体的二进制代码，由操作系统进行管理（共享和只读）</p></li><li><p>全局区：存放全局变量和静态变量以及常量（字符串常量和其他常量，const修饰的变量）（这个区域的数据在程序结束后由操作系统释放）</p><ul><li><p>const修饰的全局变量 int c_g_a=10    //c-const   g-global   </p></li><li><p>const修饰的局部变量int  c_l_b=10     //c-const   l-local   </p><ul><li><h6 id="注意：const修饰局部变量是和局部变量放在一起；而const修饰的全局变量，我们称之为全局常量，在全局区内存放"><a href="#注意：const修饰局部变量是和局部变量放在一起；而const修饰的全局变量，我们称之为全局常量，在全局区内存放" class="headerlink" title="注意：const修饰局部变量是和局部变量放在一起；而const修饰的全局变量，我们称之为全局常量，在全局区内存放"></a>注意：const修饰局部变量是和局部变量放在一起；而const修饰的全局变量，我们称之为全局常量，在全局区内存放</h6></li></ul></li></ul></li><li><p>栈区：由编译器自动分配释放，存放函数的函数值，局部变量等</p></li><li><p>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统自动回收</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//利用new关键字  可以将数据开辟到堆区</span></span><br><span class="line">    <span class="comment">//指针 本质也是局部变量，放在栈上（堆区的地址编号用栈上的指针保存），指针保存的数据是放在堆区</span></span><br><span class="line">    <span class="type">int</span> *p=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);<span class="comment">//本质是把堆区存放的地址返回给你，利用new创建的数据会返回该数据所对应的类型的指针</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在堆区开辟数据</span></span><br><span class="line">    <span class="type">int</span> *p=<span class="built_in">func</span>();</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.new的基本语法</span></span><br><span class="line"><span class="function"><span class="type">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在堆区创建整形数据</span></span><br><span class="line">    <span class="comment">//new返回的是 该数据类型的指针</span></span><br><span class="line">    <span class="type">int</span> *p=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p=<span class="built_in">func</span>();</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//堆区的数据由程序员管理开辟，由程序员管理释放</span></span><br><span class="line">    <span class="comment">//如果想释放堆区的数据，利用关键字delete</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2，在堆区利用new开辟一个数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建10整形数据的数据，在堆区</span></span><br><span class="line">    <span class="type">int</span> * arr=<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//返回一个首元素地址</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i]=i+<span class="number">100</span>;<span class="comment">//给10个元素赋值 100~109</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;arr[i]&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放堆区数组 要加[]才可以</span></span><br><span class="line">    <span class="keyword">delete</span>[]arr;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意：代码区和全局区都是程序在运行前的一个区域（C-中在程序运行前分为全局区和代码区），在程序运行后才会有栈区和堆区"><a href="#注意：代码区和全局区都是程序在运行前的一个区域（C-中在程序运行前分为全局区和代码区），在程序运行后才会有栈区和堆区" class="headerlink" title="注意：代码区和全局区都是程序在运行前的一个区域（C++中在程序运行前分为全局区和代码区），在程序运行后才会有栈区和堆区"></a>注意：代码区和全局区都是程序在运行前的一个区域（C++中在程序运行前分为全局区和代码区），在程序运行后才会有栈区和堆区</h4><h2 id="引用-给变量起别名"><a href="#引用-给变量起别名" class="headerlink" title="引用(给变量起别名)"></a>引用(给变量起别名)</h2><h3 id="数据类型-amp-别名-原名"><a href="#数据类型-amp-别名-原名" class="headerlink" title="数据类型 &amp;别名=原名"></a>数据类型 &amp;别名=原名</h3><h5 id="引用的注意事项："><a href="#引用的注意事项：" class="headerlink" title="引用的注意事项："></a>引用的注意事项：</h5><p>1.引用必须要初始化</p><p>2.引用一旦初始化就不可以更改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//int &amp;b;  //错误的</span></span><br><span class="line">    <span class="type">int</span> &amp;b=a;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> c=<span class="number">20</span>;</span><br><span class="line">    b=c;<span class="comment">//赋值操作而不是更改引用</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;c=&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用做参数函数"><a href="#引用做参数函数" class="headerlink" title="引用做参数函数"></a>引用做参数函数</h3><h5 id="作用：函数传参时，可以利用引用的技术让形参修饰实参"><a href="#作用：函数传参时，可以利用引用的技术让形参修饰实参" class="headerlink" title="作用：函数传参时，可以利用引用的技术让形参修饰实参"></a>作用：函数传参时，可以利用引用的技术让形参修饰实参</h5><h5 id="优点：可以简化指针修改实参"><a href="#优点：可以简化指针修改实参" class="headerlink" title="优点：可以简化指针修改实参"></a>优点：可以简化指针修改实参</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap01</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;  <span class="comment">//值传递中形参确实发生改变，但实参没有发生改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap02</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=temp;  <span class="comment">//址传递中形参和实参都发生改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap03</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;  <span class="comment">//引用传递中形参和实参都发生改变</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">   <span class="comment">// mySwap01(a,b);  //值传递</span></span><br><span class="line">   <span class="comment">// mySwap02(&amp;a,&amp;b);  //址传递</span></span><br><span class="line">   <span class="comment">// mySwap03(a,b);  //引用传递</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;  <span class="comment">// 值传递：10    地址传递： 20    引用传递： 20</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;  <span class="comment">//值传递：20    地址传递： 10   引用传递： 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用做函数返回值"><a href="#引用做函数返回值" class="headerlink" title="引用做函数返回值"></a>引用做函数返回值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不要返回局部变量的引用</span></span><br><span class="line"><span class="comment">//函数的调用可以作为左值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;<span class="comment">//局部变量存放在四区中的栈区</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">static</span> <span class="type">int</span> a=<span class="number">10</span>;<span class="comment">//静态变量存储在全局区，全局区上的数据在程序结束后系统释放，而不是在text02运行完就失效</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//  int &amp;ref=text01();</span></span><br><span class="line">  <span class="comment">//  cout&lt;&lt;&quot;ref=&quot;&lt;&lt;ref&lt;&lt;endl;//ref=10   第一次结果正确，因为编译器做了保留</span></span><br><span class="line">  <span class="comment">//  cout&lt;&lt;&quot;ref=&quot;&lt;&lt;ref&lt;&lt;endl;//ref=260398  第二次结果错误，因为a的内存已经释放</span></span><br><span class="line">    <span class="comment">//所以不要返回局部变量的引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> &amp;ref=<span class="built_in">text02</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ref=&quot;</span>&lt;&lt;ref&lt;&lt;endl;  <span class="comment">//ref=10</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ref=&quot;</span>&lt;&lt;ref&lt;&lt;endl;  <span class="comment">//ref=10</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ref=&quot;</span>&lt;&lt;ref&lt;&lt;endl;  <span class="comment">//ref=10</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">text02</span>()=<span class="number">1000</span>;<span class="comment">//如果函数的返回值是引用，这个函数调用可以作为左值</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ref=&quot;</span>&lt;&lt;ref&lt;&lt;endl;  <span class="comment">//ref=1000</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ref=&quot;</span>&lt;&lt;ref&lt;&lt;endl;  <span class="comment">//ref=1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><h6 id="语法：返回值类型-函数名-形参-默认值"><a href="#语法：返回值类型-函数名-形参-默认值" class="headerlink" title="语法：返回值类型 函数名(形参=默认值){}"></a>语法：返回值类型 函数名(形参=默认值){}</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">20</span>,<span class="type">int</span> c=<span class="number">30</span>)</span><span class="comment">//写了一个b和c的默认值，当没有给参数默认值时，形参和实参的数量要一样，当有默认值就不需要相同数量的形参和实参了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">func</span>(<span class="number">10</span>)&lt;&lt;endl;  <span class="comment">//60</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">func</span>(<span class="number">10</span>,<span class="number">30</span>)&lt;&lt;endl;  <span class="comment">//70  如果这个值我传了就用我传的值，如果我没传就用默认值</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注意事项：1-如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值-例如：-int-func2-int-a-int-b-10-int-c-20-int-d-30"><a href="#注意事项：1-如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值-例如：-int-func2-int-a-int-b-10-int-c-20-int-d-30" class="headerlink" title="注意事项：1.如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值  例如： int func2(int a,int b=10,int c=20,int d=30)"></a>注意事项：1.如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值  例如： int func2(int a,int b=10,int c=20,int d=30)</h6><h6 id="2-如果函数的声明有默认参数，那么函数实现就不能有默认参数-声明和实现只能有一个有默认参数"><a href="#2-如果函数的声明有默认参数，那么函数实现就不能有默认参数-声明和实现只能有一个有默认参数" class="headerlink" title="2.如果函数的声明有默认参数，那么函数实现就不能有默认参数(声明和实现只能有一个有默认参数)"></a>2.如果函数的声明有默认参数，那么函数实现就不能有默认参数(声明和实现只能有一个有默认参数)</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func3</span><span class="params">(<span class="type">int</span> a=<span class="number">10</span>,<span class="type">int</span> b=<span class="number">10</span>)</span></span>;<span class="comment">//函数的声明</span></span><br><span class="line"><span class="comment">//  int func3(int a=10,int b=10) //函数的实现，因为此时函数的声明有默认参数，那么函数实现就不能有默认参数，不然就会报错:重定义了默认参数，   即使声明和实现传的默认参数一样   这个情况在C++中称之为&quot;二异性&quot;</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//      return a+b;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h3><h6 id="语法：返回值类型-函数名-数据类型-小括号中只有一个数据类型，没有参数"><a href="#语法：返回值类型-函数名-数据类型-小括号中只有一个数据类型，没有参数" class="headerlink" title="语法：返回值类型 函数名 (数据类型){}   //小括号中只有一个数据类型，没有参数"></a>语法：返回值类型 函数名 (数据类型){}   //小括号中只有一个数据类型，没有参数</h6><h6 id="C-中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置"><a href="#C-中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置" class="headerlink" title="C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置"></a>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>)</span><span class="comment">//占位参数还可以有默认参数  void func(int a,int =10)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is func&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>，<span class="number">10</span>);  <span class="comment">//第二个10是没有办法传到func函数中</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="目前阶段占位函数用不到"><a href="#目前阶段占位函数用不到" class="headerlink" title="目前阶段占位函数用不到"></a>目前阶段占位函数用不到</h6><h2 id="函数重载（函数名可以相同）（析构函数没有参数-因此它不能被重载。一个类可以有多个构造函数-但是只能有一个析构函数）"><a href="#函数重载（函数名可以相同）（析构函数没有参数-因此它不能被重载。一个类可以有多个构造函数-但是只能有一个析构函数）" class="headerlink" title="函数重载（函数名可以相同）（析构函数没有参数,因此它不能被重载。一个类可以有多个构造函数,但是只能有一个析构函数）"></a>函数重载（函数名可以相同）（析构函数没有参数,因此它不能被重载。一个类可以有多个构造函数,但是只能有一个析构函数）</h2><h6 id="作用：函数名可以相同，提高复用性"><a href="#作用：函数名可以相同，提高复用性" class="headerlink" title="作用：函数名可以相同，提高复用性"></a>作用：函数名可以相同，提高复用性</h6><h4 id="函数重载满足条件："><a href="#函数重载满足条件：" class="headerlink" title="函数重载满足条件："></a>函数重载满足条件：</h4><ul><li>同一个作用域下（全局作用域）</li><li>函数名称相同</li><li>函数参数类型不同   或者   个数不同    或者   顺序不同</li></ul><h5 id="注意-函数的返回值不可以作为函数重载的条件-无法重载仅仅按返回类型区分的函数"><a href="#注意-函数的返回值不可以作为函数重载的条件-无法重载仅仅按返回类型区分的函数" class="headerlink" title="注意:函数的返回值不可以作为函数重载的条件(无法重载仅仅按返回类型区分的函数)"></a>注意:函数的返回值不可以作为函数重载的条件(无法重载仅仅按返回类型区分的函数)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func的调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span>  <span class="comment">//1和2函数类型的个数不同</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func(int a)的调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span>  <span class="comment">//2和3函数函数参数类型不同</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func(double a)的调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b)</span>  <span class="comment">//4和5函数参数顺序不同</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func(int a,double b)的调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(double a,int b)的调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//  void func(double a,int b)   //无法重载仅仅按返回类型区分的函数)</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//      cout&lt;&lt;&quot;(double a,int b)的调用&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//func();  //func(int a)的调用</span></span><br><span class="line">    <span class="comment">//func(10);</span></span><br><span class="line">    <span class="comment">//func(2.12);</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">2.12</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载注意事项"><a href="#函数重载注意事项" class="headerlink" title="函数重载注意事项"></a>函数重载注意事项</h3><h4 id="1-引用作为重载条件"><a href="#1-引用作为重载条件" class="headerlink" title="1.引用作为重载条件"></a>1.引用作为重载条件</h4><h4 id="2-函数重载遇到默认参数"><a href="#2-函数重载遇到默认参数" class="headerlink" title="2.函数重载遇到默认参数"></a>2.函数重载遇到默认参数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引用作为重载条件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span>  <span class="comment">//1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func(int &amp;a)调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span>  <span class="comment">//2        //1和2的形参类型不一样，可以发生函数重载</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func(const int &amp;a)调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;   </span><br><span class="line">    <span class="built_in">func</span>(a); <span class="comment">//代码调用函数结果是调用1，没有加const  原因是变量a(变量的意思是可读，可写，可修饰);而加了const就是为了限制a的只读状态，只能读，不能写，所以调用1   </span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>); <span class="comment">//这时候就会调用2    const int &amp;a=10;  计算机的优化功能</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.函数重载遇到默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>  <span class="comment">//1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2(int a,int b)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a)</span>  <span class="comment">//2</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2(int a)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// func2(10);  //这时候就会出错因为1和2都会被调用当函数重载碰到默认参数，出现二义性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数语法：类名"><a href="#构造函数语法：类名" class="headerlink" title="构造函数语法：类名(){}"></a>构造函数语法：类名(){}</h2><ul><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数有参数，因此可以发生重载</li><li>程序在调用对象时会自动调用构造，无需手动调用，而且只会调用一次</li></ul><h3 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h3><h4 id="两种分类方式："><a href="#两种分类方式：" class="headerlink" title="两种分类方式："></a>两种分类方式：</h4><p>​            按参数分为：有参构造和无参构造（默认构造）</p><p>​            按类型分为：普通构造和拷贝构造</p><h4 id="三种调用方式："><a href="#三种调用方式：" class="headerlink" title="三种调用方式："></a>三种调用方式：</h4><h6 id="1-括号法："><a href="#1-括号法：" class="headerlink" title="1.括号法："></a>1.括号法：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p1;<span class="comment">//默认构造函数调用</span></span><br><span class="line"><span class="comment">//注意1：调用默认构造函数时候，不要加(),因为下面这行代码，编译器会认为是一个函数的声明，不会认为在创建对象</span></span><br><span class="line"><span class="comment">//Person p1();</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//有参构造函数</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><h6 id="2-显示法："><a href="#2-显示法：" class="headerlink" title="2.显示法："></a>2.显示法：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person p1;</span><br><span class="line">Person p2=<span class="built_in">Person</span>(<span class="number">10</span>);<span class="comment">//有参构造</span></span><br><span class="line">Person p3=<span class="built_in">Person</span>(p2);<span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="number">10</span>);<span class="comment">//匿名对象 特点：当前执行结束后，系统会立即回收掉匿名对象</span></span><br><span class="line"><span class="comment">//注意2：不要利用拷贝构造函数初始化匿名对象 编译器会认为 Person(p3)==Person p3;</span></span><br><span class="line"><span class="comment">//Person(p3);</span></span><br></pre></td></tr></table></figure><h6 id="3-隐式转换法："><a href="#3-隐式转换法：" class="headerlink" title="3.隐式转换法："></a>3.隐式转换法：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p4=<span class="number">10</span>;<span class="comment">//相当于 写了 Person p4=Person(10);  有参构造</span></span><br><span class="line">Person p5=p4;<span class="comment">//拷贝构造</span></span><br></pre></td></tr></table></figure><h4 id="C-中拷贝构造函数调用时机通常有三种："><a href="#C-中拷贝构造函数调用时机通常有三种：" class="headerlink" title="C++中拷贝构造函数调用时机通常有三种："></a>C++中拷贝构造函数调用时机通常有三种：</h4><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person默认构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person有参函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">        m_age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person拷贝构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">        m_age=p.m_age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p2的年龄为： &quot;</span>&lt;&lt;p2.m_age&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.对象以值传递的方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dowork</span><span class="params">(Person p)</span><span class="comment">//相当于传递一个副本，需要调用拷贝构造函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="built_in">dowork</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.对象以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">dowork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;<span class="comment">//因为局部变量的特点作用域只在这个大括号中，所以返回局部变量时会产生一个副本代替局部变量返回到主函数</span></span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>*)&amp;p1&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p=<span class="built_in">dowork2</span>();</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>*)&amp;p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="comment">/* Person有参函数调用</span></span><br><span class="line"><span class="comment">       Person拷贝构造函数调用</span></span><br><span class="line"><span class="comment">       p2的年龄为：20</span></span><br><span class="line"><span class="comment">       Person析构函数调用</span></span><br><span class="line"><span class="comment">       Person析构函数调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">    <span class="comment">/*Person默认构造函数调用</span></span><br><span class="line"><span class="comment">      Person拷贝构造函数调用</span></span><br><span class="line"><span class="comment">      Person析构函数调用</span></span><br><span class="line"><span class="comment">      Person析构函数调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">text03</span>();</span><br><span class="line">    <span class="comment">/*Person默认构造函数调用</span></span><br><span class="line"><span class="comment">      010FF94</span></span><br><span class="line"><span class="comment">      Person拷贝构造函数调用</span></span><br><span class="line"><span class="comment">      Person析构函数调用</span></span><br><span class="line"><span class="comment">      010FF98C</span></span><br><span class="line"><span class="comment">      Person析构函数调用</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>(1)在使用对象赋值语句进行对象赋值时，两个对象的类型必须相同，如对象的类型不同，编译时将出错。<br>  （2）两个对象之间的赋值,仅仅是对其中的数据成员赋值,而不对成员函数赋值。<br>  （3）数据成员是占存储空间的,不同对象的数据成员占有不同的存储空间,而不同对象的成员函数是占有同一个函数代码段,无法对它们赋值。</p><h2 id="析构函数语法：-类名"><a href="#析构函数语法：-类名" class="headerlink" title="析构函数语法：~类名(){}"></a>析构函数语法：~类名(){}</h2><ul><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同，在名称前加上符号~</li><li>析构函数不可以有参数，因此不能发生重载</li><li>程序在对象销毁前会自动调用析构，无需手动调用且只会调用一次</li><li><p>在以下情况, 当对象的生命周期结束时，析构函数会被自动调用:</p><p>  ① 如果定义了一个全局对象，则在程序流程离开其作用域时（如main函数结束或调用exit函数）时，调用该全局对象的析构函数。  </p><p>  ② 如果一个对象被定义在一个函数体内,则当这个函数结束时,该对象的析构函数被自动调用。</p><p>  ③ 若一个对象是使用new运算符动态创建的,在使用delete运算符释放它时,delete会自动调用析构函数。 </p></li></ul><h2 id="默认情况下，C-编译器至少给一个类添加三个函数"><a href="#默认情况下，C-编译器至少给一个类添加三个函数" class="headerlink" title="默认情况下，C++编译器至少给一个类添加三个函数"></a>默认情况下，C++编译器至少给一个类添加三个函数</h2><ul><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝 </li></ul><h4 id="1-构造函数的调用规则（上3）"><a href="#1-构造函数的调用规则（上3）" class="headerlink" title="1.构造函数的调用规则（上3）"></a>1.构造函数的调用规则（上3）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()  <span class="comment">//1</span></span><br><span class="line">   &#123;</span><br><span class="line">       cout&lt;&lt;<span class="string">&quot;Person的默认构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)  <span class="comment">//2</span></span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;Person的有参构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">      m_age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)  <span class="comment">//3</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person的拷贝构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">        m_age=p.m_age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-如果我们写了有参构造函数，编译器就不会再提供默认构造，依然提供拷贝构造-如果我们写了拷贝构造函数，编译器就不提供其他构造函数"><a href="#2-如果我们写了有参构造函数，编译器就不会再提供默认构造，依然提供拷贝构造-如果我们写了拷贝构造函数，编译器就不提供其他构造函数" class="headerlink" title="2.如果我们写了有参构造函数，编译器就不会再提供默认构造，依然提供拷贝构造     如果我们写了拷贝构造函数，编译器就不提供其他构造函数"></a>2.如果我们写了有参构造函数，编译器就不会再提供默认构造，依然提供拷贝构造     如果我们写了拷贝构造函数，编译器就不提供其他构造函数</h4><h2 id="深拷贝和浅拷贝问题"><a href="#深拷贝和浅拷贝问题" class="headerlink" title="深拷贝和浅拷贝问题"></a>深拷贝和浅拷贝问题</h2><h4 id="浅拷贝：简单的赋值拷贝操作-带来的问题是内存会重复释放-，如果利用编译器提供的拷贝构造函数，就会进行浅拷贝工作"><a href="#浅拷贝：简单的赋值拷贝操作-带来的问题是内存会重复释放-，如果利用编译器提供的拷贝构造函数，就会进行浅拷贝工作" class="headerlink" title="浅拷贝：简单的赋值拷贝操作(带来的问题是内存会重复释放)，如果利用编译器提供的拷贝构造函数，就会进行浅拷贝工作"></a>浅拷贝：简单的赋值拷贝操作(带来的问题是内存会重复释放)，如果利用编译器提供的拷贝构造函数，就会进行浅拷贝工作</h4><h4 id="深拷贝：在堆区重新申请空间，进行拷贝操作"><a href="#深拷贝：在堆区重新申请空间，进行拷贝操作" class="headerlink" title="深拷贝：在堆区重新申请空间，进行拷贝操作"></a>深拷贝：在堆区重新申请空间，进行拷贝操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person的默认构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age,<span class="type">int</span> height)</span><br><span class="line">    &#123;</span><br><span class="line">        m_age=age;</span><br><span class="line">        m_Height=<span class="keyword">new</span> <span class="built_in">int</span>(height);<span class="comment">//利用new把数据创建在堆区，返回的数据是int*</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person的有参构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自己实现拷贝构造函数，解决浅拷贝带来的问题</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person拷贝构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">        m_age=age;</span><br><span class="line">        <span class="comment">//m_Height=p.m_Height;  编译器默认就是实现这一行代码(浅拷贝)</span></span><br><span class="line">        <span class="comment">//深拷贝操作</span></span><br><span class="line">        </span><br><span class="line">        m_Height=<span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Height);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//析构代码，将堆区开辟数据做释放操作</span></span><br><span class="line">        <span class="keyword">if</span>(m_Height!=<span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_Height;</span><br><span class="line">            m_Height=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="type">int</span> *m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span><span class="comment">//先进后出原则，p1后调用析构函数，后释放内存，p2先释放</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="number">160</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p1的年龄为：&quot;</span>&lt;&lt;p1.m_age&lt;&lt;<span class="string">&quot;身高为：&quot;</span>&lt;&lt;*p1.m_Height&lt;&lt;endl;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p2的年龄为：&quot;</span>&lt;&lt;p2.m_age&lt;&lt;<span class="string">&quot;身高为：&quot;</span>&lt;&lt;*p2.m_Height&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题"><a href="#注意：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题" class="headerlink" title="注意：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题"></a>注意：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</h4><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/308b631d9cd744ac84fde08b0e7cb024.png" alt="308b631d9cd744ac84fde08b0e7cb024"></p><h2 id="初始化列表赋初值"><a href="#初始化列表赋初值" class="headerlink" title="初始化列表赋初值"></a>初始化列表赋初值</h2><h4 id="语法：构造函数-属性1-值1-属性2-值2-属性3-值3-…"><a href="#语法：构造函数-属性1-值1-属性2-值2-属性3-值3-…" class="headerlink" title="语法：构造函数():属性1(值1):属性2(值2):属性3(值3)…{}"></a>语法：构造函数():属性1(值1):属性2(值2):属性3(值3)…{}</h4><h2 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone</span>(string pName)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Phone的构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">        m_PName=pName;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Phone的析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    string m_PName;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//m_Phone=pName 隐式转换法</span></span><br><span class="line">    <span class="built_in">Person</span>(string name,string pName):<span class="built_in">m_Name</span>(name),<span class="built_in">m_Phone</span>(pName)<span class="comment">//初始化列表的方式赋初值</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person的构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person的析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="comment">//手机</span></span><br><span class="line">    Phone m_Phone;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当其他类对象(集合)作为本类成员(成员变量和成员函数)，构造时候先构造类对象，再构造自身，析构函数的调用和构造函数的调用相反</span></span><br><span class="line"><span class="type">void</span> text01</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;苹果MAX&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;p.m_Name&lt;&lt;<span class="string">&quot;拿着:&quot;</span>&lt;&lt;p.m_Phone.m_PName&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    text01;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="静态成员-static"><a href="#静态成员-static" class="headerlink" title="静态成员(static)"></a>静态成员(static)</h2><ul><li>静态成员变量<ul><li>所有对象共享一份数据</li><li>在编译阶段分配内存（全局区）</li><li>类内声明，类外初始化（必须有初始值）</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;<span class="comment">//类内声明</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化</span></span><br><span class="line"><span class="type">int</span> Person::m_A=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> Person::m_B=<span class="number">200</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    cout&lt;&lt;p.m_A&lt;&lt;endl;</span><br><span class="line">    Person p2;</span><br><span class="line">    p2.m_A=<span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;p.m_A&lt;&lt;endl;<span class="comment">//200  说明所有对象共享一份数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//静态成员变量不属于某个对象上，所有对象都共享同一份数据</span></span><br><span class="line">    <span class="comment">//因此静态成员变量有两种访问方式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1，通过对象进行方式</span></span><br><span class="line">    Person p;</span><br><span class="line">    cout&lt;&lt;p.m_A&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2，通过类名进行访问  Perxon作用域下的m_A</span></span><br><span class="line">    cout&lt;&lt;Person::m_A&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;Person::m_A&lt;&lt;endl;<span class="comment">//会报错，私有同样不可以访问静态成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态成员函数<ul><li>所有对象共享一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//静态成员函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_A=<span class="number">100</span>;<span class="comment">//静态成员函数可以访问静态成员变量</span></span><br><span class="line">        <span class="comment">//m_B=200;   静态成员函数不能访问非静态成员变量  无法区分到底是哪个对象的m_B</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;static void func调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;<span class="comment">//静态成员变量</span></span><br><span class="line">    <span class="type">int</span> m_B;<span class="comment">//非静态成员变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态成员函数也有访问权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;static func2()的访问调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//有两种访问方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.通过对象访问</span></span><br><span class="line">    Person p;</span><br><span class="line">    p.<span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">//2.通过类名访问，因为静态成员函数不属于某个对象，大家共享这个静态函数</span></span><br><span class="line">    Person::<span class="built_in">func</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Person::func2();  会报错因为类外不可以访问私有静态成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-对象模型"><a href="#C-对象模型" class="headerlink" title="C++对象模型"></a>C++对象模型</h2><h3 id="成员变量和成员函数分开存储（只有非静态成员变量才属于类的对象上，非静态成员函数；静态成员变量；静态成员函数都是分开存储，不在类的对象上）"><a href="#成员变量和成员函数分开存储（只有非静态成员变量才属于类的对象上，非静态成员函数；静态成员变量；静态成员函数都是分开存储，不在类的对象上）" class="headerlink" title="成员变量和成员函数分开存储（只有非静态成员变量才属于类的对象上，非静态成员函数；静态成员变量；静态成员函数都是分开存储，不在类的对象上）"></a>成员变量和成员函数分开存储（只有非静态成员变量才属于类的对象上，非静态成员函数；静态成员变量；静态成员函数都是分开存储，不在类的对象上）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m_A;<span class="comment">//非静态成员变量 4 也侧面验证了非静态成员变量，属于类的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_B;<span class="comment">//静态成员变量 4 加上静态成员变量 类的对象所占内存还是4，侧面验证了静态成员变量不属于类对象上</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//非静态成员函数 4 不属于类对象上</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//4 静态成员函数 不属于类的对象上</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_B=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">//空对象占用内存空间为：  1个字节</span></span><br><span class="line">    <span class="comment">//C++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置</span></span><br><span class="line">    <span class="comment">//每个空对象也应该有一个独一无二的内存地址</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size of p=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span><span class="comment">//当有一个非静态成员变量时 类的对象所占内存空间为：</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size of p=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p)&lt;&lt;endl;  <span class="comment">//4</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this指针概念（不同对象的数据成员存放在不同的内存地址，所有对象的成员函数对应的是同一个函数代码段）"><a href="#this指针概念（不同对象的数据成员存放在不同的内存地址，所有对象的成员函数对应的是同一个函数代码段）" class="headerlink" title="this指针概念（不同对象的数据成员存放在不同的内存地址，所有对象的成员函数对应的是同一个函数代码段）"></a>this指针概念（不同对象的数据成员存放在不同的内存地址，所有对象的成员函数对应的是同一个函数代码段）</h3><p><code>this指针的本质是指针常量 指针的指向是不可以修改的 但是指向的值是可以修改的</code></p><h5 id="每个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码，那这一块代码是如何区分是哪个对象调用自己呢？当一个对象要调用成员函数时，this指针中就装着该对象的地址-成员函数就根据这个指针-找到相应的数据-然而进行相应的操作。"><a href="#每个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码，那这一块代码是如何区分是哪个对象调用自己呢？当一个对象要调用成员函数时，this指针中就装着该对象的地址-成员函数就根据这个指针-找到相应的数据-然而进行相应的操作。" class="headerlink" title="每个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码，那这一块代码是如何区分是哪个对象调用自己呢？当一个对象要调用成员函数时，this指针中就装着该对象的地址, 成员函数就根据这个指针,找到相应的数据,然而进行相应的操作。"></a>每个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码，那这一块代码是如何区分是哪个对象调用自己呢？<code>当一个对象要调用成员函数时，this指针中就装着该对象的地址, 成员函数就根据这个指针,找到相应的数据,然而进行相应的操作。</code></h5><h5 id="C-通过提供特殊的对象指针，this指针，解决上述问题，this指针指向被调用的成员函数所属的对象-this指针是隐含在每一个非静态成员函数的一种指针，不需要定义直接使用即可"><a href="#C-通过提供特殊的对象指针，this指针，解决上述问题，this指针指向被调用的成员函数所属的对象-this指针是隐含在每一个非静态成员函数的一种指针，不需要定义直接使用即可" class="headerlink" title="C++通过提供特殊的对象指针，this指针，解决上述问题，this指针指向被调用的成员函数所属的对象  this指针是隐含在每一个非静态成员函数的一种指针，不需要定义直接使用即可"></a>C++通过提供特殊的对象指针，this指针，解决上述问题，<code>this指针指向被调用的成员函数所属的对象  this指针是隐含在每一个非静态成员函数的一种指针，不需要定义直接使用即可</code></h5><ul><li>解决名称冲突</li><li>返回对象本身用*this</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//this-&gt;age=age;  this指针指向的是被调用的成员函数所属的对象，这里this指向p1</span></span><br><span class="line">        age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Person&amp; <span class="title">PersonAddAge</span><span class="params">(Person &amp;p)</span>  <span class="comment">//返回p2本体用引用方式返回，会一直返回p2，但是如果用值的方式返回就会一直调用赋值构造函数，返回的值就不是p2</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age+=p.age;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this指向p2指针，*this指向的是p2本体</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.解决名称冲突</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p1的年龄为 &quot;</span>&lt;&lt;p1.age&lt;&lt;endl; <span class="comment">//26328629 乱码出错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.返回对象本身用*this</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">   <span class="comment">// p2.PersonAddAge(p1);</span></span><br><span class="line">   <span class="comment">// cout&lt;&lt;&quot;p2的年龄为 &quot;&lt;&lt;p2.age&lt;&lt;endl;//20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//链式编程思想</span></span><br><span class="line">    p2.<span class="built_in">PersonAddAge</span>(p1).<span class="built_in">PersonAddAge</span>(p1).<span class="built_in">PersonAddAge</span>(p1);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p2的年龄为 &quot;</span>&lt;&lt;p2.age&lt;&lt;endl; <span class="comment">//40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    text01;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;this is Person class&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPersonAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//报错原因是因为传入指针为空，无中生有</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;age=&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;m_Age&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//提高指针健壮性</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person *p=<span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;<span class="built_in">showClassName</span>();</span><br><span class="line">  <span class="comment">//  p-&gt;showPersonAge(); //读取访问权限冲突</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const修饰成员函数-常函数"><a href="#const修饰成员函数-常函数" class="headerlink" title="const修饰成员函数(常函数)"></a>const修饰成员函数(常函数)</h2><h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><ul><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><h3 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h3><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常含数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span> <span class="type">const</span>  <span class="comment">//如果在成员函数形参列表后加const，其本质相当于const Person *const this，这个时候不仅指针指向不可以改，其指针指向的值也不可以修改</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//this-&gt;m_A=100; </span></span><br><span class="line">        <span class="comment">//this=NULL; //this指针不可以修改指针的指向的</span></span><br><span class="line">        <span class="comment">//this指针的本质是指针常量，指针指向不可以修改，但是指针指向的值可以修改，其本质是Person * const this;</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">this</span>-&gt;m_B=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> m_B;<span class="comment">//特殊变量，即使在常含数中，也可以修改这个值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> Person p;<span class="comment">//对象前加const，变为常对象</span></span><br><span class="line">    <span class="comment">//p.m_A=100;//不允许修改 不允许更改常对象的数据成员  不允许常对象调用普通的成员函数      </span></span><br><span class="line">    p.m_B=<span class="number">200</span>;<span class="comment">//允许修改</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//常对象只能调用常含数</span></span><br><span class="line">    p.<span class="built_in">showPerson</span>();</span><br><span class="line">    <span class="comment">//p.func();//会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>    <span class="comment">//如果在一个类中说明了常数据成员,那么构造函数就只能通过初始化列表对该数据成员进行初始化,而不能采用在函数中直接赋值的方法。</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> year; </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> month; </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> day;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Date</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d); </span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">showDate</span><span class="params">()</span></span>;  &#125;;</span><br><span class="line">  Date::<span class="built_in">Date</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d) :<span class="built_in">year</span>(y),<span class="built_in">month</span>(m),<span class="built_in">day</span>(d) <span class="comment">//只能通过初始化列表对该数据成员进行初始化</span></span><br><span class="line">      <span class="comment">/*  //cui</span></span><br><span class="line"><span class="comment">      如果构造函数改写成：</span></span><br><span class="line"><span class="comment">Date::Date(int y,int m,int d)</span></span><br><span class="line"><span class="comment">&#123; year=y;</span></span><br><span class="line"><span class="comment">  month=m;</span></span><br><span class="line"><span class="comment">  day=d;  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Date::showDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  cout&lt;&lt;year&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;day&lt;&lt;endl;&#125; </span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="function">Date <span class="title">date1</span><span class="params">(<span class="number">2009</span>,<span class="number">10</span>,<span class="number">15</span>)</span></span>;     </span><br><span class="line">   date1.<span class="built_in">showDate</span>();  <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><ul><li>全局函数做友元</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建筑物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//全局函数的声明,goodGay全局函数是Building好朋友，可以访问私有类成员</span></span><br><span class="line">   <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodGay</span><span class="params">(Building *building)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_SittingRoom=<span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">        m_BedRoom=<span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_SittingRoom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay</span><span class="params">(Building *building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;好基友全局函数 正在访问：&quot;</span>&lt;&lt;building-&gt;m_SettingRoom&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;好基友全局函数 正在访问：&quot;</span>&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Building building;</span><br><span class="line">    <span class="built_in">goodGay</span>(&amp;building);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类做友元</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodGay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GoodGay</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//参观函数 访问Building中的属性</span></span><br><span class="line">    </span><br><span class="line">    Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">GoodGay</span>;<span class="comment">//GoodGay这个类是本类的好朋友，可以访问私有</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>(); <span class="comment">//构造函数声明</span></span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_SittingRoom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">    string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外给构造函数或成员函数赋初值(类内也可以)</span></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">    m_SettingRoom=<span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    m_BedRoom=<span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建建筑物的对象</span></span><br><span class="line">    building=<span class="keyword">new</span> Building; <span class="comment">//new 在堆区创造一个对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;好基友类正在访问：&quot;</span>&lt;&lt;building-&gt;SettingRoom&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GoodGay gg;</span><br><span class="line">    gg.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成员函数做友元</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GoodGay类</span></span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">GoodGay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GoodGay</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;  <span class="comment">//让visit函数可以访问Building中私有成员</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">()</span></span>;  <span class="comment">//让visit2函数不可以访问Building中私有成员</span></span><br><span class="line">    </span><br><span class="line">    Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Building类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//告诉编译器 GoodGay类下的visit成员函数可以访问Building类的私有成员</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_SittingRoom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_BedRoom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类外实现成员函数</span></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">    m_SittingRoom=<span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    m_BedRoom=<span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">    building=<span class="keyword">new</span> Building:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> GoodGay::<span class="built_in">visit</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;visit正在访问：&quot;</span>&lt;&lt;building-&gt;m_SettingRoom&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;visit正在访问：&quot;</span>&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;visit2正在访问：&quot;</span>&lt;&lt;building-&gt;m_SettingRoom&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//  cout&lt;&lt;&quot;visit2正在访问：&quot;&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GoodGay gg;</span><br><span class="line">    gg.<span class="built_in">visit</span>();<span class="comment">//客厅 卧室都可以访问</span></span><br><span class="line">    gg.<span class="built_in">visit2</span>();<span class="comment">//客厅可以 卧室不可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>;  <span class="comment">//对Date类的提前引用声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span>&#123;  <span class="comment">//声明类Time</span></span><br><span class="line"> <span class="keyword">public</span>: </span><br><span class="line">  <span class="built_in">Time</span> (<span class="type">int</span> h,<span class="type">int</span> m,<span class="type">int</span> s) <span class="comment">//定义构造函数</span></span><br><span class="line">  &#123; hour =h; minute =m; sec =s;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showDate_Time</span><span class="params">(Date&amp;)</span></span>;   <span class="comment">//声明函数showDate_Time为类Time的成员函数,也是类Date的友元函数</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> hour; <span class="type">int</span> minute; <span class="type">int</span> sec; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>&#123; <span class="comment">//声明类Date</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Date</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d) <span class="comment">//定义构造函数</span></span><br><span class="line">  &#123; year=y; month=m; day=d; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Time::showDate_Time</span><span class="params">(Date&amp;)</span></span>; </span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> year; <span class="type">int</span> month; <span class="type">int</span> day;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Time::showDate_Time</span> <span class="params">(Date&amp; d)</span>  <span class="comment">//定义函数showDate_Time为类Time的成员函数,也是类Date的友元函数,形参为Date类对象的引用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;d.year&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;d.month&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;d.day&lt;&lt;endl; <span class="comment">//函数showDate_Time作为Time类的成员函数,可以访问Time类对象中的私有数据</span></span><br><span class="line">  </span><br><span class="line">    cout&lt;&lt;hour&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;minute&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;sec&lt;&lt;endl;    <span class="comment">//函数showDate_Time作为Date类的友元函数,可以访问Date类对象中的私有数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Date <span class="title">date1</span><span class="params">(<span class="number">2010</span>,<span class="number">11</span>,<span class="number">14</span>)</span></span>;<span class="comment">//定义Date类对象date1</span></span><br><span class="line">  <span class="function">Time <span class="title">time1</span><span class="params">(<span class="number">6</span>,<span class="number">12</span>,<span class="number">18</span>)</span></span>;  <span class="comment">//定义Time类对象time1</span></span><br><span class="line">  time1.<span class="built_in">showDate_Time</span>(date1); <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//调用函数showDate_Time,实参是Date类对象date1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">程序的运行结果如下:</span><br><span class="line"><span class="number">2010.11</span><span class="number">.14</span></span><br><span class="line"><span class="number">6</span>:<span class="number">12</span>:<span class="number">18</span></span><br></pre></td></tr></table></figure><h6 id="1-友元关系是单向的，不具有交换性。"><a href="#1-友元关系是单向的，不具有交换性。" class="headerlink" title="(1) 友元关系是单向的，不具有交换性。"></a>(1) 友元关系是单向的，不具有交换性。</h6><p>  若类X是类Y的友元，类Y是否是X的友元，要看在类中是否有相应的声明。</p><h6 id="2-友元关系也不具有传递性。"><a href="#2-友元关系也不具有传递性。" class="headerlink" title="(2) 友元关系也不具有传递性。"></a>(2) 友元关系也不具有传递性。</h6><p>  若类X是类Y的友元，类Y是类Z的友元，不一定类X是类Z的友元。</p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><h3 id="对已有的运算符进行定义，赋予其另一种功能，以适应不同的数据类型"><a href="#对已有的运算符进行定义，赋予其另一种功能，以适应不同的数据类型" class="headerlink" title="对已有的运算符进行定义，赋予其另一种功能，以适应不同的数据类型"></a>对已有的运算符进行定义，赋予其另一种功能，以适应不同的数据类型</h3><h4 id="加号运算符重载-实现两个自定义数据类型的运算"><a href="#加号运算符重载-实现两个自定义数据类型的运算" class="headerlink" title="加号运算符重载(实现两个自定义数据类型的运算)"></a>加号运算符重载(实现两个自定义数据类型的运算)</h4><ul><li>对于内置的数据类型的表达式的运算符是不可能改变的</li><li>不要滥用运算符重载 </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使p1的m_A属性加上p2的m_A属性等于p3的m_A属性；使p1的m_B属性加上p2的m_B属性等于p3的m_B属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Person <span class="keyword">operator</span>+(Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        Person temp;</span><br><span class="line">        temp.m_A=<span class="keyword">this</span>-&gt;m_A+p.m_A;</span><br><span class="line">        temp.m_B=<span class="keyword">this</span>-&gt;m_B+p.m_B;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1:</span><br><span class="line">    p1.m_A=<span class="number">10</span>;</span><br><span class="line">    P1.m_B=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    Person p2:</span><br><span class="line">    p2.m_A=<span class="number">10</span>;</span><br><span class="line">    P2.m_B=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    Person p3=p1+p2;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p3.m_A&quot;</span>&lt;&lt;p3.m_A&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p3.m_B&quot;</span>&lt;&lt;p3.m_B&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*可以通过自己写成员函数来实现两个对象相加后返回新的对象</span></span><br><span class="line"><span class="comment">Person PersonAddPerson(Person &amp;p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Person temp;</span></span><br><span class="line"><span class="comment">    temp.m_A=this-&gt;m_A+p.m_A;</span></span><br><span class="line"><span class="comment">    temp.m_B=this-&gt;m_B+p.m_B;</span></span><br><span class="line"><span class="comment">    return temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候编译器起了一个通用名称</span></span><br><span class="line"><span class="comment">// operator+</span></span><br><span class="line"><span class="comment">//这个时候成员函数就可以变为</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_A=<span class="keyword">this</span>-&gt;m_A+p.m_A;</span><br><span class="line">    temp.m_B=<span class="keyword">this</span>-&gt;m_B+p.m_B;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现上诉目的就的代码为</span></span><br><span class="line">Person p3=p1.<span class="keyword">operator</span>+(p2);</span><br><span class="line"><span class="comment">//简化为</span></span><br><span class="line">Person p3=p1+p2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="comment">/*通过全局函数重载+</span></span><br><span class="line"><span class="comment">Person operator+(Person &amp;p1,Person &amp;p2)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    person temp; </span></span><br><span class="line"><span class="comment">    temp.m_A=p1.m_A+p2.m_A;</span></span><br><span class="line"><span class="comment">    temp.m_B=p1.m_B+p2.m_B;</span></span><br><span class="line"><span class="comment">    return temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//调用这个全局函数</span></span><br><span class="line"><span class="comment">Person p3=operator+(p1,p2)</span></span><br><span class="line"><span class="comment">//简化为</span></span><br><span class="line"><span class="comment">Person p3=p1+p2; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="运算符重载-也可以发生函数重载（用途：重复使用函数名）"><a href="#运算符重载-也可以发生函数重载（用途：重复使用函数名）" class="headerlink" title="运算符重载 也可以发生函数重载（用途：重复使用函数名）"></a>运算符重载 也可以发生函数重载（用途：重复使用函数名）</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Person p3=p1+<span class="number">10</span>;  <span class="comment">//Person + int</span></span><br><span class="line"><span class="comment">//函数重载版本</span></span><br><span class="line">Person Person+(Person &amp;p1,<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    person temp; </span><br><span class="line">    temp.m_A=p1.m_A+p2.m_A;</span><br><span class="line">    temp.m_B=p1.m_B+p2.m_B;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">Person p4=p1+<span class="number">100</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p4.m_A&quot;</span>&lt;&lt;p4.m_A&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p4.m_B&quot;</span>&lt;&lt;p4.m_B&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了输出p时就能将其中的所有属性都输出</span></span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(cout,p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//利用成员函数重载左移运算符  p.operator&lt;&lt;(cout)  简化版本 p&lt;&lt;cout</span></span><br><span class="line">    <span class="comment">//不会利用成员函数重载&lt;&lt;运算符，因为无法实现cout在左侧</span></span><br><span class="line">    <span class="comment">//void operator&lt;&lt;(cout)   在不知道返回值的情况下，先用void</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//在构造函数中赋初值</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a，<span class="type">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        m_A=a;</span><br><span class="line">        m_B=b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只能利用全局函数重载左移运算符</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,Person &amp;p) <span class="comment">//本质 operator&lt;&lt;(cout) 简化为cout&lt;&lt;p;  cout本质为标准输出流对象，全局只能有一个</span></span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_A=&quot;</span>&lt;&lt;p.m_A&lt;&lt;<span class="string">&quot;m_B=&quot;</span>&lt;&lt;p.m_B;</span><br><span class="line">    <span class="keyword">return</span> cout;  <span class="comment">//cout可以改成任意别名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//cout&lt;&lt;p&lt;&lt;endl;  没有与这些操作数匹配的&quot;&lt;&lt;&quot;运算符</span></span><br><span class="line">    <span class="comment">//全局函数编码成功后就可以输出p</span></span><br><span class="line">    <span class="comment">//链式反应</span></span><br><span class="line">    cout&lt;&lt;p&lt;&lt;<span class="string">&quot;hello&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyInteger</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout,Myinteger myint)</span><br><span class="line">    <span class="built_in">MyInteger</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_Num=<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重载++运算符(前置)</span></span><br><span class="line">    MyInteger&amp; <span class="keyword">operator</span>++()     <span class="comment">//为什么返回不能返回值而是返回引用的数据？为了多次累加的链式反应不出错，为了对同一个数据做递增操作</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Num++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重载++运算符(后置)</span></span><br><span class="line">    <span class="comment">//因为temp是一个局部对象，在这个函数执行完就会被释放，如果还要返回它的引用，之后就是非法操作，所以后置返回的是值的形式</span></span><br><span class="line">    MyInteger <span class="keyword">operator</span>++(<span class="type">int</span>)  <span class="comment">//int代表占位参数，用于区分前置和后置递增</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先 记录当时结果</span></span><br><span class="line">        MyInteger temp=*<span class="keyword">this</span>;     </span><br><span class="line">        <span class="comment">//后 递增</span></span><br><span class="line">        m_Num++;</span><br><span class="line">        <span class="comment">//最后将记录结果返回</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    <span class="type">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载左移运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout,Myinteger myint)  </span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;myint.m_Num;</span><br><span class="line">    <span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyInteger myint;</span><br><span class="line">    cout&lt;&lt;++(++myint)&lt;&lt;endl; <span class="comment">//用引用或者值返回都为2</span></span><br><span class="line">    cout&lt;&lt;myint&lt;&lt;endl;  <span class="comment">//此时用引用返回的为2，而用值返回的就为1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyInteger myint;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;myint++&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;myint&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><h5 id="编译器会至少给一个类添加4个函数"><a href="#编译器会至少给一个类添加4个函数" class="headerlink" title="编译器会至少给一个类添加4个函数"></a>编译器会至少给一个类添加4个函数</h5><ul><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行拷贝</li><li>赋值运算符operator=对属性进行值拷贝</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Age=<span class="keyword">new</span> <span class="built_in">int</span>(age);  <span class="comment">//new运算符生成一个堆区数据，由程序员手动开辟，也需要他手动释放(手动释放用析构函数)，返回类型为int*</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_Age!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_Age;</span><br><span class="line">            m_Age=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//重载 赋值运算符</span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编译器是提供浅拷贝</span></span><br><span class="line">    <span class="comment">//m_Age=p.m_Age;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.应该先判断是否有属性在堆区，如果有要先释放干净，然后再深拷贝</span></span><br><span class="line">    <span class="keyword">if</span>(m_Age!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_Age;</span><br><span class="line">        m_Age=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.深拷贝</span></span><br><span class="line">    m_Age=<span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Age)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//3.返回对象本身</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> *m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="comment">//赋值运算操作  用编译器提供的赋值操作，只是单纯把p1中的年龄的地址值赋值给p2，会出现重复释放的问题，所以要自己写一个赋值运算符</span></span><br><span class="line">    p3=p2=p1;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p1的年龄为：&quot;</span>&lt;&lt;*p1.m_Age&lt;&lt;endl;  <span class="comment">//18</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p2的年龄为：&quot;</span>&lt;&lt;*p2.m_Age&lt;&lt;endl; <span class="comment">//18</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p3的年龄为：&quot;</span>&lt;&lt;*p3.m_Age&lt;&lt;endl; <span class="comment">//18</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name,<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Name=name;</span><br><span class="line">        m_Age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重载关系运算符</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Name==p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age==p.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom,18&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom,18&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(p1==p2)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;p1和p2是相等的&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;p1和p2是不相等的&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用运算符重载"><a href="#调用运算符重载" class="headerlink" title="调用运算符重载"></a>调用运算符重载</h4><ul><li>函数调用运算符（）也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myprint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">//重载函数调用运算符</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string test)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;test&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPrint02</span><span class="params">(string test)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;test&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyPrint myPrint;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">myPrint</span>(<span class="string">&quot;hello world&quot;</span>);<span class="comment">//对象使用重载调用运算符</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MyPrint02</span>(<span class="string">&quot;hello world&quot;</span>);<span class="comment">//调用函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加法函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdd</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyAdd myadd;</span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">myadd</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;ret=&quot;</span>&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匿名函数对象</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">MyAdd</span>()(<span class="number">100</span>,<span class="number">100</span>)&lt;&lt;endl;  <span class="comment">//匿名对象重载</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>(); <span class="comment">//仿函数没有固定写法，很灵活，会根据我们的需求改变返回值类型和参数类型和个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h4 id="语法：-class-子类（派生类）-：继承方式-父类（基类）"><a href="#语法：-class-子类（派生类）-：继承方式-父类（基类）" class="headerlink" title="语法： class   子类（派生类）  ：继承方式    父类（基类）"></a>语法： class   子类（派生类）  ：继承方式    父类（基类）</h4><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span>:<span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_A=<span class="number">10</span>;<span class="comment">//父类中的公共权限成员 在子类依然是公共权限</span></span><br><span class="line">        m_B=<span class="number">20</span>;<span class="comment">//父类中的保护权限成员 在子类依然是保护权限</span></span><br><span class="line">       <span class="comment">// m_C=30;  父类中的私有权限成员 子类访问不到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son1 s1;</span><br><span class="line">    s1.m_A=<span class="number">100</span>;</span><br><span class="line"><span class="comment">//    s1.m_B=100;   //保护权限类内可以访问，类外不可以访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>:<span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_A=<span class="number">100</span>;  <span class="comment">//父类中公共成员 在子类中变成保护权限</span></span><br><span class="line">        m_B=<span class="number">100</span>;  <span class="comment">//父类中保护成员 依然在子类为保护权限</span></span><br><span class="line">  <span class="comment">//  m_C=100;  //父类中的私有权限成员 子类访问不到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son2 s1;</span><br><span class="line"> <span class="comment">//   s1.m_A=100;  保护权限类内可以访问，类外不可以访问</span></span><br><span class="line"> <span class="comment">//   S1.m_B=100;  保护权限类内可以访问，类外不可以访问</span></span><br><span class="line"> <span class="comment">//   s1.m_C=100;  保护权限类内可以访问，类外不可以访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_C;    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son3</span>:<span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_A=<span class="number">100</span>;  <span class="comment">//父类中公共成员 在子类中变为私有成员</span></span><br><span class="line">        m_B=<span class="number">100</span>;  <span class="comment">//父类中保护成员 在子类中变为私有成员</span></span><br><span class="line">        m_c=<span class="number">100</span>;  <span class="comment">//父类中私有成员 子类访问不到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son s1;</span><br><span class="line">    s1.m_A=<span class="number">1000</span>;  <span class="comment">//私有成员类外访问不到</span></span><br><span class="line">    S2.m_B=<span class="number">1000</span>;  <span class="comment">//私有成员类外访问不到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size of Son:&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(Son)&lt;&lt;endl;  <span class="comment">//16 父类中所有非静态成员属性成员，子类都会继承，父类中私有成员属性，是被编译器隐藏了，子类访问不到，但是确实被继承了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当基类含有带参数的构造函数时，派生类必须定义构造函数，并缀上基类名(参数表),以提供把参数传递给基类构造函数的途径。</strong>其中基类构造函数参数表的参数，通常来源于派生类构造函数的参数表，也可以用常数值。</p><p>(1)可以将派生类构造函数定义在类的外部,而在类体内只写该函数的声明。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在派生类中声明构造函数的原型:</span></span><br><span class="line">   <span class="built_in">D</span>(<span class="type">int</span> a,<span class="type">int</span> b);   <span class="comment">//在此，不包括基类构造函数名及其参数表(即:base(b))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//而在类的外部定义派生类的构造函数:</span></span><br><span class="line">   <span class="built_in">D</span>(<span class="type">int</span> a,<span class="type">int</span> b):<span class="built_in">B</span>(b)   <span class="comment">//在此，要列出基类构造函数名及其参数表(即:base(b)) </span></span><br><span class="line">   &#123; cout&lt;&lt;<span class="string">&quot;调用派生类的构造函数\n&quot;</span>&lt;&lt;endl;</span><br><span class="line">    j=a;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="当派生类中含有对象成员时，其构造函数的一般形式为："><a href="#当派生类中含有对象成员时，其构造函数的一般形式为：" class="headerlink" title="当派生类中含有对象成员时，其构造函数的一般形式为："></a>当派生类中含有对象成员时，其构造函数的一般形式为：</h6><p><strong>派生类名(参数总表基类名(参数表0)，对象名成员1(参数表1)，…，对象成员名n (参数表n)</strong></p><p> <strong>{</strong></p><p>   <strong>//**</strong>派生类新增成员的初始化语句<strong> </strong>..** </p><p> <strong>}</strong></p><h3 id="继承中构造和析构顺序"><a href="#继承中构造和析构顺序" class="headerlink" title="继承中构造和析构顺序"></a>继承中构造和析构顺序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base的构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base的析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son的构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son的析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// Base b;  Base的构造函数   Base的析构函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先构造父类再构造子类，析构和构造的顺序相反</span></span><br><span class="line">    Son s;   <span class="comment">// Base的构造函数  Son的构造函数  Son的析构函数  Base的析构函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承中同名成员的处理方式"><a href="#继承中同名成员的处理方式" class="headerlink" title="继承中同名成员的处理方式"></a>继承中同名成员的处理方式</h3><h4 id="当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据"><a href="#当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据" class="headerlink" title="当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据"></a>当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据</h4><ul><li>访问子类同名成员 直接访问就行</li><li>访问父类同名成员 需要加作用域</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_A=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base-func()调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_A=<span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son-func()调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//同名数据成员，通过子类对象的处理方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son s;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Son下 m_A=&quot;</span>&lt;&lt;s.m_A&lt;&lt;endl;  <span class="comment">//200,直接访问访问的是同名中的子类</span></span><br><span class="line">    <span class="comment">//如果通过子类对象 访问到父类中同名成员，需要加作用域</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base下 m_A=&quot;</span>&lt;&lt;s.Base::m_A&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数处理方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son s;</span><br><span class="line">    s.<span class="built_in">func</span>();  <span class="comment">//Son-func()调用  直接调用，调用的是子类中的成员函数</span></span><br><span class="line">    <span class="comment">//如何调用到父类中同名成员函数？</span></span><br><span class="line">    s.Base::<span class="built_in">func</span>();  <span class="comment">//Base-func()调用</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有的同名成员函数 所以s.func(100); 会报错</span></span><br><span class="line">    <span class="comment">//如果想访问父类中被隐藏的同名成员函数需要加作用域</span></span><br><span class="line">    s.Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承中同名静态成员"><a href="#继承中同名静态成员" class="headerlink" title="继承中同名静态成员"></a>继承中同名静态成员</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base static void func()&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base static void func(int a)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Base::m_A=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>::<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son static void func()&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Son::m_A=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.通过对象来访问数据</span></span><br><span class="line">    Son s;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Son 下 m_A=&quot;</span>&lt;&lt;s.m_A&lt;&lt;endl;  <span class="comment">//100</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base 下 m_A=&quot;</span>&lt;&lt;Son::m_A&lt;&lt;endl;  <span class="comment">//200</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.通过类名方式访问</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;通过类名访问：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Son 下 m_A=&quot;</span>&lt;&lt;Son::m_A&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base 下 m_A=&quot;</span>&lt;&lt;Son::Base::m_A&lt;&lt;endl;<span class="comment">//子类通过域名访问父类作用域 下的m_A</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名静态成员函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.通过对象访问</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;通过对象访问&quot;</span>&lt;&lt;endl;</span><br><span class="line">    Son s;</span><br><span class="line">    s.<span class="built_in">func</span>();</span><br><span class="line">    s.Base::<span class="built_in">func</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.通过类名访问</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;通过类名访问&quot;</span>&lt;&lt;endl;</span><br><span class="line">    Son::<span class="built_in">func</span>();</span><br><span class="line">    Son::Base::<span class="built_in">func</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Son::func(100) 这时也无法通过函数重载调用带参的函数  因为子类出现和父类同名成员函数，会隐藏父类中所有同名成员函数，这时候还是需要加作用域才能访问</span></span><br><span class="line">    Son::Base::<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h3><p><code>语法：class 子类:继承方式 父类1，继承方式 父亲2...</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Base1</span>()</span><br><span class="line">     &#123;</span><br><span class="line">         m_A=<span class="number">100</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_B=<span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 需要继承Base1和Base2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_C=<span class="number">300</span>;</span><br><span class="line">        m_D=<span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son s;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof Son=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(s)&lt;&lt;endl;  <span class="comment">//16 </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;m_A=&quot;&lt;&lt;s.m_A&lt;&lt;endl;  二义性，当父类中出现同名成员，需要加作用域</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base1 m_A=&quot;</span>&lt;&lt;Base1::s.m_A&lt;&lt;endl;  <span class="comment">//100</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base2 m_A=&quot;</span>&lt;&lt;Base2::s.m_A&lt;&lt;endl;  <span class="comment">//200</span></span><br><span class="line">    <span class="comment">//通常在开发过程中不做多继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="虚基类（菱形继承）"><a href="#虚基类（菱形继承）" class="headerlink" title="虚基类（菱形继承）"></a>虚基类（菱形继承）</h3><ul><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时就会产生二义性</li><li>草泥马继承了动物的数据继承了两份，但这个数据继承一次就行</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用虚继承 解决菱形继承的问题</span></span><br><span class="line"><span class="comment">//继承之前 加上关键字virtual变为虚继承</span></span><br><span class="line"><span class="comment">//Animal类称为虚基类</span></span><br><span class="line"><span class="comment">//羊类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//驼类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//羊驼类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span>:<span class="keyword">public</span> Sheep,<span class="keyword">public</span> Tuo</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SheepTuo st;</span><br><span class="line">   <span class="comment">// st.m_Age=18;  这时候就会出现多继承的问题，产生二义性</span></span><br><span class="line">    st.Sheep::m_Age=<span class="number">18</span>;</span><br><span class="line">    st.Tuo::m_Age=<span class="number">28</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; st.Sheep::m_Age=&quot;</span>&lt;&lt; st.Sheep::m_Age&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; st.Tuo::m_Age=&quot;</span>&lt;&lt; st.Tuo::m_Age&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当成为虚继承时，数据就变成了一个这个时候不会出现二义性，先把m_Age赋值为18，再赋值为28</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; st.m_Age=&quot;</span>&lt;&lt; st.m_Age&lt;&lt;endl; <span class="comment">//28</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="派生类对基类成员的访问形式主要有以下两种"><a href="#派生类对基类成员的访问形式主要有以下两种" class="headerlink" title="派生类对基类成员的访问形式主要有以下两种:"></a>派生类对基类成员的访问形式主要有以下两种:</h6><p><strong>内部访问</strong> 由派生类中新增的成员函数 对基类继承来的成员的访问</p><p><strong>对象访问</strong> 在派生类<strong>外部</strong>通过派生类的对象对从基类继承来的成员的访问</p><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230511_110042.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230511_110227.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230511_110626.png" alt=""></p><h6 id="对于基类中的私有成员："><a href="#对于基类中的私有成员：" class="headerlink" title="对于基类中的私有成员："></a>对于基类中的私有成员：</h6><p>  无论哪种派生方式，基类中的私有成员, </p><p>  不允许派生类的对象直接访问(对象访问),</p><p>  不允许派生类中成员函数直接访问(内部访问) ，</p><p>  <strong>但是可以通过基类提供的公有成员函数访问。</strong></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>静态多态：函数重载和运算符重载属于静态多态，重复使用函数名</li><li>动态多态：派生类和虚函数实现运行时多态</li></ul><h6 id="静态多态和动态多态的区别："><a href="#静态多态和动态多态的区别：" class="headerlink" title="静态多态和动态多态的区别："></a>静态多态和动态多态的区别：</h6><ul><li>静态多态的函数地址早绑定，编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定，运行阶段确定函数地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;动物在说话&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//猫类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;小猫在说话&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行说话的函数</span></span><br><span class="line"><span class="comment">//地址早绑定，在编译阶段就确定函数地址</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSpeak</span><span class="params">(Animal &amp;animal)</span>  <span class="comment">//在用父类的引用接收子类的对象  Animal &amp; animal=cat  在C++中允许父子之间的类型转换，不需要做强制类型转换，父类的引用或者指针可以直接指向子类对象</span></span></span><br><span class="line"><span class="function"><span class="comment">//现在的问题是speak()这个函数是走猫还是动物？  我们本意是想让猫说话，但是执行结果是动物在说话  如果想执行让猫说话，就不能让这个函数地址提前绑定，需要在运行阶段进行绑定</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    animal.<span class="built_in">speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Cat cat;</span><br><span class="line">    <span class="built_in">doSpeak</span>(cat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof Animal=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(Animal)&lt;&lt;endl; <span class="comment">//在没有构建虚函数前因为成员变量和成员函数分开存储（只有非静态成员变量才属于类的对象上，非静态成员函数；静态成员变量；静态成员函数都是分开存储，不在类的对象上），所以现在的Animal类相当于一个空类，空类的大小是&#x27;1&#x27;`</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof Animal=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(Animal)&lt;&lt;endl; <span class="comment">//在构建完虚函数后结果变成了&#x27;4&#x27;(不管什么类型的指针都占四个字节)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在C-中规定-基类的对象指针可以指向它的公有派生的对象-但是当其指向公有派生类对象时-它只能访问派生类中从基类继承来的成员，而不能访问公有派生类中定义的成员"><a href="#在C-中规定-基类的对象指针可以指向它的公有派生的对象-但是当其指向公有派生类对象时-它只能访问派生类中从基类继承来的成员，而不能访问公有派生类中定义的成员" class="headerlink" title="在C++中规定: 基类的对象指针可以指向它的公有派生的对象,但是当其指向公有派生类对象时,它只能访问派生类中从基类继承来的成员，而不能访问公有派生类中定义的成员"></a><strong>在C++中规定</strong>: 基类的对象指针可以指向它的公有派生的对象,但是当其指向公有派生类对象时,它只能访问派生类中从基类继承来的成员，而不能访问公有派生类中定义的成员</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;         </span><br><span class="line"> <span class="keyword">public</span>：<span class="function"><span class="type">void</span> <span class="title">print1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;. . .&#125;  &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>：<span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>：<span class="function"><span class="type">void</span> <span class="title">print2</span><span class="params">()</span></span>&#123;. . .&#125; &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;A *p1；  <span class="comment">//定义基类A的指针变量p1</span></span><br><span class="line"> B op2；  <span class="comment">//定义派生类B的对象op2</span></span><br><span class="line"> p1=&amp;op2；<span class="comment">//将指针变量p1指向派生类对象op2</span></span><br><span class="line"> p1-&gt;<span class="built_in">print1</span>();  <span class="comment">//正确, 基类指针变量p1可以访问派生类中从基类继承来的成员函数print1()</span></span><br><span class="line"> p1-&gt;<span class="built_in">print2</span>();  <span class="comment">//错误,基类指针变量p1不能访问派生类中定义的成员函数print2()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">base</span> &#123;    <span class="comment">//例 虚函数引例 </span></span><br><span class="line">  <span class="type">int</span> a,b;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">base</span>(<span class="type">int</span> x,<span class="type">int</span> y) &#123; a=x;  b=y; &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">  </span>&#123; cout&lt;&lt;<span class="string">&quot;调用基类base的show函数\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a=&quot;</span> &lt;&lt;a&lt;&lt;“b=<span class="string">&quot;&lt;&lt;b&lt;&lt;endl; &#125;   &#125;;</span></span><br><span class="line"><span class="string">class dirive:public base &#123;</span></span><br><span class="line"><span class="string">  int c;</span></span><br><span class="line"><span class="string"> public:</span></span><br><span class="line"><span class="string">  dirive(int x,int y,int z):base(x,y)&#123;c=z;&#125;</span></span><br><span class="line"><span class="string">  void show( ) &#123; cout&lt;&lt; &quot;</span>调用派生类dirive的show函数\n<span class="string">&quot;;</span></span><br><span class="line"><span class="string">cout&lt;&lt;&quot;</span>c=<span class="string">&quot;&lt;&lt;c&lt;&lt;endl; &#125;  &#125;;</span></span><br><span class="line"><span class="string">void main( )</span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">  base mb(50,50),*mp; </span></span><br><span class="line"><span class="string">  dirive mc(10,20,30);</span></span><br><span class="line"><span class="string">  mp=&amp;mb; </span></span><br><span class="line"><span class="string">  mp-&gt;show( );</span></span><br><span class="line"><span class="string">  mp=&amp;mc; </span></span><br><span class="line"><span class="string">  mp-&gt;show( );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">程序运行结果不是：</span></span><br><span class="line"><span class="string">调用基类base的show函数</span></span><br><span class="line"><span class="string">a=50 b=50</span></span><br><span class="line"><span class="string">调用派生类dirive的show函数</span></span><br><span class="line"><span class="string">c=30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">程序运行结果如下：</span></span><br><span class="line"><span class="string">调用基类base的show函数</span></span><br><span class="line"><span class="string">a=50  b=50</span></span><br><span class="line"><span class="string">调用基类base的show函数</span></span><br><span class="line"><span class="string">a=10  b=20</span></span><br><span class="line"><span class="string">*/</span></span><br></pre></td></tr></table></figure><p><strong>如果在派生类中没有对基类的虚函数重新定义,则公有派生类继承其直接基类的虚函数。一个虚函数无论被公有继承多少次,它仍然保持其虚函数的特性。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B0</span>&#123;</span><br><span class="line">   . . .</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;. . .&#125; <span class="comment">//在基类B0中,定义show为虚函数</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">B1</span>:<span class="keyword">public</span> B0&#123;</span><br><span class="line">    ...    <span class="comment">//若在公有派生类B1中没有重新定义虚函数show,则函数show在派生类中被继承,仍是虚函数。</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h4 id="动态多态满足条件"><a href="#动态多态满足条件" class="headerlink" title="动态多态满足条件"></a>动态多态满足条件</h4><h5 id="1-有继承关系"><a href="#1-有继承关系" class="headerlink" title="1.有继承关系"></a><code>1.有继承关系</code></h5><h5 id="2-子类要重写父类的虚函数，这时virtual可以不写-virtual-void-speak-和void-speak-相同-重写：函数名相同，形参列表，函数返回值类型都完全相同"><a href="#2-子类要重写父类的虚函数，这时virtual可以不写-virtual-void-speak-和void-speak-相同-重写：函数名相同，形参列表，函数返回值类型都完全相同" class="headerlink" title="2.子类要重写父类的虚函数，这时virtual可以不写 virtual void speak()和void speak()相同   重写：函数名相同，形参列表，函数返回值类型都完全相同"></a><code>2.子类要重写父类的虚函数，这时virtual可以不写 virtual void speak()和void speak()相同   重写：函数名相同，形参列表，函数返回值类型都完全相同</code></h5><h4 id="动态多态的使用"><a href="#动态多态的使用" class="headerlink" title="动态多态的使用"></a>动态多态的使用</h4><h5 id="父类的指针或引用-指向子类对象"><a href="#父类的指针或引用-指向子类对象" class="headerlink" title="父类的指针或引用 指向子类对象"></a><code>父类的指针或引用 指向子类对象</code></h5><h3 id="动态多态的原理"><a href="#动态多态的原理" class="headerlink" title="动态多态的原理"></a>动态多态的原理</h3><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230409_171013.png" alt="屏幕截图_20230409_171013"></p><h3 id="cat类中重写speak函数与否的原理（上边没有重写，下边重写了）"><a href="#cat类中重写speak函数与否的原理（上边没有重写，下边重写了）" class="headerlink" title="cat类中重写speak函数与否的原理（上边没有重写，下边重写了）"></a>cat类中重写speak函数与否的原理（上边没有重写，下边重写了）</h3><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230409_171528.png" alt="屏幕截图_20230409_171528"></p><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230409_171800.png" alt=""></p><h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><h6 id="在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容"><a href="#在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容" class="headerlink" title="在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容"></a>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</h6><h6 id="语法：virtual-返回值类型-函数名-形参列表-0，当类中有了纯虚函数，这个类就称为抽象类"><a href="#语法：virtual-返回值类型-函数名-形参列表-0，当类中有了纯虚函数，这个类就称为抽象类" class="headerlink" title="语法：virtual 返回值类型 函数名 (形参列表)=0，当类中有了纯虚函数，这个类就称为抽象类"></a>语法：<code>virtual 返回值类型 函数名 (形参列表)</code>=0，当类中有了纯虚函数，这个类就称为抽象类</h6><p>抽象类：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类（父类）中的纯虚函数，否则也属于抽象类，无法实例化对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;func函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Base b; 抽象类无法实例化对象</span></span><br><span class="line">    <span class="comment">// new Base; 抽象类无法实例化对象</span></span><br><span class="line">    </span><br><span class="line">    Son s; <span class="comment">//子类必须重写父类中的纯虚函数，否则无法实例化对象</span></span><br><span class="line">    </span><br><span class="line">    Base *base=<span class="keyword">new</span> Son;</span><br><span class="line">    base-&gt;<span class="built_in">func</span>(); <span class="comment">//func函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="多态：多态的作用就是为了使函数接口更通用化，通过一个父类的指针或引用，因为创造的对象不同，可以调用多种形态的函数"><a href="#多态：多态的作用就是为了使函数接口更通用化，通过一个父类的指针或引用，因为创造的对象不同，可以调用多种形态的函数" class="headerlink" title="多态：多态的作用就是为了使函数接口更通用化，通过一个父类的指针或引用，因为创造的对象不同，可以调用多种形态的函数"></a><code>多态：多态的作用就是为了使函数接口更通用化，通过一个父类的指针或引用，因为创造的对象不同，可以调用多种形态的函数</code></h6><h3 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h3><p>多态使用时，如果子类中有些属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><ul><li>虚析构函数没有类型,也没有参数。</li></ul><ul><li>如果将基类的析构函数定义为虚函数,由该基类所派生的所有派生类的析构函数也都自动成为虚函数。</li></ul><ul><li>在C++中,不能声明虚构造函数,但是可以声明虚析构函数。 </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>   <span class="comment">//本程序只执行了基类B的析构函数,而没有执行派生类D的析构函数。原因是当撤销指针P所指的派生类的无名对象, 调用析构函数时,采用了静态联编方式,只调用了基类B的析构函数。 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">B</span>()</span><br><span class="line"> &#123; cout&lt;&lt;<span class="string">&quot;调用基类B的析构函数\n&quot;</span>;&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:<span class="keyword">public</span> B&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">D</span>()</span><br><span class="line"> &#123; cout&lt;&lt;<span class="string">&quot;调用派生类D的析构函数\n&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; B *p;           <span class="comment">//定义指向基类B的指针变量p </span></span><br><span class="line">  p= <span class="keyword">new</span> D;   <span class="comment">//运算符new为派生类的无名对象动态地 分配了一个存储空间,并将地址赋给对象指针p</span></span><br><span class="line">  <span class="keyword">delete</span> p;   <span class="comment">//用delete撤销无名对象,释放动态存储空间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//程序运行的结果为:调用基类B的析构函数</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>   <span class="comment">// 虚析构函数的使用。</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">B</span>()</span><br><span class="line"> &#123; cout&lt;&lt;<span class="string">&quot;调用基类B的析构函数\n&quot;</span>;&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:<span class="keyword">public</span> B&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   ~<span class="built_in">D</span>()</span><br><span class="line"> &#123; cout&lt;&lt;<span class="string">&quot;调用派生类D的析构函数\n&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; B *p;           <span class="comment">//定义指向基类B的指针变量p </span></span><br><span class="line">  p= <span class="keyword">new</span> D; </span><br><span class="line">  <span class="keyword">delete</span> p;  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//程序运行的结果为:调用派生类D的析构函数调用基类B的析构函数</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Animal</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Animal构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用虚析构可以解决 父类指针释放子类对象时不干净的问题</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    virtual ~Anmial()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;&quot;Animal析构函数调用&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//纯虚析构 需要声明也需要实现</span></span><br><span class="line">    <span class="comment">//有了纯虚析构之后，这个类也属于抽象类，无法实例化对象</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>()=<span class="number">0</span>;  <span class="comment">//声明</span></span><br><span class="line">    <span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">spesk</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()  <span class="comment">//shi&#x27;xia</span></span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Animal纯虚析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cat</span>(string name)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Cat的构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">        m_Name=<span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;*m_Name&lt;&lt;<span class="string">&quot;小猫在说话&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Cat</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_Name!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Cat析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">delete</span> m_Name;</span><br><span class="line">            m_Name=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string *m_Name; <span class="comment">//将小猫的名字创建在堆区,用指针维护</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Animal* animal=<span class="keyword">new</span> Cat;  <span class="comment">//父类指针指向子类对象 多态</span></span><br><span class="line">    animal-&gt;<span class="built_in">speak</span>();</span><br><span class="line">    <span class="comment">//父类的指针在析构时不会调用子类中析构函数，导致子类如果有堆区属性，会有泄露情况，解决办法是把Animal析构函数变成纯虚构函数</span></span><br><span class="line">    <span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();  <span class="comment">//Animal构造函数调用  Cat构造函数调用 Tom小猫在说话 Animal析构函数调用 此时还没有Cat析构函数调用的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于抽象类中至少包含有一个没有定义功能的纯虚函数,因此抽象类只能用作其他类的基类,不能建立抽象类对象。 </li></ul><ul><li>不允许从具体类派生出抽象类。所谓具体类，就是不包含纯虚函数的普通类;</li></ul><ul><li>抽象类不能用作函数的参数类型、函数的返回类型或显式转换的类型;</li></ul><ul><li>可以声明指向抽象类的指针或引用，此指针可以指向它的派生类，进而实现多态性。</li></ul><ul><li>在派生类中,如果对基类的纯虚函数没有重新定义,则该函数在派生类中仍是纯虚函数,该派生类仍为抽象类。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数分文件编写&quot;&gt;&lt;a href=&quot;#函数分文件编写&quot; class=&quot;headerlink&quot; title=&quot;函数分文件编写&quot;&gt;&lt;/a&gt;函数分文件编写&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C++Project</title>
    <link href="https://pipi1002.github.io/2023/02/23/C++Project/"/>
    <id>https://pipi1002.github.io/2023/02/23/C++Project/</id>
    <published>2023-02-23T02:38:33.000Z</published>
    <updated>2023-06-27T02:36:58.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-语言程序设计"><a href="#C-语言程序设计" class="headerlink" title="C++语言程序设计"></a>C++语言程序设计</h1><h2 id="五只小猪称体重-在一个数组中找到最大值"><a href="#五只小猪称体重-在一个数组中找到最大值" class="headerlink" title="五只小猪称体重(在一个数组中找到最大值)"></a>五只小猪称体重(在一个数组中找到最大值)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">300</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">250</span>&#125;</span><br><span class="line"><span class="comment">//算法：认定MAX为最大值，访问数组中每个元素，如果这个元素比我认定的最大值大，则更新最大值</span></span><br><span class="line">    <span class="type">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;MAX)</span><br><span class="line">        &#123;</span><br><span class="line">            MAX=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印最大值</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;最重的小猪体重为:&quot;</span>&lt;&lt;MAX&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组元素逆置-如原数组元素为1，2，3，4，5逆置后输出结果为5，4，3，2，1"><a href="#数组元素逆置-如原数组元素为1，2，3，4，5逆置后输出结果为5，4，3，2，1" class="headerlink" title="数组元素逆置(如原数组元素为1，2，3，4，5逆置后输出结果为5，4，3，2，1)"></a>数组元素逆置(如原数组元素为1，2，3，4，5逆置后输出结果为5，4，3，2，1)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;<span class="comment">//起始元素的下标</span></span><br><span class="line">    <span class="type">int</span> end=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]<span class="number">-1</span>);<span class="comment">//末尾元素下标</span></span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//start和end下标元素进行互换(创建临时变量)</span></span><br><span class="line">      <span class="type">int</span> temp=arr[start];</span><br><span class="line">      arr[start]=arr[end];</span><br><span class="line">      arr[end]=temp;</span><br><span class="line">      atart++;</span><br><span class="line">      end--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;数组元素更新后：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体案例"><a href="#结构体案例" class="headerlink" title="结构体案例"></a>结构体案例</h2><h5 id="案例1：学校正在做毕设项目，每名老师带领5个学生，总共有三名老师，需求如下"><a href="#案例1：学校正在做毕设项目，每名老师带领5个学生，总共有三名老师，需求如下" class="headerlink" title="案例1：学校正在做毕设项目，每名老师带领5个学生，总共有三名老师，需求如下"></a>案例1：学校正在做毕设项目，每名老师带领5个学生，总共有三名老师，需求如下</h5><h6 id="设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员，学生的成员有姓名，考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值，最终打印出老师数据以及老师所带的学生数据"><a href="#设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员，学生的成员有姓名，考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值，最终打印出老师数据以及老师所带的学生数据" class="headerlink" title="设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员，学生的成员有姓名，考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值，最终打印出老师数据以及老师所带的学生数据"></a>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员，学生的成员有姓名，考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值，最终打印出老师数据以及老师所带的学生数据</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iosteam&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生的结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    string sName;</span><br><span class="line">    <span class="comment">//分数</span></span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//老师的结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    string tName;</span><br><span class="line">    <span class="comment">//学生数组</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span> sArray[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给老师和学生赋值的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">allocateSpace</span><span class="params">(<span class="keyword">struct</span> Teacher tArray[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string nameSeed=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="comment">//外侧for循环给老师进行赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先赋值老师姓名</span></span><br><span class="line">        tArray[i].tName=<span class="string">&quot;Teacher_&quot;</span>;</span><br><span class="line">        tArray[i].tName+=nameSeed[i];<span class="comment">//相当于追加一个字母</span></span><br><span class="line">        <span class="comment">//通过内循环给每个老师带的学生赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tArray[i].sArray[j].sName=<span class="string">&quot;Student_&quot;</span>;</span><br><span class="line">            tArray[i].sArray[j].sname+=nameSeed[j];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//给分数是一个随机值</span></span><br><span class="line">            <span class="type">int</span> random=<span class="built_in">rand</span>()%<span class="number">61</span>+<span class="number">40</span>;  <span class="comment">//0+40~60+40</span></span><br><span class="line">            tArray[i].sArray[j].score=random;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印所有信息的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printinfo</span><span class="params">(<span class="keyword">struct</span> Teacher tArray[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//遍历老师</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;老师姓名:&quot;</span>&lt;&lt;tArray[i].tName&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;\t学生姓名:&quot;</span>&lt;&lt;tArray[i].sArray[j].sName&lt;&lt;<span class="string">&quot; 考试分数:&quot;</span>&lt;&lt;tArray[i].sArray[j].score&lt;&lt;endl;  <span class="comment">//\t空格效果更明显</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//随机数种子</span></span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>))</span><br><span class="line">    <span class="comment">//创建3名老师的数组</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Teacher</span> tArray[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//通过函数给3名老师的信息赋值，并给老师带的学生信息赋值</span></span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">sizeof</span>(tArray)/<span class="built_in">sizeof</span>(tArray[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">allocateSpace</span>(tArray,len);</span><br><span class="line">    <span class="comment">//打印所有老师及所带的学生信息</span></span><br><span class="line">    <span class="built_in">printInfo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例2：设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放5名英雄，通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。"><a href="#案例2：设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放5名英雄，通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。" class="headerlink" title="案例2：设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放5名英雄，通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。"></a>案例2：设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放5名英雄，通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</h5><p>五名英雄信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;</span><br><span class="line">&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//英雄的结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hero</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//性别</span></span><br><span class="line">    string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序，实现年龄升序排列的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">struct</span> Hero heroArray[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroArray[j].age&gt;heroArray[j+<span class="number">1</span>],age)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">Hero</span> temp=heroArray[j];  <span class="comment">//定义temp的数据类型要为struct Hero</span></span><br><span class="line">                heroArray[j]=heroArray[j+<span class="number">1</span>];</span><br><span class="line">                heroArray[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHero</span><span class="params">(<span class="keyword">struct</span> Hero heroArray[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         cout&lt;&lt;<span class="string">&quot;排序后排序:&quot;</span>&lt;&lt;<span class="string">&quot;姓名:&quot;</span>&lt;&lt;heroArray[i].name&lt;&lt;<span class="string">&quot;年龄:&quot;</span>&lt;&lt;heroArray[i].age&lt;&lt;<span class="string">&quot;性别:&quot;</span>&lt;&lt;heroArray[i].sex&lt;&lt;endl</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.设计英雄结构体</span></span><br><span class="line">    <span class="comment">//2.创建数组存放5名英雄</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Hero</span> heroArray[<span class="number">5</span>]=</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">sizeof</span>(heroArray)/<span class="built_in">sizeof</span>(heroArray[<span class="number">0</span>]);</span><br><span class="line">   <span class="comment">//排序前打印</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名:&quot;</span>&lt;&lt;heroArray[i].name&lt;&lt;<span class="string">&quot;年龄:&quot;</span>&lt;&lt;heroArray[i].age&lt;&lt;<span class="string">&quot;性别:&quot;</span>&lt;&lt;heroArray[i].sex&lt;&lt;endl</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.对数组进行排序，按照年龄进行升序排序</span></span><br><span class="line">    <span class="built_in">bubbleSort</span>(heroArray,len);</span><br><span class="line">    <span class="comment">//4.将排序后的结果排序输出</span></span><br><span class="line">    <span class="built_in">printHero</span>(HeroArray,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h2><ul><li><h6 id="添加联系人：向通讯录中添加新人，信息包括（姓名，性别，年龄，联系电话，家庭住址）最多纪录1000人"><a href="#添加联系人：向通讯录中添加新人，信息包括（姓名，性别，年龄，联系电话，家庭住址）最多纪录1000人" class="headerlink" title="添加联系人：向通讯录中添加新人，信息包括（姓名，性别，年龄，联系电话，家庭住址）最多纪录1000人"></a>添加联系人：向通讯录中添加新人，信息包括（姓名，性别，年龄，联系电话，家庭住址）最多纪录1000人</h6></li><li><h6 id="显示联系人：显示通讯录中所有联系人信息"><a href="#显示联系人：显示通讯录中所有联系人信息" class="headerlink" title="显示联系人：显示通讯录中所有联系人信息"></a>显示联系人：显示通讯录中所有联系人信息</h6></li><li><h6 id="删除联系人：按照姓名进行删除指定联系人"><a href="#删除联系人：按照姓名进行删除指定联系人" class="headerlink" title="删除联系人：按照姓名进行删除指定联系人"></a>删除联系人：按照姓名进行删除指定联系人</h6></li><li><h6 id="查找联系人：按照姓名查看指定联系人信息"><a href="#查找联系人：按照姓名查看指定联系人信息" class="headerlink" title="查找联系人：按照姓名查看指定联系人信息"></a>查找联系人：按照姓名查看指定联系人信息</h6></li><li><h6 id="修改联系人：按照姓名重新修改指定联系人"><a href="#修改联系人：按照姓名重新修改指定联系人" class="headerlink" title="修改联系人：按照姓名重新修改指定联系人"></a>修改联系人：按照姓名重新修改指定联系人</h6></li><li><h6 id="清空联系人：清空通讯录里全部信息"><a href="#清空联系人：清空通讯录里全部信息" class="headerlink" title="清空联系人：清空通讯录里全部信息"></a>清空联系人：清空通讯录里全部信息</h6></li><li><h6 id="退出通讯录：退出当前使用的通讯录"><a href="#退出通讯录：退出当前使用的通讯录" class="headerlink" title="退出通讯录：退出当前使用的通讯录"></a>退出通讯录：退出当前使用的通讯录</h6></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单功能 1.封装函数显示界面  2.在main函数中调用封装好的函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  1,添加联系人  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  2,显示联系人  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  3,删除联系人  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  4,查找联系人  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  5,修改联系人  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  6,清空联系人  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*****  0,退出通讯录  *****&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;************************&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建通讯录结构体变量</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Addressbooks</span> abs;</span><br><span class="line">    <span class="comment">//初始化通讯录中当前人员个数</span></span><br><span class="line">    abs.m_Size=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> select=<span class="number">0</span>;  <span class="comment">//创建用户选择输入的变量</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//展示菜单调用</span></span><br><span class="line">    <span class="built_in">showMenu</span>();</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;select;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//退出功能</span></span><br><span class="line">    <span class="keyword">switch</span>(switch_on)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//添加联系人</span></span><br><span class="line">            <span class="built_in">addPerson</span>(&amp;abs);<span class="comment">//利用地址传递可以在形参中修改实参</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">//显示联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">//删除联系人</span></span><br><span class="line">            <span class="built_in">deletePerson</span>(&amp;abs);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:  <span class="comment">//查找联系人</span></span><br><span class="line">            <span class="built_in">findPerson</span>(&amp;abs);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:  <span class="comment">//修改联系人 </span></span><br><span class="line">            <span class="built_in">modifyPerson</span>(&amp;abs);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:  <span class="comment">//清空联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//退出通讯录</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;欢迎下次使用&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>); <span class="comment">//按下任意键退出</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一，添加联系人功能</span></span><br><span class="line"><span class="number">1.</span>设计联系人结构体：姓名，性别，年龄，联系电话，家庭住址</span><br><span class="line"><span class="number">2.</span>设计通讯录结构体</span><br><span class="line"><span class="number">3.</span>main函数中创建通讯录</span><br><span class="line"><span class="number">4.</span>封装添加联系人函数</span><br><span class="line"><span class="number">5.</span>测试添加联系人功能</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000<span class="comment">//最大人数</span></span></span><br><span class="line"><span class="comment">//设计联系人结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    string m_name;</span><br><span class="line">    <span class="comment">//性别  1.男 2.女</span></span><br><span class="line">    <span class="type">int</span> m_Sex;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> mPhone;</span><br><span class="line">    <span class="comment">//住址</span></span><br><span class="line">    string m_Addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计通讯录结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Addressbooks</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通讯录中保存的联系人数组</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Person</span> personArrray[MAX];</span><br><span class="line">    <span class="comment">//通讯录中当前记录的联系人个数</span></span><br><span class="line">    <span class="type">int</span> m_Size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addPerson</span><span class="params">(<span class="keyword">struct</span> Addressbooks * abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判读通讯录是否已满，如果满了就不在添加</span></span><br><span class="line">    <span class="keyword">if</span>(abs-&gt;m_Size==MAX)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;通讯录已满，无法添加！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//添加具体联系人</span></span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        string name;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入联系人:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        abs-&gt;personArray[abs-&gt;m_Size].m_Name=name;</span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入性别:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;1----男&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;2----女&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> sex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(sex==<span class="number">1</span>||sex==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            abs-&gt;personArray[abs-&gt;m_Size].m_Sex=sex;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入年龄:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> age=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;age;</span><br><span class="line">        abs-&gt;personArray[abs-&gt;m_Size].m_Age=age;</span><br><span class="line">        <span class="comment">//电话</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入联系电话:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string Phone;</span><br><span class="line">        cin&gt;&gt;phone;</span><br><span class="line">        abs-&gt;persomArray[abs-&gt;m_Size].m_Phone=phone;</span><br><span class="line">        <span class="comment">//住址</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入家庭住址:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string address;</span><br><span class="line">        cin&gt;&gt;address;</span><br><span class="line">        abs-&gt;personArray[abs-&gt;m_Size].m_Addr=address;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//更新通讯录人数</span></span><br><span class="line">        abs-&gt;m_Size++;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;添加成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);<span class="comment">//请按任意键继续</span></span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏操作        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二，显示联系人，判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">(Addressbooks * abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断通讯录中人数是否为0，如果为0，提示记录为空</span></span><br><span class="line">    <span class="comment">//如果不为0，显示记录的联系人信息</span></span><br><span class="line">    <span class="keyword">if</span>(abs-&gt;m_Size==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前记录为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;abs-&gt;m_Size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;abs-&gt;personArray[i].m_Name&lt;&lt;<span class="string">&quot;\t&quot;</span>; <span class="comment">//水平制表符，其中8个空格</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;性别：&quot;</span>&lt;&lt;(abs-&gt;personArray[i].m_Sex==<span class="number">1</span>?<span class="string">&quot;男&quot;</span>:<span class="string">&quot;女&quot;</span>)&lt;&lt;<span class="string">&quot;\t&quot;</span>;  <span class="comment">//男女改变显示效果</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;abs-&gt;personArray[i].m_Age&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;电话：&quot;</span>&lt;&lt;abs-&gt;personArray[i].m_Phone&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;住址：&quot;</span>&lt;&lt;abs-&gt;personArray[i].m_Addr&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);<span class="comment">//按任意键继续</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清除屏幕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三，删除联系人</span></span><br><span class="line"><span class="comment">//封装检测联系人是否存在的函数，先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人，因此可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录的位置，不存在返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isExist</span><span class="params">(Addressbooks *abs,string name)</span><span class="comment">//参数一 通讯录，参数二 对比姓名</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;abs-&gt;m_Size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(abs-&gt;personArray[i].m_Name==name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;<span class="comment">//找到了，返回这个人在数组中的下标编号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果遍历结束都没有找到，返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deletePerson</span><span class="params">(Addressbooks * abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要删除的联系人&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    cin&gt;&gt;name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ret==-1  未查到</span></span><br><span class="line">    <span class="comment">//ret!=-1  查到了</span></span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">isExist</span>(abs,name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ret!<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//查到此人进行删除操作</span></span><br><span class="line">        <span class="comment">//需要知道要删除的人在数组中对应的下标，将他之后的数据向前移动，并且让通讯录里人员个数进行一个减一的操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=ret;i&lt;abs-&gt;m_Size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//数据前移动操作</span></span><br><span class="line">            abs-&gt;personArray[i]=abs-&gt;personArray[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        abs-&gt;personArray[i]=abs-&gt;personArray[i+<span class="number">1</span>];</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;删除成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;未查到此人&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//四，查找联系人</span></span><br><span class="line"><span class="comment">//判断用户指定联系人是否存在，如果显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findPerson</span><span class="params">(Addressbooks * abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要查找的联系人&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    cin&gt;&gt;name;</span><br><span class="line">    <span class="comment">//判断指定的联系人是否存在通讯录中</span></span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">isExist</span>(abs,name);</span><br><span class="line">    <span class="keyword">if</span>(ret!=<span class="number">-1</span>)<span class="comment">//找到联系人</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名:&quot;</span>&lt;&lt;abs-&gt;personArray[ret].m_Name&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;性别:&quot;</span>&lt;&lt;abs-&gt;personArray[ret].m_Sex&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;年龄:&quot;</span>&lt;&lt;abs-&gt;personArray[ret].m_Age&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名:&quot;</span>&lt;&lt;abs-&gt;personArray[ret].m_Phone&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名:&quot;</span>&lt;&lt;abs-&gt;personArray[ret].m_Addr&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//未找到联系人</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查无此人&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//任意键按下后  清屏</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//五，修改联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyPerson</span><span class="params">(Addressbooks * abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请您输入要修改的联系人&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    cin&gt;&gt;name;</span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">isExist</span>(abs,name);</span><br><span class="line">    <span class="keyword">if</span>(ret!=<span class="number">-1</span>)<span class="comment">//找到指定联系人</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        string name;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入姓名：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        abs-&gt;personArray[ret].m_Name=name;</span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入性别：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;1---男&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;2---女&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> sex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          cin&gt;&gt;sex;</span><br><span class="line">          <span class="keyword">if</span>(sex==<span class="number">1</span>||sex==<span class="number">2</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//输入正确退出循环输入</span></span><br><span class="line">            abs-&gt;personArray[ret].m_Sex=sex;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入有误，请重新输入&quot;</span>&lt;&lt;endl;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入年龄：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> age=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;age;</span><br><span class="line">        abs-&gt;personArray[ret].m_Age=age;</span><br><span class="line">        <span class="comment">//电话</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入联系电话：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string phone;</span><br><span class="line">        cin&gt;&gt;phone;</span><br><span class="line">        abs-&gt;personArray[ret].m_Phone=phone;</span><br><span class="line">        <span class="comment">//住址</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入家庭住址：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        string address;</span><br><span class="line">        cin&gt;&gt;address;</span><br><span class="line">        abs-&gt;personArray[ret].m_Adde=address;</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;修改成功!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//未找到</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查无此人&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//六，清空联系人</span></span><br><span class="line"><span class="comment">//只需要将通讯录中记录的联系人数量为0，做逻辑清空即可</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanPerson</span><span class="params">(Addressbooks * abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    abs-&gt;m_Size=<span class="number">0</span>;<span class="comment">//将当前记录联系人数量置为0，做逻辑清空操作</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;通讯录已经清空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计立方体类"><a href="#设计立方体类" class="headerlink" title="设计立方体类"></a>设计立方体类</h2><h3 id="求出立方体的面积和体积，分别用全局函数和成员函数判断两个立方体是否相等"><a href="#求出立方体的面积和体积，分别用全局函数和成员函数判断两个立方体是否相等" class="headerlink" title="(求出立方体的面积和体积，分别用全局函数和成员函数判断两个立方体是否相等)"></a>(求出立方体的面积和体积，分别用全局函数和成员函数判断两个立方体是否相等)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建立方体的类</span></span><br><span class="line"><span class="comment">//设计属性和行为</span></span><br><span class="line"><span class="comment">//设计行为 获取立方体的面积和体积</span></span><br><span class="line"><span class="comment">//分别利用全局函数和成员函数 判断两个立方体是否相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cube</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_L;</span><br><span class="line">    <span class="type">int</span> m_W;</span><br><span class="line">    <span class="type">int</span> m_H;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//设置接口</span></span><br><span class="line">    <span class="comment">//设置宽</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setW</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_L=w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取宽</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getW</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_W;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置长</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setL</span><span class="params">(<span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_L=l;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取长</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getL</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_L;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置高</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setL</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_H=h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取高</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getL</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_H;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取立方体的面积</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">caculateS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*m_L*m_W+<span class="number">2</span>*m_W*m_H+<span class="number">2</span>*m_L*m_H;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取立方体的体积</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculateV</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_L*m_W*m_H;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//利用成员函数判断两个立方体是否相等</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameByClass</span><span class="params">(Cube &amp;c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_L==c.<span class="built_in">getL</span>()m_W==c.<span class="built_in">getW</span>()&amp;&amp;m_H==c.<span class="built_in">getH</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用全局函数判断 两个立方体是否相等</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSame</span><span class="params">(Cube &amp;c1,Cube &amp;c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c1.<span class="built_in">getL</span>()==c2.<span class="built_in">getL</span>()&amp;&amp;c1.<span class="built_in">getW</span>()==c2.<span class="built_in">getW</span>()&amp;&amp;c1.<span class="built_in">getH</span>()==c2.<span class="built_in">getH</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建立方体的对象</span></span><br><span class="line">    Cube c1;</span><br><span class="line">    c1.<span class="built_in">setL</span>(<span class="number">10</span>);</span><br><span class="line">    c1.<span class="built_in">setW</span>(<span class="number">10</span>);</span><br><span class="line">    c1.<span class="built_in">steH</span>(<span class="number">10</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;c1的面积为:&quot;</span>&lt;&lt;c1.<span class="built_in">calculateS</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;c1的体积为:&quot;</span>&lt;&lt;c1.<span class="built_in">calculateV</span>()&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建第二个立方体</span></span><br><span class="line">    Cube c2;</span><br><span class="line">    c2.<span class="built_in">setL</span>(<span class="number">10</span>);</span><br><span class="line">    c2.<span class="built_in">setW</span>(<span class="number">10</span>);</span><br><span class="line">    c2.<span class="built_in">steH</span>(<span class="number">15</span>);</span><br><span class="line">    <span class="comment">//利用全局函数判断</span></span><br><span class="line">    <span class="type">bool</span> ret=<span class="built_in">isSame</span>(c1,c2);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;c1和c2是相等的&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;c1和c2不相等&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//利用成员函数判断</span></span><br><span class="line">    <span class="type">bool</span> ret=<span class="built_in">isSame</span>(c1,c2);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;成员函数判断 c1和c2是相等的&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;成员函数判断 c1和c2不相等&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计点和圆的关系"><a href="#设计点和圆的关系" class="headerlink" title="设计点和圆的关系"></a>设计点和圆的关系</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断点到圆心的距离和半径进行比较</span></span><br></pre></td></tr></table></figure><h2 id="多态案例——-计算器类"><a href="#多态案例——-计算器类" class="headerlink" title="多态案例——-计算器类"></a>多态案例——-计算器类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别利用普通或者多态的技术实现计算器</span></span><br><span class="line"><span class="comment">//普通写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">(string oper)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oper==<span class="string">&quot;+&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> m_Num1+m_Num2;</span><br><span class="line">        <span class="keyword">if</span>(oper==<span class="string">&quot;-&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> m_Num1-m_Num2;</span><br><span class="line">        <span class="keyword">if</span>(oper==<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> m_Num1*m_Num2;</span><br><span class="line">        <span class="comment">//如果想扩展新的功能，需要修改源码</span></span><br><span class="line">        <span class="comment">//在真实开发中 提倡 开闭原则：对扩展进行开放，对修改进行关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_Num1;</span><br><span class="line">    <span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> text01</span><br><span class="line">&#123;</span><br><span class="line">    Calculator c;</span><br><span class="line">    c.m_Num1=<span class="number">10</span>;</span><br><span class="line">    c.m_Num2=<span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;c.m_Num1&lt;&lt;<span class="string">&quot;+&quot;</span>&lt;&lt;c.m_Num2&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;c.<span class="built_in">getResult</span>(<span class="string">&quot;+&quot;</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c.m_Num1&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;c.m_Num2&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;c.<span class="built_in">getResult</span>(<span class="string">&quot;-&quot;</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c.m_Num1&lt;&lt;<span class="string">&quot;*&quot;</span>&lt;&lt;c.m_Num2&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;c.<span class="built_in">getResult</span>(<span class="string">&quot;*&quot;</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多态写法实现计算器</span></span><br><span class="line"><span class="comment">//多态好处：</span></span><br><span class="line"><span class="comment">/*1.组织结构清晰</span></span><br><span class="line"><span class="comment">  2.可读性强</span></span><br><span class="line"><span class="comment">  3.对于后期扩展和维护性高，不需要对源码更正</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算器的抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_Num1;</span><br><span class="line">    <span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计加法计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddCalculator</span>:<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Num1+m_Num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设计减法计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCalculator</span>:<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Num1-m_Num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设计乘法计算器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulCalculator</span>:<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Num1*m_Num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//父类的指针或引用指向子类对象</span></span><br><span class="line">    <span class="comment">//加法运算</span></span><br><span class="line">    AbstractCalculator *abc=<span class="keyword">new</span> AddCalculator;<span class="comment">//new AddCalculator相当于创建了一个子类对象</span></span><br><span class="line">    abc-&gt;m_Num1=<span class="number">10</span>;</span><br><span class="line">    abc-&gt;m_Num2=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;abc-&gt;m_Num1&lt;&lt;<span class="string">&quot;+&quot;</span>&lt;&lt;abc-&gt;m_Num2&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;abc-&gt;<span class="built_in">getResult</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//用完后记得销毁</span></span><br><span class="line">    <span class="keyword">delete</span> abc;  <span class="comment">//把堆区数据释放，但指针类型没有变</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//减法运算</span></span><br><span class="line">    abc=<span class="keyword">new</span> SubCalculator;  <span class="comment">//现在还相当于父类指针指向子类对象</span></span><br><span class="line">    abc-&gt;m_Num1=<span class="number">100</span>;</span><br><span class="line">    abc-&gt;m_Num2=<span class="number">100</span>;</span><br><span class="line">    cout&lt;&lt;abc-&gt;m_Num1&lt;&lt;<span class="string">&quot;-&quot;</span>&lt;&lt;abc-&gt;m_Num2&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;abc-&gt;<span class="built_in">getResult</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">delete</span> abc;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//乘法运算</span></span><br><span class="line">    abc=<span class="keyword">new</span> SubCalculator;  </span><br><span class="line">    abc-&gt;m_Num1=<span class="number">100</span>;</span><br><span class="line">    abc-&gt;m_Num2=<span class="number">100</span>;</span><br><span class="line">    cout&lt;&lt;abc-&gt;m_Num1&lt;&lt;<span class="string">&quot;*&quot;</span>&lt;&lt;abc-&gt;m_Num2&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;abc-&gt;<span class="built_in">getResult</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">    <span class="built_in">text02</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态案例——-制作饮品"><a href="#多态案例——-制作饮品" class="headerlink" title="多态案例——-制作饮品"></a>多态案例——-制作饮品</h2><p>大致流程：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p><h6 id="提供抽象制作饮品类，提供子类制作咖啡和茶叶"><a href="#提供抽象制作饮品类，提供子类制作咖啡和茶叶" class="headerlink" title="提供抽象制作饮品类，提供子类制作咖啡和茶叶"></a>提供抽象制作饮品类，提供子类制作咖啡和茶叶</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractDrinking</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//煮水</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Boil</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//冲泡</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Brew</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//倒入杯中</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加入辅料</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//制作饮品</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeDrink</span><span class="params">()</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Boil</span>();</span><br><span class="line">        <span class="built_in">Brew</span>();</span><br><span class="line">        <span class="built_in">PourInCup</span>();</span><br><span class="line">        <span class="built_in">PutSomething</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span>:<span class="keyword">public</span> AbstractDrinking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//煮水</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Boil</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;煮农夫山泉&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//冲泡</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Brew</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;冲泡咖啡&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//倒入杯中</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PourInCup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;倒入杯中&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加入辅料</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PutSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;加入糖和牛奶&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span>:<span class="keyword">public</span> AbstractDrinking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//煮水</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Boil</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;煮矿泉水&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//冲泡</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Brew</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;冲泡茶叶&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//倒入杯中</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PourInCup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;倒入杯中&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加入辅料</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PutSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;加入枸杞&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dowork</span><span class="params">(AbstractDrinking *abs)</span><span class="comment">//AbstractDrinking *abs=new Coffee </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    abs-&gt;<span class="built_in">makeDrink</span>();</span><br><span class="line">    <span class="keyword">delete</span> abs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//制作咖啡</span></span><br><span class="line">    <span class="built_in">dowork</span>(<span class="keyword">new</span> Coffee);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;----------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//制作茶叶</span></span><br><span class="line">    <span class="built_in">dowork</span>(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new创建对象是否调用构造函数和析构函数"><a href="#new创建对象是否调用构造函数和析构函数" class="headerlink" title="new创建对象是否调用构造函数和析构函数"></a>new创建对象是否调用构造函数和析构函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>()&#123;number++;&#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123;number--;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> point::number=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point *ptr; <span class="comment">//指针不会调用构造函数和析构函数，只是定义了一个指针，没有申请内存</span></span><br><span class="line">    point A,B;<span class="comment">//调用构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        point *ptr_point=<span class="keyword">new</span> point[<span class="number">3</span>]; <span class="comment">//调用三次构造函数  使用new创建对象时，申请分配内存调用构造函数</span></span><br><span class="line">        ptr=ptr_point;</span><br><span class="line">    &#125;</span><br><span class="line">    point C;</span><br><span class="line">    <span class="keyword">delete</span>[]ptr;  <span class="comment">//调用析构函数释放内存，3次，因为ptr数组有三个元素</span></span><br><span class="line">    cout&lt;&lt;point::number&lt;&lt;endl;  <span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态案例——-电脑组装"><a href="#多态案例——-电脑组装" class="headerlink" title="多态案例——-电脑组装"></a>多态案例——-电脑组装</h2><h4 id="案例描述："><a href="#案例描述：" class="headerlink" title="案例描述："></a>案例描述：</h4><p>电脑主要组成部件为CPU(用于计算)，显卡(用于显示)，内存条(用于存储)</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如intel厂商和lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组转不同的三台电脑进行工作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象不同零件类</span></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//抽象的计算函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoCard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//抽象的显示函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//抽象的显示函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Computer</span>(CPU *cpu,VideoCard *vc,Memory *mem)</span><br><span class="line">    &#123;</span><br><span class="line">        m_cpu=cpu;</span><br><span class="line">        m_vc=vc;</span><br><span class="line">        m_mem=mem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供一个工作函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//让零件工作起来调用接口</span></span><br><span class="line">        m_cpu-&gt;calculate;</span><br><span class="line">        </span><br><span class="line">        m_vc-&gt;display;</span><br><span class="line">        </span><br><span class="line">        m_mem-&gt;storage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供一个析构函数来释放电脑零件</span></span><br><span class="line">    ~<span class="built_in">Computer</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//释放CPU零件</span></span><br><span class="line">        <span class="keyword">if</span>(m_cpu!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_cpu;</span><br><span class="line">            m_cpu=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放显卡零件</span></span><br><span class="line">        <span class="keyword">if</span>(m_vc!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_vc;</span><br><span class="line">            m_vc=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放内存条零件</span></span><br><span class="line">        <span class="keyword">if</span>(m_mem!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_mem;</span><br><span class="line">            m_mem=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CPU *m_cpu;<span class="comment">//cpu零件指针</span></span><br><span class="line">    VideoCard *m_vc;</span><br><span class="line">    Memory *m_mem;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现具体厂商封装</span></span><br><span class="line"><span class="comment">//Inter厂商</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InterCPU</span>:<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Inter的CPU开始计算了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InterVideoCard</span>:<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Inter的显卡开始显示了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InterMemory</span>:<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Inter的内存条开始存储了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoCPU</span>:<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Lenovo的CPU开始计算了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoVideoCard</span>:<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Lenovo的显卡开始显示了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoMemory</span>:<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Lenovo的内存条开始存储了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//组装不同电脑</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一台电脑零件</span></span><br><span class="line">    CPU *interCpu=<span class="keyword">new</span> InterCPU;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line">    VideoCard *interCard=<span class="keyword">new</span> InterVideoCard;</span><br><span class="line">    Memory *interMem=<span class="keyword">new</span> InterMemory;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第一台电脑开始工作&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//创建第一台电脑</span></span><br><span class="line">    Computer *computer1=<span class="keyword">new</span> <span class="built_in">Computer</span>(interCpu,interCard,interMem);</span><br><span class="line">    computer1-&gt;<span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">delete</span> computer1;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第二台电脑开始工作&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//创建第二台电脑</span></span><br><span class="line">    Computer *computer2=<span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU,<span class="keyword">new</span> LenovoVideoCard,<span class="keyword">new</span> Lenovomemory);</span><br><span class="line">    computer2-&gt;<span class="built_in">work</span>(); </span><br><span class="line">    <span class="keyword">delete</span> computer2;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;第三台电脑开始工作&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//创建第二台电脑</span></span><br><span class="line">    Computer *computer3=<span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU,<span class="keyword">new</span> InterVideoCard,<span class="keyword">new</span> Lenovomemory);</span><br><span class="line">    computer3-&gt;<span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">delete</span> computer3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">text01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/pipi1002/markdown_pic@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20230421_163057.png" alt="屏幕截图_20230421_163057"></p><h2 id="定义一个描述矩形的类Rectangle，包括的数据成员有宽（width）和长（length）：计算矩形周长；计算矩形面积；改变矩形大小"><a href="#定义一个描述矩形的类Rectangle，包括的数据成员有宽（width）和长（length）：计算矩形周长；计算矩形面积；改变矩形大小" class="headerlink" title="定义一个描述矩形的类Rectangle，包括的数据成员有宽（width）和长（length）：计算矩形周长；计算矩形面积；改变矩形大小"></a>定义一个描述矩形的类Rectangle，包括的数据成员有宽（width）和长（length）：计算矩形周长；计算矩形面积；改变矩形大小</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">         <span class="built_in">Rectangle</span>(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">         &#123;  width=a; length=b; &#125;</span><br><span class="line">         <span class="function"><span class="type">int</span> <span class="title">Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         </span>&#123;  <span class="keyword">return</span> width*length;  &#125;</span><br><span class="line">         <span class="function"><span class="type">int</span> <span class="title">Periment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;  <span class="keyword">return</span> <span class="number">2</span>*(width+length);  &#125;</span><br><span class="line">         <span class="function"><span class="type">void</span> <span class="title">Changesize</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"> </span>&#123;  width=a;  length=b;  &#125;</span><br><span class="line">         <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line">       <span class="keyword">private</span>:</span><br><span class="line">         <span class="type">int</span> width,length;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Rectangle::Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;AREA=&quot;</span>&lt;&lt;<span class="built_in">Area</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;PERIMENT=&quot;</span>&lt;&lt;<span class="built_in">Periment</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Rectangle <span class="title">r</span><span class="params">(<span class="number">5</span>,<span class="number">8</span>)</span></span>;</span><br><span class="line">        r.<span class="built_in">Print</span>();</span><br><span class="line">r.<span class="built_in">Changesize</span>(<span class="number">3</span>,<span class="number">9</span>);</span><br><span class="line">r.<span class="built_in">Print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断10-30内的质数"><a href="#判断10-30内的质数" class="headerlink" title="判断10~30内的质数"></a>判断10~30内的质数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//该循环体被用来判断10~30中的质数有哪些  11 13 17 19 23 29</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fun</span><span class="params">(<span class="type">long</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> a = <span class="number">10</span>, b = <span class="number">30</span>, l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> m = a; m &lt;= b;)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fun</span>(m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (l++ % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fun</span><span class="params">(<span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sqrtm = (<span class="type">int</span>)<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= sqrtm; i++)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写程序输入1到100内所有的素数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>,k.flag=<span class="number">1</span>;</span><br><span class="line">    k=<span class="built_in">sqrt</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(in j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;      <span class="comment">//一定要加break跳出内循环，要么在这个if后面加上else &#123;flag=1;&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;<span class="string">&quot;为素数&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个判断素数的函数，并输出100-300之间的全部素数之和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> n)</span></span>; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">100</span>;i&lt;<span class="number">300</span>;i++)</span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">prime</span>(i)) sum+=i;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Sum=&quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span> (n%i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">         <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字的立方和等于该数字本身。例如：153是一个“水仙花数”，因为：153-13-53-33"><a href="#输出所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字的立方和等于该数字本身。例如：153是一个“水仙花数”，因为：153-13-53-33" class="headerlink" title="输出所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字的立方和等于该数字本身。例如：153是一个“水仙花数”，因为：153=13+53+33"></a>输出所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字的立方和等于该数字本身。例如：153是一个“水仙花数”，因为：153=13+53+33</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k,n;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">100</span>;n&lt;<span class="number">1000</span>;n++)</span><br><span class="line"> &#123;</span><br><span class="line">  i=n/<span class="number">100</span>;  <span class="comment">//这里的i为百位数</span></span><br><span class="line">  j=(n-i*<span class="number">100</span>)/<span class="number">10</span>;  <span class="comment">//这里的j为十位数  或者可以写成n%100/10</span></span><br><span class="line">  k=n%<span class="number">10</span>;    <span class="comment">//这里的k为个位数</span></span><br><span class="line">  <span class="keyword">if</span>(n==i*i*i+j*j*j+k*k*k) cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个计算n-的函数，并在主程序中调用该函数，计算1-10的阶乘之和（即S-1！-2！-3！-…-10-）"><a href="#编写一个计算n-的函数，并在主程序中调用该函数，计算1-10的阶乘之和（即S-1！-2！-3！-…-10-）" class="headerlink" title="编写一个计算n!的函数，并在主程序中调用该函数，计算1-10的阶乘之和（即S=1！+2！+3！+…+10!）"></a>编写一个计算n!的函数，并在主程序中调用该函数，计算1-10的阶乘之和（即S=1！+2！+3！+…+10!）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">fac</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> f;</span><br><span class="line"><span class="keyword">if</span> (n&lt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;n&lt;0,data error!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">0</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> f=<span class="built_in">fac</span>(n<span class="number">-1</span>)*n;  <span class="comment">//用嵌套的方法求出每个数字的阶乘</span></span><br><span class="line"><span class="keyword">return</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">s+=<span class="built_in">fac</span>(i);   <span class="comment">//把每个数字的阶乘相加</span></span><br><span class="line">cout&lt;&lt;”s=”&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从键盘输入10个正整数，输出它们中的最大值、最小值和平均值"><a href="#从键盘输入10个正整数，输出它们中的最大值、最小值和平均值" class="headerlink" title="从键盘输入10个正整数，输出它们中的最大值、最小值和平均值"></a>从键盘输入10个正整数，输出它们中的最大值、最小值和平均值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x,max,min,s=<span class="number">0</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;please input 10 number:&quot;</span>;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">max=min=x;   <span class="comment">//这里把最大值或者最小值都看成第一个数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n=<span class="number">1</span>;n&lt;<span class="number">10</span>;n++)</span><br><span class="line">&#123;   cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;max) max=x;</span><br><span class="line"><span class="keyword">if</span> (x&lt;min) min=x;</span><br><span class="line">s+=x;</span><br><span class="line">&#125;</span><br><span class="line">s=s/<span class="number">10</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;max=&quot;</span>&lt;&lt;max&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;min=&quot;</span>&lt;&lt;min&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s=&quot;</span>&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计一个立方体类Box，它能计算并输出立方体的体积和表面积"><a href="#设计一个立方体类Box，它能计算并输出立方体的体积和表面积" class="headerlink" title="设计一个立方体类Box，它能计算并输出立方体的体积和表面积"></a>设计一个立方体类Box，它能计算并输出立方体的体积和表面积</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Box类包含三个私有数据成员a(立方体边长)、volume(体积)和area(表面积)，另有两个构造函数以及seta()(设置立方体边长)、getvolume()(计算体积)、getarea()(计算表面积)和disp()(输出结果)。</span></span><br><span class="line"><span class="comment">本题程序如下：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a;</span><br><span class="line">    <span class="type">float</span> volume;</span><br><span class="line">    <span class="type">float</span> area;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Box</span>()&#123;&#125;</span><br><span class="line">        <span class="built_in">Box</span>(<span class="type">float</span> r)&#123;a=r;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">seta</span><span class="params">(<span class="type">float</span> r)</span></span>&#123;a=r;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">getvolume</span><span class="params">()</span></span>&#123;volume=a*a*a;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">getarea</span><span class="params">()</span></span>&#123;area=<span class="number">6</span>*a*a;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;体积：&quot;</span>&lt;&lt;volume&lt;&lt;<span class="string">&quot;,表面积：&quot;</span>&lt;&lt;area&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">obj1</span><span class="params">(<span class="number">4.5</span>)</span>,obj2</span>;</span><br><span class="line">    obj2.<span class="built_in">seta</span>(<span class="number">6.4</span>);</span><br><span class="line">    obj1.<span class="built_in">getvolume</span>();</span><br><span class="line">    obj1.<span class="built_in">getarea</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;obj1=&gt;&quot;</span>;</span><br><span class="line">    obj1.<span class="built_in">disp</span>();</span><br><span class="line">    obj2.<span class="built_in">getvolume</span>();</span><br><span class="line">    obj2.<span class="built_in">getarea</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;obj2=&gt;&quot;</span>;</span><br><span class="line">    obj2.<span class="built_in">disp</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个程序，设计一个点类Point，求两个点之间的距离"><a href="#编写一个程序，设计一个点类Point，求两个点之间的距离" class="headerlink" title="编写一个程序，设计一个点类Point，求两个点之间的距离"></a>编写一个程序，设计一个点类Point，求两个点之间的距离</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#using namespace std;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> i,<span class="type">int</span> j)&#123;x=i;y=j;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">gety</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">distance</span><span class="params">(Point &amp;x,Point &amp;y)</span>  <span class="comment">//对象引用作为参数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> d;</span><br><span class="line">        d=<span class="built_in">sqrt</span>((p1.<span class="built_in">getx</span>()-p2.<span class="built_in">getx</span>())*(p1.<span class="built_in">getx</span>()-p2.<span class="built_in">getx</span>())+(p1.<span class="built_in">gety</span>()-p2.<span class="built_in">gety</span>())*(p1.<span class="built_in">gety</span>()-p2.<span class="built_in">gety</span>()));</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>)</span>,<span class="title">p2</span><span class="params">(<span class="number">5</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    p1.<span class="built_in">disp</span>(); cout&lt;&lt;<span class="string">&quot;与&quot;</span>; p2.<span class="built_in">disp</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;之间距离=&quot;</span>&lt;&lt;<span class="built_in">distance</span>(p1,p2)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个简单程序，要求："><a href="#编写一个简单程序，要求：" class="headerlink" title="编写一个简单程序，要求："></a><strong>编写一个简单程序，要求：</strong></h2><h3 id="1用循环实现从键盘上输入20个整数并放入数组"><a href="#1用循环实现从键盘上输入20个整数并放入数组" class="headerlink" title="1用循环实现从键盘上输入20个整数并放入数组"></a>1用循环实现从键盘上输入20个整数并放入数组</h3><h3 id="2-求出数组元素的最大值及数组的平均值并输出"><a href="#2-求出数组元素的最大值及数组的平均值并输出" class="headerlink" title="2.求出数组元素的最大值及数组的平均值并输出"></a>2.求出数组元素的最大值及数组的平均值并输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> p[])</span></span>;<span class="comment">//声明求和函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> p[])</span></span>;<span class="comment">//声明求极大值函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> a[<span class="number">20</span>],i=<span class="number">0</span>;<span class="comment">//声明数组</span></span><br><span class="line">   <span class="keyword">while</span>(i&lt;<span class="number">20</span>)<span class="comment">//通过循环从键盘给数组元素赋值</span></span><br><span class="line">   &#123;  cout&lt;&lt;<span class="string">&quot;a[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]=&quot;</span>;</span><br><span class="line">          cin&gt;&gt;a[i];</span><br><span class="line">          i++;</span><br><span class="line">&#125;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;sum ： &quot;</span>&lt;&lt;<span class="built_in">sum</span>(a)&lt;&lt;endl;<span class="comment">//调用求和函数并输出结果</span></span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;max ： &quot;</span>&lt;&lt;<span class="built_in">max</span>(a)&lt;&lt;endl;       <span class="comment">//求极大值函数并输出结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求和函数的实现，形参用数组 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> p[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">   s+=p[i];</span><br><span class="line">   <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求极大值函数的实现，形参用数组 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> p[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> maxv=p[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">   <span class="keyword">if</span>(p[i]&gt;maxv)</span><br><span class="line">           maxv=p[i];</span><br><span class="line">   <span class="keyword">return</span> maxv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写两个函数，分别求两个数的最大公约数和最小公倍数"><a href="#编写两个函数，分别求两个数的最大公约数和最小公倍数" class="headerlink" title="编写两个函数，分别求两个数的最大公约数和最小公倍数"></a>编写两个函数，分别求两个数的最大公约数和最小公倍数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GCD</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span>  <span class="comment">//求最小公倍数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">while</span> (u % v) &#123;</span><br><span class="line">  <span class="type">int</span> t= u % v;</span><br><span class="line">  u = v;</span><br><span class="line">  v = t;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCM</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span>  <span class="comment">//求最大公倍数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> gcd = <span class="built_in">GCD</span> (u, v);</span><br><span class="line"> <span class="keyword">return</span> u * v / gcd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">cout&lt;&lt;”最大公约数为：”&lt;&lt;<span class="built_in">GCD</span>(x,y)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;”最小公倍数为：”&lt;&lt;<span class="built_in">LCM</span>(x,y)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个函数，实现用“冒泡法”对输入的10个整数按由小到大顺序排列"><a href="#编写一个函数，实现用“冒泡法”对输入的10个整数按由小到大顺序排列" class="headerlink" title="编写一个函数，实现用“冒泡法”对输入的10个整数按由小到大顺序排列"></a>编写一个函数，实现用“冒泡法”对输入的10个整数按由小到大顺序排列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span> num[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[j]&gt;num[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp=num[j];</span><br><span class="line">num[j]=num[j+<span class="number">1</span>];</span><br><span class="line">num[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入10个整数：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cin&gt;&gt;num[i];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;排序前：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">5</span>)&lt;&lt;num[i];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="built_in">sort</span>(num);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;排序后：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">5</span>)&lt;&lt;num[i];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-语言程序设计&quot;&gt;&lt;a href=&quot;#C-语言程序设计&quot; class=&quot;headerlink&quot; title=&quot;C++语言程序设计&quot;&gt;&lt;/a&gt;C++语言程序设计&lt;/h1&gt;&lt;h2 id=&quot;五只小猪称体重-在一个数组中找到最大值&quot;&gt;&lt;a href=&quot;#五只小猪称体重-</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>文章</title>
    <link href="https://pipi1002.github.io/2023/01/02/%E6%96%87%E7%AB%A0/"/>
    <id>https://pipi1002.github.io/2023/01/02/%E6%96%87%E7%AB%A0/</id>
    <published>2023-01-02T04:38:42.000Z</published>
    <updated>2023-01-02T05:04:35.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="夕阳"><a href="#夕阳" class="headerlink" title="夕阳"></a>夕阳</h3><p>我们虽然不生活在一起，但是我们拥有同一片天空，我们或许曾同一时间抬头，那我们目光所交汇处便是回忆。</p><p><img src="https://s1.vika.cn/space/2023/01/02/74a659748b6b46c48d116395ededc5e9" alt="mmexport1671530955562"></p><p><img src="https://s1.vika.cn/space/2023/01/02/4784ae9585874a4ca26f3ab803c8a10a" alt="mmexport1671530945556"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;夕阳&quot;&gt;&lt;a href=&quot;#夕阳&quot; class=&quot;headerlink&quot; title=&quot;夕阳&quot;&gt;&lt;/a&gt;夕阳&lt;/h3&gt;&lt;p&gt;我们虽然不生活在一起，但是我们拥有同一片天空，我们或许曾同一时间抬头，那我们目光所交汇处便是回忆。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;htt</summary>
      
    
    
    
    <category term="随想" scheme="https://pipi1002.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>EXAM-NOTE-C语言</title>
    <link href="https://pipi1002.github.io/2022/11/20/EXAM-NOTE-C%E8%AF%AD%E8%A8%80/"/>
    <id>https://pipi1002.github.io/2022/11/20/EXAM-NOTE-C%E8%AF%AD%E8%A8%80/</id>
    <published>2022-11-20T12:44:51.000Z</published>
    <updated>2023-06-26T10:55:05.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-有以下程序-输出的结果为"><a href="#1-有以下程序-输出的结果为" class="headerlink" title="1.有以下程序,输出的结果为"></a>1.有以下程序,输出的结果为</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> p[<span class="number">20</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;,q[]=<span class="string">&quot;abc&quot;</span>,r[]=<span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(p+<span class="built_in">stlen</span>(q),r);<span class="comment">//(p+strlen(q)):意思是多出3(strlen(q))个字符来储存p的前三个字符,strcpy本来是全部覆盖，然后现在从第四个开始覆盖</span></span><br><span class="line">    <span class="comment">//此时数组p内的内容变为&#123;a,b,c,a,b,c,d,e,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0&#125;</span></span><br><span class="line">    <span class="built_in">strcat</span>(p,q);<span class="comment">//数组p内容变为&#123;a,b,c,a,b,c,d,e,a,b,c,\0,\0,\0,\0,\0,\0,\0,\0,\0&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,<span class="built_in">sizeof</span>(p),<span class="built_in">strlen</span>(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[ ] 20 9</li><li>[ ] 9 9</li><li>[x] 20 11</li><li>[ ] 11 11</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcpy会把/0也复制到新的数组中</span></span><br><span class="line"><span class="comment">//strlen会在看到(第一个)/0时停止计数</span></span><br><span class="line">设有</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> str[ ]=<span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line">则执行</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="built_in">strcpy</span>(str,<span class="string">&quot;China&quot;</span>)));</span><br><span class="line">后的输出结果为  <span class="comment">//A</span></span><br></pre></td></tr></table></figure><ul><li>[x] 5</li><li>[ ] 7</li><li>[ ] 12</li><li>[ ] 14</li></ul><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li><p>sizeof:计算数组(变量)所占空间大小,注意，\0也是一个字符——-操作符</p></li><li><p>strlen:求字符串长度，到\0就停止，并且\0不算字符串内容，strlen也不把\0计算到字符串长度中</p><p>例子：</p><ul><li><p>char arr1[]=”abc”;</p><p>char arr2[]={‘a’,’b’,’c’};</p><p>printf(“%d\n”,sizeof(arr1));//4</p><p>printf(“%d\n”,sizeof(arr2));//3</p><p>printf(“%d\n”,strlen(arr1));//3</p><p>printf(“%d\n”,strlen(arr2));//15(随机数)，因为找不到\0,字符串后才有\0</p></li></ul></li><li><p>注意：sizeof求所占空间大小算的是比特位，如果是char类型就×1相当于其中字符个数</p></li><li><p>int arr[]={1,2,3,4}   如果是int类型的就要×4</p><ul><li>sizeof(arr)=4×4=16(bit位)</li></ul></li></ul><h6 id="数组长度的计算方法：-size-sizeof-arr-sizeof-arr-0"><a href="#数组长度的计算方法：-size-sizeof-arr-sizeof-arr-0" class="headerlink" title="数组长度的计算方法： size=sizeof(arr)/sizeof(arr[0])"></a>数组长度的计算方法： size=sizeof(arr)/sizeof(arr[0])</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">已有定义：<span class="type">char</span> a[ ]= ″xyz″,b[ ]=&#123; ′x′, ′y′, ′z′&#125;;</span><br><span class="line"><span class="comment">//所以a的长度为4，因为a后面默认是有\0的；b的长度为3</span></span><br></pre></td></tr></table></figure><h2 id="2-下列程序输出结果是"><a href="#2-下列程序输出结果是" class="headerlink" title="2.下列程序输出结果是"></a>2.下列程序输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> w[][<span class="number">10</span>]=&#123;<span class="string">&quot;ABCD&quot;</span>,<span class="string">&quot;EFGH&quot;</span>,<span class="string">&quot;IJKL&quot;</span>,<span class="string">&quot;MNOP&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,&amp;w[k][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解答：FGHKL，%s指输出字符串，所以从起始位置到此行结束的所有字符都将被输出</p><h2 id="3-下列程序输出结果是"><a href="#3-下列程序输出结果是" class="headerlink" title="3.下列程序输出结果是"></a>3.下列程序输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;str[<span class="number">0</span>],<span class="string">&quot;NEXT&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;str[<span class="number">1</span>]),<span class="string">&quot;OR&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;str[<span class="number">2</span>],<span class="string">&quot;TICE&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> w[][<span class="number">10</span>]=&#123;<span class="string">&quot;ABCD&quot;</span>,<span class="string">&quot;EFGH&quot;</span>,<span class="string">&quot;IJKL&quot;</span>,<span class="string">&quot;MNOP&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,&amp;w[k][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.解答：NOTICE</p><p>注意：数组名通常情况下代表首元素地址（2种情况例外）</p><ul><li>sizeof(数组名)：此时数组名表示整个数组，sizeof(数组名)计算的是整个数组的大小</li><li>&amp;数组名：代表整个数组，&amp;数组名，取出的是整个数组的地址</li><li>strcpy是全部覆盖</li></ul><p>2.解答：FGHKL</p><p>注意：因为输出的是%s的字符串类型，所以会输出头后所有的，一连串输出</p><h2 id="4-以下程序输出结果是"><a href="#4-以下程序输出结果是" class="headerlink" title="4.以下程序输出结果是"></a>4.以下程序输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">30</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(a/<span class="number">3</span>&gt;<span class="number">0</span>)?a/<span class="number">10</span>:a%s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 0</p></li><li><p>[ ] 1</p></li><li><p>[ ] 10</p></li><li><p>[x] 3</p></li><li><p>三目运算符的运算顺序是从右到左，当a/3是真的就输出a/10;当a/3为假那么输出a%3，因为a/3是判断语句不是赋值语句，所以a/3=10，但是a还是30</p></li></ul><h2 id="5-if-a-5-是允许的"><a href="#5-if-a-5-是允许的" class="headerlink" title="5.if(a=5)是允许的"></a>5.if(a=5)是允许的</h2><h2 id="6-以下语句的输出结果是："><a href="#6-以下语句的输出结果是：" class="headerlink" title="6.以下语句的输出结果是："></a>6.以下语句的输出结果是：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char s[10];</span><br><span class="line">s=&quot;abcd&quot;;</span><br><span class="line">printf(&quot;%s\n&quot;,s);</span><br></pre></td></tr></table></figure><ul><li>[ ] 输出abcd</li><li>[ ] 输出a</li><li>[x] 出现编译错误</li><li>[ ] 输出bcd</li></ul><p>注意：C语言中无字符串变量，不能直接用赋值语句对一个数组整体赋值</p><h2 id="7-野指针-写代码时极易出现的错误"><a href="#7-野指针-写代码时极易出现的错误" class="headerlink" title="7.野指针(写代码时极易出现的错误)"></a>7.野指针(写代码时极易出现的错误)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//野指针1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//未初始化的指针变量（非法访问）</span></span><br><span class="line"><span class="type">int</span>* p;<span class="comment">//局部变量不初始化，里面默认放的是一个随机值</span></span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//相当于把20放在了内存中随机的一块地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//当编写程序的时候不知道当时要给指针赋予什么样的值那么 int* p=NULL; (void *)0，把0强制转换成void *xing</span></span><br><span class="line"><span class="comment">//野指针2：指针越界访问</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>* p = a;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*p = i;(*p++=i)</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回局部变量或临时变量的地址</span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">text</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量的存在，只在所在大括号内</span></span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p = <span class="built_in">text</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-以下程序输出结果是："><a href="#8-以下程序输出结果是：" class="headerlink" title="8. 以下程序输出结果是："></a>8. 以下程序输出结果是：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,*p=a,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        a[i]=*p++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] 6</li><li>[ ] 8</li><li>[ ] 4</li><li>[ ] 2</li></ul><p>注意：<em>p++运算等价于 </em>(p++),先运算地址增值再解引用操作，但由于是p++,所以是先赋值后＋1</p><h2 id="9-以下函数的类型是"><a href="#9-以下函数的类型是" class="headerlink" title="9.以下函数的类型是"></a>9.以下函数的类型是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fff</span>(<span class="type">float</span> x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x*x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[ ] 与参数x的类型相同</li><li>[ ] void型</li><li>[x] int型</li><li>[ ] 无法决定</li></ul><p>注意：只有int类型可以省略在函数名前，是否返回值是取决于项目目的，void类型基本不返回返回值，其他类型也可能没有返回值。</p><h2 id="10-下列程序的输出结果是"><a href="#10-下列程序的输出结果是" class="headerlink" title="10.下列程序的输出结果是"></a>10.下列程序的输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fun</span>(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">    c=a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="built_in">fun</span>(<span class="number">2</span>,<span class="number">3</span>,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[ ] 0</li><li>[ ] 1</li><li>[ ] 6</li><li>[x] 无确定值</li></ul><p>注意：变量c进入func函数后并没有输出，也没有返回值，并且处理的数据只能在该函数体范围内有效，所以无法确定输出结果</p><h2 id="11-以下不能正确定义二维数组的选项是"><a href="#11-以下不能正确定义二维数组的选项是" class="headerlink" title="11.以下不能正确定义二维数组的选项是"></a>11.以下不能正确定义二维数组的选项是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>&#125;&#125;;   <span class="comment">//对 </span></span><br><span class="line"><span class="type">int</span> a[][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;    <span class="comment">//对</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;&#125;; <span class="comment">//对</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>][]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;<span class="comment">//错</span></span><br></pre></td></tr></table></figure><ul><li>注意：在定义二维数组时，如果对所有元素赋初值，其第1维的长度可以省略</li><li>二维数组初始化也可以只对每一行或若干个行的前若干元素赋初值</li><li>在二维数组定义中不能省略第二维的长度</li></ul><h2 id="12-以下程序的输出结果为"><a href="#12-以下程序的输出结果为" class="headerlink" title="12.以下程序的输出结果为"></a>12.以下程序的输出结果为</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(aa/<span class="number">3</span>&gt;<span class="number">0</span>)?a/<span class="number">10</span>:a%<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-指针在C语言中的规定"><a href="#13-指针在C语言中的规定" class="headerlink" title="13.指针在C语言中的规定"></a>13.指针在C语言中的规定</h2><p>注意：C语言规定，允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_VALUES 5</span></span><br><span class="line"><span class="type">float</span> values[N_VALUES];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span>(vp=&amp;values[<span class="number">0</span>];vp&lt;&amp;values[N_VALUES];)</span><br><span class="line">&#123;</span><br><span class="line">    *vp++=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_VALUES 5</span></span><br><span class="line"><span class="type">float</span> values[N_VALUES];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span>(vp=&amp;values[N_VALUES<span class="number">-1</span>];vp&gt;=&amp;values[<span class="number">0</span>];vp--)</span><br><span class="line">&#123;</span><br><span class="line">    *vp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相比于第二种写法更建议第一种写法</span></span><br></pre></td></tr></table></figure><h2 id="14-指针与数组"><a href="#14-指针与数组" class="headerlink" title="14.指针与数组"></a>14.指针与数组</h2><ul><li>注意：一般情况下数组名指的就是首元素地址，但是有两个例外：<ul><li>1.&amp;arr- &amp;数组名- 数组名不是首元素的地址-数组名表示的是整个数组-&amp;数组名，取出的是整个数组的地址</li><li>sizeof(arr)-sizeof(数组名)-数组名表示的是整个数组-sizeof(数组名)计算的是整个数组的大小</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,arr);<span class="comment">//1.首元素的地址00EFF8E0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,arr+<span class="number">1</span>);<span class="comment">//00EFF8E4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">0</span>]);<span class="comment">//2.首元素地址00EFF8E0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">0</span>]+<span class="number">1</span>);<span class="comment">//00EFF8E4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr);<span class="comment">//全部元素地址，虽然打印出来和1,2相同为00EFF8E0，但意义不同</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr+<span class="number">1</span>);<span class="comment">//00EFF908(与00EFF8E0相差40，因为跳过一整个数组地址)</span></span><br></pre></td></tr></table></figure><h2 id="15-以下函数有几个实参"><a href="#15-以下函数有几个实参" class="headerlink" title="15.以下函数有几个实参"></a>15.以下函数有几个实参</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exece</span>((v1,v2),(v3,v4),v5,v6)</span><br></pre></td></tr></table></figure><p>注意：(v1,v2)和(v3,v4)是两个逗号表达式，结果分别为v2,v4所以一共有4个实参</p><h2 id="16-栈，堆"><a href="#16-栈，堆" class="headerlink" title="16.栈，堆"></a>16.栈，堆</h2><ul><li>栈上保存局部变量和函数形参</li><li>堆上保存全局变量</li></ul><h2 id="17-下列代码打印出的结果为："><a href="#17-下列代码打印出的结果为：" class="headerlink" title="17.下列代码打印出的结果为："></a>17.下列代码打印出的结果为：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    <span class="type">short</span> *p=(<span class="type">short</span>*)arr;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(p+i)=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：将数组arr的首元素地址强制转换为short类型（short类型为2个字节），所以（*p+i）赋值给了数组元素中1，2的这8个字节（先赋值元素1的前两个字节，后赋值1的后两个字节，元素2同理）</p><ul><li>[ ] 1 2 3 4 5</li><li>[x] 0 0 3 4 5</li><li>[ ] 0 0 0 0 5</li><li>[ ] 1 0 0 0 0</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>×<span class="number">11223344</span>;</span><br><span class="line">    <span class="type">char</span> *pc=(<span class="type">char</span>*)&amp;a;</span><br><span class="line">    *pc=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>内存块的存放方法：倒着存放44 33 22 11一共4个字节（44，33，22，11分别占位一个字节）,但是打印时要复原地址顺序</li><li><p>char*只能访问一个字节</p></li><li><p>[ ] 00223344</p></li><li>[ ] 0</li><li>[x] 11223300</li><li>[ ] 112233</li></ul><h2 id="18-下列代码打印出来的结果是"><a href="#18-下列代码打印出来的结果是" class="headerlink" title="18.下列代码打印出来的结果是"></a>18.下列代码打印出来的结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> i;<span class="comment">//全局变量未初始化默认初始化为0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="built_in">sizeof</span>(i))<span class="comment">//sizeof-计算变量/类型所占内存的大小，恒&gt;0(不可能返回负数),为无符号数，一个整数和无符号数进行运算（比较大小，或者加减乘除）的时候，会把这个整数转换为无符号数，再进行计算。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&lt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：-1：10000000000000000000000000000001  源码</p><p>​                   11111111111111111111111111111110  反码</p><p>​                   11111111111111111111111111111111  补码</p><ul><li>[x] 大于</li><li>[ ] 小于</li></ul><h2 id="19-正确的执行结果是"><a href="#19-正确的执行结果是" class="headerlink" title="19.正确的执行结果是"></a>19.正确的执行结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i++);</span><br></pre></td></tr></table></figure><ul><li>[x] 程序陷入死循环</li><li>[ ] 4</li><li>[ ] 2</li><li>[ ] 3</li></ul><p>注意：while();这是一个没有执行语句的while循环：；的位置</p><h2 id="20-以下程序的输出结果是"><a href="#20-以下程序的输出结果是" class="headerlink" title="20.以下程序的输出结果是"></a>20.以下程序的输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123; <span class="type">int</span>  i=<span class="number">010</span> , j = <span class="number">10</span>;  <span class="comment">//010是八进制数，十进制数为8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,+ +i , j - -); &#125;  <span class="comment">//9，10</span></span><br><span class="line"><span class="comment">//八进制的整数都是以0开头，十六进制的整数以0x开头，在C语言中只有十进制数有负数</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c=<span class="string">&#x27;\72&#x27;</span>;</span><br><span class="line"><span class="comment">//其中、72代表一个字符，72是八进制数，代表ASCII码值的字符&quot;:&quot;</span></span><br></pre></td></tr></table></figure><h2 id="21-以下程序的输出结果是"><a href="#21-以下程序的输出结果是" class="headerlink" title="21.以下程序的输出结果是"></a>21.以下程序的输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123; <span class="type">int</span>  a=<span class="number">4</span>,b=<span class="number">5</span>,c=<span class="number">0</span>,d;</span><br><span class="line">d=!a&amp;&amp;!b||!c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);</span><br><span class="line">&#125;  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li><p>常用的运算符优先级(由高到低)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">!     ++     --</span><br><span class="line"></span><br><span class="line">×     /       %(要求运算时必须为整形)</span><br><span class="line"></span><br><span class="line">+     -</span><br><span class="line"></span><br><span class="line">&lt;&lt;     &gt;&gt;     左移和右移运算符</span><br><span class="line"></span><br><span class="line">＞   ＜     ≥      ≤</span><br><span class="line"></span><br><span class="line">==   !=</span><br><span class="line"></span><br><span class="line">&amp;&amp;</span><br><span class="line"></span><br><span class="line">||</span><br><span class="line"></span><br><span class="line">?:</span><br><span class="line"></span><br><span class="line">+=   -=   *=    </span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line">,</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设有语句<span class="type">int</span>  a=<span class="number">3</span>;则执行了语句a+=a-=a*a;后，变量a的值是 <span class="number">-12</span><span class="comment">//+=和-=的运算按顺序从右向左</span></span><br></pre></td></tr></table></figure><h2 id="22-下列程序的运行结果是"><a href="#22-下列程序的运行结果是" class="headerlink" title="22.下列程序的运行结果是"></a>22.下列程序的运行结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="type">int</span> *k;</span><br><span class="line">   k=a; a=b; b=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;  <span class="type">int</span> a=<span class="number">3</span>, b=<span class="number">6</span>, *x=&amp;a, *y=&amp;b;</span><br><span class="line">   <span class="built_in">fun</span>(x,y);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, a, b);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><ul><li><p>结果是： 3    6</p></li><li><h5 id="形参都是值传递，但是这个值是指针的话，是可以改变指针指向内容的值，即实参的值。但是要弄清两个概念：指针和指针指向的数据。这个例子中形参的值是实参的地址，并不是实参的值，所以形参的值的改变只是指针的改变，即指向数据的地址改变，并不是指针指向数据的改变。"><a href="#形参都是值传递，但是这个值是指针的话，是可以改变指针指向内容的值，即实参的值。但是要弄清两个概念：指针和指针指向的数据。这个例子中形参的值是实参的地址，并不是实参的值，所以形参的值的改变只是指针的改变，即指向数据的地址改变，并不是指针指向数据的改变。" class="headerlink" title="形参都是值传递，但是这个值是指针的话，是可以改变指针指向内容的值，即实参的值。但是要弄清两个概念：指针和指针指向的数据。这个例子中形参的值是实参的地址，并不是实参的值，所以形参的值的改变只是指针的改变，即指向数据的地址改变，并不是指针指向数据的改变。"></a>形参都是值传递，但是这个值是指针的话，是可以改变指针指向内容的值，即实参的值。但是要弄清两个概念：指针和指针指向的数据。这个例子中形参的值是实参的地址，并不是实参的值，所以形参的值的改变只是指针的改变，即指向数据的地址改变，并不是指针指向数据的改变。</h5></li></ul><h2 id="23-执行下面程序中的输出语句后，变量-a-的值为-逗号表达式"><a href="#23-执行下面程序中的输出语句后，变量-a-的值为-逗号表达式" class="headerlink" title="23.执行下面程序中的输出语句后，变量 a 的值为(逗号表达式)"></a>23.执行下面程序中的输出语句后，变量 a 的值为(逗号表达式)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span> ( ) </span><br><span class="line">&#123;  <span class="type">int</span>  a ;  <span class="built_in">printf</span> ( “ %d \n ”,  ( a = <span class="number">3</span> * <span class="number">5</span> ,  a * <span class="number">4</span> ,  a + <span class="number">5</span> ) ) ;  &#125;  <span class="comment">//a=15</span></span><br></pre></td></tr></table></figure><ul><li>x=表达式1，表达式2，表达式3；</li></ul><p>因为逗号表达式是优先级最低的表达式，赋值表达式的优先级高，所以会把表达式1的值直接赋值给x</p><ul><li>x=(表达式1，表达式2，表达式3)；</li></ul><p>括号里的先执行，逗号表达式是左结合性，所以会从左往右依次执行，最后再把表达式3的值赋给x</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>上面的题是求变量a的值，如果上面的例题变为，求逗号表达式a=2×6，a×3，a＋5的值</p><p>逗号表达式的结果是整个表达式执行完最后的一个值</p><h5 id="可以把这个式子看成x-a-2×6，a×3，a-5-a-2×6-12，这时表达式的式子为12；a×3并不是一个赋值语句，表达式的值还是12；最后x-a-5-12-5-17-该表达式为17"><a href="#可以把这个式子看成x-a-2×6，a×3，a-5-a-2×6-12，这时表达式的式子为12；a×3并不是一个赋值语句，表达式的值还是12；最后x-a-5-12-5-17-该表达式为17" class="headerlink" title="可以把这个式子看成x=(a=2×6，a×3，a+5)    a=2×6=12，这时表达式的式子为12；a×3并不是一个赋值语句，表达式的值还是12；最后x=(a+5)=12+5=17;该表达式为17"></a>可以把这个式子看成x=(a=2×6，a×3，a+5)    a=2×6=12，这时表达式的式子为12；a×3并不是一个赋值语句，表达式的值还是12；最后x=(a+5)=12+5=17;该表达式为17</h5><h6 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">func</span>((exp1,exp2),(exp3,exp4,exp5))  <span class="comment">//2个实参</span></span><br></pre></td></tr></table></figure><p>上述函数调用语句中有几个实参？   2个</p><h2 id="24-以下程序的输出结果是"><a href="#24-以下程序的输出结果是" class="headerlink" title="24.以下程序的输出结果是"></a>24.以下程序的输出结果是</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="literal">NULL</span>); &#125;  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h2 id="25-C语言中的定义问题"><a href="#25-C语言中的定义问题" class="headerlink" title="25.C语言中的定义问题"></a>25.C语言中的定义问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.C语言的基本单位位是函数</span><br><span class="line">2.在宏定义 #define PI 3.14159中，用宏名PI代替是字符串</span><br><span class="line">3.C语言规定，程序中各函数之间既允许直接递归调用也允许间接递归调用</span><br><span class="line">4.指针的算数运算(p为指针变量，px为另一个指针变量)(两个基本类型相同的指针变量不能进行加法运算)</span><br><span class="line">  +    p+n     指针向地址大的方向移动n给数据</span><br><span class="line">  -    p-n     指针向地址小的方向移动n个数据</span><br><span class="line">  ++   p++或++p  指针向地址大的方向移动一个数据</span><br><span class="line">  --   p--或--p  指针向地址小的方向移动一个数据</span><br><span class="line">  -    p-px    注意:两个指针相隔元素的个数</span><br><span class="line">5.C语言程序的三种基本结构是顺序结构、选择结构和循环结构</span><br><span class="line">6.在C语言的条件判断语句中可用任意的表达式来决定分支的流程</span><br><span class="line">7.在C语言中数字029是一个非法数</span><br></pre></td></tr></table></figure><h2 id="26-或逻辑短路和与逻辑短路"><a href="#26-或逻辑短路和与逻辑短路" class="headerlink" title="26.或逻辑短路和与逻辑短路"></a>26.或逻辑短路和与逻辑短路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">设 a=<span class="number">5</span>, b=<span class="number">6</span>, c=<span class="number">7</span>, d=<span class="number">8</span>, m=<span class="number">2</span>, n=<span class="number">2</span>, 执行</span><br><span class="line">(m=a&gt;b)&amp;&amp;(n=c&gt;d)</span><br><span class="line">后n的值为  <span class="comment">//BBB</span></span><br><span class="line"><span class="comment">//短路问题的结论”或(||)“逻辑前面为1，”与(&amp;&amp;)”逻辑前面为0就会短路</span></span><br><span class="line">    <span class="number">1.</span>或逻辑短路</span><br><span class="line">   <span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">6</span>,c=<span class="number">7</span>,d=<span class="number">8</span>,m=<span class="number">2</span>,n=<span class="number">2</span>;</span><br><span class="line">    (m=a&lt;b)||(n=c&gt;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t%d&quot;</span>,m,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//的结果为1,2,因为a&lt;b,m=1,这个或逻辑就被“短路”掉了,后面的语句就没有执行，所以n还是等于原来的2.||只要有一个为1，结果就为1.因此短路，并且不计算(n=c&gt;d)</span></span><br><span class="line">    <span class="number">2.</span>与逻辑短路</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">6</span>,c=<span class="number">7</span>,d=<span class="number">8</span>,m=<span class="number">2</span>,n=<span class="number">2</span>;</span><br><span class="line">        (m=a&gt;b)&amp;&amp;(n=c&gt;d);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t%d&quot;</span>,m,n);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果为0，2，因为a&gt;b为0，m=0,整个“与”逻辑就判断为”假“所以后面的“n=c&gt;d”就被忽略掉了，所以n还是等于原来的2</span></span><br><span class="line"><span class="comment">//另外：标准的逻辑与(|)与逻辑或(&amp;),无论第一个表达式为真还是假都计算第二个表达式</span></span><br></pre></td></tr></table></figure><ul><li>[ ] 1</li><li>[x] 2</li><li>[ ] 3</li><li>[ ] 4</li></ul><h2 id="27-隐式转换问题"><a href="#27-隐式转换问题" class="headerlink" title="27.隐式转换问题"></a>27.隐式转换问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若有定义：<span class="type">int</span> a=<span class="number">8</span>，b=<span class="number">5</span>，C；，执行语句C=a/b+<span class="number">0.4</span>;后，c的值为<span class="comment">//B</span></span><br></pre></td></tr></table></figure><ul><li>[ ] 1.4</li><li>[x] 1</li><li>[ ] 2.0</li><li>[ ] 2</li></ul><h6 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h6><p>在使用赋值运算符的时候，当赋值号右边数据类型和左边数据类型不相同时，系统将自动将赋值号右边数据转换成与左边数据相同的数据类型，然后再赋值（这里不是四舍五入，而是取整操作）</p><h2 id="28-固定位宽问题"><a href="#28-固定位宽问题" class="headerlink" title="28.固定位宽问题"></a>28.固定位宽问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以下程序段的输出结果是__C___。</span><br><span class="line"><span class="type">int</span>  a=<span class="number">1234</span>；</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d\n&quot;</span>,a);  <span class="comment">//1234</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,<span class="number">1</span>);  <span class="comment">//输出_1(_代表空格)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,<span class="number">102</span>);  <span class="comment">//输出102</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,<span class="number">12.23</span>);  <span class="comment">//输出12(强制类型转换，即取整数部分)</span></span><br></pre></td></tr></table></figure><ul><li>[ ] 12</li><li>[ ] 34</li><li>[x] 1234</li><li>[ ] 错误</li></ul><h2 id="29-不同类型变量进行运算规则"><a href="#29-不同类型变量进行运算规则" class="headerlink" title="29.不同类型变量进行运算规则"></a>29.不同类型变量进行运算规则</h2><h6 id="系统有默认的转化规则，就是从精度低的转化为精度高的，避免计算时精度的丢失"><a href="#系统有默认的转化规则，就是从精度低的转化为精度高的，避免计算时精度的丢失" class="headerlink" title="系统有默认的转化规则，就是从精度低的转化为精度高的，避免计算时精度的丢失"></a>系统有默认的转化规则，就是从精度低的转化为精度高的，避免计算时精度的丢失</h6><p>具体转化规则如下：</p><p>char—-&gt;short—-&gt;int—-&gt;unsigned(无符号数)—-&gt;long—-&gt;unsigned long—-&gt;float—-&gt;double</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设有整型变量a，单精度型变量f，双精度型变量x，则表达式a+’b’+x*f值的类型为  </span><br></pre></td></tr></table></figure><ul><li>[ ] int</li><li>[ ] float</li><li>[x] double</li><li>[ ] 不能确定</li></ul><h2 id="30-和-的运算"><a href="#30-和-的运算" class="headerlink" title="30.%和/的运算"></a>30.%和/的运算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语句<span class="keyword">if</span>(<span class="number">3</span>/<span class="number">4</span>&gt;<span class="number">1</span>/<span class="number">2</span>) a=<span class="number">1</span>; <span class="keyword">else</span> a=<span class="number">0</span>;执行该语句后，a的值是   <span class="comment">//0</span></span><br><span class="line">    <span class="comment">//在C语言中3/4 (1/2)等于0;3%4 (1%2)等于3 (1)</span></span><br></pre></td></tr></table></figure><h2 id="31-合法实性常数的判断规则"><a href="#31-合法实性常数的判断规则" class="headerlink" title="31.合法实性常数的判断规则"></a>31.合法实性常数的判断规则</h2><p>实型常量又称实数或浮点数，在C语言中可以用两种形式来表示一个实型常量1.小数形式2.指数形式</p><p>在C语言中，以“e”或E后跟一个整数来代表以十为底的幂数。其一般形式是aEn，其中a为十进制数，n为十进制整数</p><h6 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h6><p>C语言规定字母e或E之前必须要有数字，且e或E后面的数只能是整数</p><figure class="highlight c++"><figcaption><span>以下选项中合法的实型常数是</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以下选项中合法的实型常数是 <span class="comment">//3</span></span><br><span class="line">    <span class="number">1.</span>  <span class="number">5E2</span><span class="number">.0</span></span><br><span class="line">    <span class="number">2.</span>  E<span class="number">-3</span></span><br><span class="line">    <span class="number">3.</span>  <span class="number">2E0</span></span><br><span class="line">    <span class="number">4.</span>  <span class="number">1.3</span>E</span><br></pre></td></tr></table></figure><h2 id="32"><a href="#32" class="headerlink" title="32."></a>32.</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-有以下程序-输出的结果为&quot;&gt;&lt;a href=&quot;#1-有以下程序-输出的结果为&quot; class=&quot;headerlink&quot; title=&quot;1.有以下程序,输出的结果为&quot;&gt;&lt;/a&gt;1.有以下程序,输出的结果为&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pipi1002.github.io/2022/11/20/hello-world/"/>
    <id>https://pipi1002.github.io/2022/11/20/hello-world/</id>
    <published>2022-11-20T11:41:33.417Z</published>
    <updated>2023-02-23T02:45:51.818Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h6 id="大学生活是人生不可磨灭的记忆，你的每一次尝试，每一声叹息，每一次牵手，都在大学四年的日子里沉淀为永恒。-大学是我们每一个人梦想的殿堂，为了来到这个殿堂我们经历了风风雨雨。-既然跨进了这道门槛，那么就让我们在这梦想的殿堂里尽情的挥洒个性吧。-大学不是幻想，不是梦想，更不是妄想，而是我们伟大的理想。-只要我们为之奋斗，为之拼搏。-总有一天我们会满载而归的-那时你会听到枫叶流舟，你会看到金菊在笑，你会闻到硕果飘香，因为你到了收获的季节-大学赐予我一双想飞的翅膀我可以借着它的力量去实现自己理想。-我要在今后的生活里积蓄更多的能量，给自己加油，为自己喝彩，相信蝴蝶破茧而出的将会是人生全程-描写大学生活的文章：大学生活的感受-大学生活过去了一个学期了，在那逝去的半年时光里，初步认识到大学生活的作为。"><a href="#大学生活是人生不可磨灭的记忆，你的每一次尝试，每一声叹息，每一次牵手，都在大学四年的日子里沉淀为永恒。-大学是我们每一个人梦想的殿堂，为了来到这个殿堂我们经历了风风雨雨。-既然跨进了这道门槛，那么就让我们在这梦想的殿堂里尽情的挥洒个性吧。-大学不是幻想，不是梦想，更不是妄想，而是我们伟大的理想。-只要我们为之奋斗，为之拼搏。-总有一天我们会满载而归的-那时你会听到枫叶流舟，你会看到金菊在笑，你会闻到硕果飘香，因为你到了收获的季节-大学赐予我一双想飞的翅膀我可以借着它的力量去实现自己理想。-我要在今后的生活里积蓄更多的能量，给自己加油，为自己喝彩，相信蝴蝶破茧而出的将会是人生全程-描写大学生活的文章：大学生活的感受-大学生活过去了一个学期了，在那逝去的半年时光里，初步认识到大学生活的作为。" class="headerlink" title="大学生活是人生不可磨灭的记忆，你的每一次尝试，每一声叹息，每一次牵手，都在大学四年的日子里沉淀为永恒。 大学是我们每一个人梦想的殿堂，为了来到这个殿堂我们经历了风风雨雨。 既然跨进了这道门槛，那么就让我们在这梦想的殿堂里尽情的挥洒个性吧。 大学不是幻想，不是梦想，更不是妄想，而是我们伟大的理想。 只要我们为之奋斗，为之拼搏。 总有一天我们会满载而归的!那时你会听到枫叶流舟，你会看到金菊在笑，你会闻到硕果飘香，因为你到了收获的季节 大学赐予我一双想飞的翅膀我可以借着它的力量去实现自己理想。 我要在今后的生活里积蓄更多的能量，给自己加油，为自己喝彩，相信蝴蝶破茧而出的将会是人生全程 描写大学生活的文章：大学生活的感受 大学生活过去了一个学期了，在那逝去的半年时光里，初步认识到大学生活的作为。"></a>大学生活是人生不可磨灭的记忆，你的每一次尝试，每一声叹息，每一次牵手，都在大学四年的日子里沉淀为永恒。 大学是我们每一个人梦想的殿堂，为了来到这个殿堂我们经历了风风雨雨。 既然跨进了这道门槛，那么就让我们在这梦想的殿堂里尽情的挥洒个性吧。 大学不是幻想，不是梦想，更不是妄想，而是我们伟大的理想。 只要我们为之奋斗，为之拼搏。 总有一天我们会满载而归的!那时你会听到枫叶流舟，你会看到金菊在笑，你会闻到硕果飘香，因为你到了收获的季节 大学赐予我一双想飞的翅膀我可以借着它的力量去实现自己理想。 我要在今后的生活里积蓄更多的能量，给自己加油，为自己喝彩，相信蝴蝶破茧而出的将会是人生全程 描写大学生活的文章：大学生活的感受 大学生活过去了一个学期了，在那逝去的半年时光里，初步认识到大学生活的作为。</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://pipi1002.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://pipi1002.github.io/2022/11/16/HTML/"/>
    <id>https://pipi1002.github.io/2022/11/16/HTML/</id>
    <published>2022-11-16T13:26:33.000Z</published>
    <updated>2023-01-02T04:31:40.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vscode前端需要安装的插件"><a href="#1-vscode前端需要安装的插件" class="headerlink" title="1.vscode前端需要安装的插件"></a>1.vscode前端需要安装的插件</h1><ul><li><p>Auto Rename Tag 自动将结尾标签进行更改</p></li><li><p>HTML CSS Support 在html代码中支持css提示</p></li><li><p>HTML Snippets 自动生成html代码，专门针对html代码格式</p></li><li><p>image preview 在代码前预览图片的缩略图</p></li><li><p>IntelliSense for CSS class names in HTML 在html中提出css中的class名</p></li><li><p>Live Sever 将vscode作为一台服务器，让浏览器进行访问，实时更新数据</p></li><li><p>open in browser 可以将网页在不同浏览器打开，需要更新页面数据时需要刷新页面</p></li></ul><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><ul><li><p>用来组织网页中的文本，不同的文本可以使用不同的文本标签</p><h5 id="标题标签h"><a href="#标题标签h" class="headerlink" title="标题标签h"></a>标题标签h</h5><p>h1~h6用来组织标题文本，数字越大字号越小，文本变粗，独占一行默认标签上下有间距margin</p><ul><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="段落标签p"><a href="#段落标签p" class="headerlink" title="段落标签p"></a>段落标签p</h5><ul><li><p>用来组织段落文本，一个段落就是一个p标签</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">文本</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>p标签不能嵌套</li><li>默认上下有间距margin</li><li>独占一行</li></ul></li></ul><h5 id="span标签，用来组织简短文本，或提示性信息"><a href="#span标签，用来组织简短文本，或提示性信息" class="headerlink" title="span标签，用来组织简短文本，或提示性信息"></a>span标签，用来组织简短文本，或提示性信息</h5><ul><li><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文本<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>span可以同行显示</p><h5 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h5><ul><li><h5 id="提供了特殊用途，可以搭配表单元素一起使用，控制表单元素"><a href="#提供了特殊用途，可以搭配表单元素一起使用，控制表单元素" class="headerlink" title="提供了特殊用途，可以搭配表单元素一起使用，控制表单元素"></a>提供了特殊用途，可以搭配表单元素一起使用，控制表单元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>文本<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：可以同行显示          </p></li></ul></li></ul><h5 id="b-strong标签"><a href="#b-strong标签" class="headerlink" title="b/strong标签"></a>b/strong标签</h5><ul><li><p>用来进行文本加粗处理</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>推荐使用strong</p></li></ul><h5 id="i-em标签"><a href="#i-em标签" class="headerlink" title="i/em标签"></a>i/em标签</h5><ul><li><p>用来进行文本斜体处理</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>推荐使用i标签</li></ul></li></ul><h5 id="换行br标签"><a href="#换行br标签" class="headerlink" title="换行br标签"></a>换行br标签</h5><ul><li><p>用于换行，需要换几行就使用几个br标签</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="分割线hr标签"><a href="#分割线hr标签" class="headerlink" title="分割线hr标签"></a>分割线hr标签</h5><ul><li><p>在页面上加一条直线</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><ul><li><p>用来连接图片</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;需要连接图片的路径&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片加载成功时显示的图片&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败时显示的解释说明文字&quot;</span> <span class="attr">width:</span>&quot;<span class="attr">设置图片的宽度</span>&quot; <span class="attr">heigth:</span>&quot;<span class="attr">设置图片的高度</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>绝对路径：是指目标文件在目录的具体位置</p><p>在开发中指https或者http开头的路径，或者磁盘盘符路径</p></li><li><p>相对路径：是以某个文件为参考找到目标文件的路径</p><p>在开发中，是以当前文件出发，找到目标文件的路径</p></li><li><p>注意：返回上一级 ../</p></li><li><p>宽度和高度只设置一个时等比例缩放，如果都设置图片可能被拉伸，可能会变形</p></li></ul></li></ul><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><ul><li><p>用于网页跳转</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接需要跳转到的网页路径&quot;</span> <span class="attr">target</span>=<span class="string">&quot;设置新网页的打开方式&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>href：可以是本地路径，也可以是网络路径（必须包含http或https）———推荐使用相对路径</li><li>target：控制新打开的网页的打开方式,_self 在原窗口打开网页,_blank 新开窗口打开网页</li></ul></li><li><p>注意：</p><ul><li><p>href=””或者href=”#”:代表刷新页面</p></li><li><p>锚点：以#id名可以指定跳转到指定位置 href=”#id名”</p></li><li><p>id是唯一的，一个网页中不能出现同名的id</p><p>id命名规则：</p><p>​      是以数字，字母，下划线_，和短横线-构成</p><p>​      不能以数字开头，不能包含特殊符号</p><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">table：代表了一个表格，默认没有边框</span><br><span class="line">        tr:代表的就是行，需要几行就是几个tr,可以设置高度height，会影响整行高度，不能设置宽度width</span><br><span class="line">           align在tr上设置，设置的是该单元格中内容的对齐方式</span><br><span class="line">           bgcolor：设置该行背景颜色</span><br><span class="line">        td：代表的就是列，需要几列就是几个td，可以设置宽度width，会影响整列宽度，不能设置高度height</span><br><span class="line">           align在td上设置，设置的是该单元格中内容的对其方式</span><br><span class="line">           bgcolor：设置该列背景颜色</span><br><span class="line">        border：设置表格的边框</span><br><span class="line">        width：设置表格的宽度</span><br><span class="line">        height：设置表格的高度</span><br><span class="line">        align：设置表格在页面中的对应方式 left左对齐，right右对齐，center居中对齐</span><br><span class="line">        bgcolor：设置的是背景颜色  颜色单词，#十六进制的值</span><br><span class="line">        cellspacing：设置单元格间的间距</span><br><span class="line">        cellpadding： 设置单元格边框到内容的距离</span><br></pre></td></tr></table></figure><ul><li><p>[ ] border:设置表格边框</p></li><li><p>[ ] align：设置对齐方式  </p></li><li><p>left</p></li><li><p>right</p></li><li><p>center</p></li><li><p>注意：table标签设置align控制表格在页面中的对齐方式，tr和td设置align控制的是</p><p>​           单元格的内容在单元格的对齐方式</p><ul><li><p>bgcolor：背景颜色    优先级：  td&gt;tr&gt;table</p></li><li><p>cellspacing:  设置单元格间的间距  </p></li><li><p>cellpadding:  设置单元格边框到内容的距离                          </p></li></ul></li></ul></li></ul></li></ul></li></ul><ul><li><p>注意：</p><p>1.th标签代表表头，默认会进行加粗，文本居中显示</p><p>2.表格的基本结构，table里面只能放tr，tr里面只能放th或td</p><p>3.表格是可以相互嵌套的，注意里面的表格需要放在外面表格的单元格之中，不能破坏外面表格结构</p><h5 id="单元格合并："><a href="#单元格合并：" class="headerlink" title="单元格合并："></a>单元格合并：</h5><ul><li>rowspan：跨行合并，垂直方向上进行合并</li><li>colspan：  水平合并，水平方向上进行合并</li></ul></li></ul><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul><li>登录注册等需要进行数据交互的标签</li></ul><h4 id="普通输入框"><a href="#普通输入框" class="headerlink" title="普通输入框"></a>普通输入框</h4><ul><li><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;文本框中显示的提示信息&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置文本框中默认值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h4><ul><li><h5 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;passworld&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>输入的内容是不可见的</li></ul></li></ul><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><ul><li><h5 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男 <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>&gt;</span>女 <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：</li><li>单选框需要设置相同的name值进行绑定</li><li>label的特殊用法：通过form属性指定对应的表单元素的id，就可以通过点击label中的内容控制对应的表单元素获取焦点</li></ul></li></ul><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><ul><li><h5 id="语法：-3"><a href="#语法：-3" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>LOL</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>王者</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>开心消消乐</span><br></pre></td></tr></table></figure><p>注意：checke可以控制单选框或者多选框默认选中</p></li></ul><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><ul><li><h5 id="语法：-4"><a href="#语法：-4" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">multiple</span>&gt;</span>身份证<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>驾驶证<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>学生证<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：下拉列表默认显示第一个选项，可以在option上设置select属性，控制默认显示的选项</p><p>默认下拉列表只能选中一个选项，可以在select标签上设置multiple属性控制多选</p></li></ul><h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h4><ul><li><h5 id="语法：-5"><a href="#语法：-5" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>cols:一行可以输入多少个字符   </li><li>rows：文本域可以显示几行可以变相控制文本域的宽高</li></ul></li></ul><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><ul><li><h4 id="语法：-6"><a href="#语法：-6" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>推荐使用button按钮</li><li>注意：重置和提交按钮需要配合form标签一起使用</li></ul></li></ul><h4 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h4><ul><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;success.html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>action：设置提交数据的服务器地址</li><li>method：设置提交数据提交方式<ul><li>get：从服务器获取数据，也可以提交数据，但是数据会显示在窗口的地址栏</li><li>post：提交数据给服务器，数据不会显示在窗口的地址栏</li></ul></li></ul></li></ul><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul><li><h5 id="无序列表ul"><a href="#无序列表ul" class="headerlink" title="无序列表ul"></a>无序列表ul</h5><ul><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：默认有16像素的margin  padding-left有40px</p><p>​          ul里面只能放li标签</p><p>​          ul，li标签都是独占一行</p></li></ul></li><li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><ul><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：有序列表ol 默认上下也有16px上下margin 有40px的padding-left</p><p>​           ol里只能发li标签 </p><p>​          ol，li标签都是独占一行</p><p>有序列表和无序列表可以嵌套</p></li></ul></li></ul><ul><li><h5 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h5><ul><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>中华人民共和国<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>汽水<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>碳水化合物，冒着泡泡的肥宅水<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：dl：定义列表 </p><p>​            dt：指定一个名词 dd：针对名词进行解释说明 </p></li></ul></li></ul><h2 id="其他标签："><a href="#其他标签：" class="headerlink" title="其他标签："></a>其他标签：</h2><h5 id="div标签："><a href="#div标签：" class="headerlink" title="div标签："></a>div标签：</h5><ul><li><h5 id="可以看作一个容器结构，并且没有任何样式，独占一行，可以通过CSS自己设置"><a href="#可以看作一个容器结构，并且没有任何样式，独占一行，可以通过CSS自己设置" class="headerlink" title="可以看作一个容器结构，并且没有任何样式，独占一行，可以通过CSS自己设置"></a>可以看作一个容器结构，并且没有任何样式，独占一行，可以通过CSS自己设置</h5></li><li><h5 id="marquee标签：跑马灯，里面的内容从右边进入，从左边滚动到左侧消失，，循环播放"><a href="#marquee标签：跑马灯，里面的内容从右边进入，从左边滚动到左侧消失，，循环播放" class="headerlink" title="marquee标签：跑马灯，里面的内容从右边进入，从左边滚动到左侧消失，，循环播放"></a>marquee标签：跑马灯，里面的内容从右边进入，从左边滚动到左侧消失，，循环播放</h5></li><li><p>语法：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;&quot;</span>&gt;</span>公告：明天周五不上晚自习<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="iframe-框架标签"><a href="#iframe-框架标签" class="headerlink" title="iframe 框架标签"></a>iframe 框架标签</h5><ul><li><p>可以在网页中嵌套其他的网页，可以是在线服务器的网页，也可以是本地服务器的网页</p></li><li><p>语法：src内是需要嵌套的其他网页，可以是在线服务器的网页，也可以是本地服务器的网页</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.woniuxy.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="注意：需要设置宽高，如果宽高不够，自动产生滚动条，不赞成使用"><a href="#注意：需要设置宽高，如果宽高不够，自动产生滚动条，不赞成使用" class="headerlink" title="注意：需要设置宽高，如果宽高不够，自动产生滚动条，不赞成使用"></a>注意：需要设置宽高，如果宽高不够，自动产生滚动条，不赞成使用</h5></li></ul><h5 id="删除线标签-del"><a href="#删除线标签-del" class="headerlink" title="删除线标签 del"></a>删除线标签 del</h5><ul><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>$998<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="带边框的标签-fieldset"><a href="#带边框的标签-fieldset" class="headerlink" title="带边框的标签  fieldset"></a>带边框的标签  fieldset</h5><ul><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置边框上的标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-vscode前端需要安装的插件&quot;&gt;&lt;a href=&quot;#1-vscode前端需要安装的插件&quot; class=&quot;headerlink&quot; title=&quot;1.vscode前端需要安装的插件&quot;&gt;&lt;/a&gt;1.vscode前端需要安装的插件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A</summary>
      
    
    
    
    <category term="Html前端笔记" scheme="https://pipi1002.github.io/categories/Html%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>页面homework</title>
    <link href="https://pipi1002.github.io/2022/11/16/%E9%A1%B5%E9%9D%A2homework/"/>
    <id>https://pipi1002.github.io/2022/11/16/%E9%A1%B5%E9%9D%A2homework/</id>
    <published>2022-11-16T13:26:19.000Z</published>
    <updated>2023-01-02T04:32:01.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雪碧图应用"><a href="#雪碧图应用" class="headerlink" title="雪碧图应用"></a>雪碧图应用</h1><ul><li><p>将多张图片组合在一起，形成一张图片，减少请求服务器的次数，优化网页</p></li><li><p>原理：通过背景样式background-image和background-position来实现雪碧图效果</p></li><li><p>步骤：</p><p> 1.设置一个宽高刚好显示指定图标大小的标签（盒子）</p><p> 2.通过background-image引入雪碧图</p><p> 3.再通过background-position来实现雪碧图的显示位置，调整到指定图标</p></li><li><p>注意：在开发过程中，x轴的正方向是水平向右，y轴的正方向是垂直向下</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;雪碧图应用&quot;&gt;&lt;a href=&quot;#雪碧图应用&quot; class=&quot;headerlink&quot; title=&quot;雪碧图应用&quot;&gt;&lt;/a&gt;雪碧图应用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将多张图片组合在一起，形成一张图片，减少请求服务器的次数，优化网页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="Html前端笔记" scheme="https://pipi1002.github.io/categories/Html%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS样式</title>
    <link href="https://pipi1002.github.io/2022/11/16/CSS%E6%A0%B7%E5%BC%8F/"/>
    <id>https://pipi1002.github.io/2022/11/16/CSS%E6%A0%B7%E5%BC%8F/</id>
    <published>2022-11-16T13:25:29.000Z</published>
    <updated>2023-01-02T04:33:19.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网页由三部分组成："><a href="#网页由三部分组成：" class="headerlink" title="网页由三部分组成："></a>网页由三部分组成：</h1><p>1.html ：网页架构骨架，网页结构的设计</p><p>2.CSS：网页的样式，用于美化网页，有了CSS才能达到像素级的还原</p><p>3.JavaScript：动态脚本，控制页面动画，点击事件</p><h2 id="CSS基本概念："><a href="#CSS基本概念：" class="headerlink" title="CSS基本概念："></a>CSS基本概念：</h2><p>css （Cascading Style Sheets）层叠样式表，主要控制网页样式显示。一般css样式是作用在标签上，控制的是标签显示的样式。</p><p>层叠： css样式可以在多个地方书写，可以在标签上添加style属性添加css样式代码，style标签中书写的，外部css文件中书写css代码，最终层叠在一起，形成一套css样式作用在标签上。相同的css属性只作用一个，不同的直接作用。</p><p>样式表：css的样式代码；页面上通过内联样式，内部样式，外部样式的方式属性css代码</p><h2 id="网页中样式的来源"><a href="#网页中样式的来源" class="headerlink" title="网页中样式的来源"></a>网页中样式的来源</h2><p>注意：所有html默认没有样式</p><ul><li><h4 id="浏览器默认的样式不同"><a href="#浏览器默认的样式不同" class="headerlink" title="浏览器默认的样式不同"></a>浏览器默认的样式不同</h4></li><li><p>所有的html标签默认没有样式，但是a，h标签等默认是浏览器添加的样式  </p></li><li><h4 id="浏览器用户自定义的样式"><a href="#浏览器用户自定义的样式" class="headerlink" title="浏览器用户自定义的样式"></a>浏览器用户自定义的样式</h4></li><li><p>用户可以在浏览器上更改默认标签的样式</p></li></ul><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>在标签上添加style属性，在属性值中书写css样式代码</p><ul><li>语法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;css属性1:css属性1的值;css属性2:css属性2的值&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>好处：哪里需要样式写在哪</p></li><li><p>缺点：多个标签有相同的样式时需重复添加</p></li></ul><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><ul><li><p>在head标签添加style标签，再通过选择器书写css样式代码</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        选择器&#123;</span></span><br><span class="line"><span class="language-css">            css属性<span class="number">1</span>:css属性值<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            css属性<span class="number">2</span>:css属性值<span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>好处：</p><ul><li>​    结构和样式分清了，利与后期代码维护</li><li>​    可以批量选择标签中的标签样式</li></ul></li><li><p>缺点：</p><ul><li>样式和结构完全分离，目前还在一个文件中          </li></ul></li></ul><h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><ul><li><p>先创建一个后缀名为.css文件，再在里面通过选择器书写css样式代码，再在head标签中通过link标签引入css样式文件</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/01-外部样式.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>里面的href:链接css文件</p><ul><li><p>好处：</p><ul><li>样式和结构代码完全分离</li><li>以后维护代码可以一处改处处改</li><li>以后可以将css进行压缩，减少文件体积</li></ul></li><li><h4 id="注意：优先级：相同的选择器，内联-gt-内部-外部-，内部和外部的优先级是依据代码的先后（就近原则）"><a href="#注意：优先级：相同的选择器，内联-gt-内部-外部-，内部和外部的优先级是依据代码的先后（就近原则）" class="headerlink" title="注意：优先级：相同的选择器，内联&gt;内部/外部 ，内部和外部的优先级是依据代码的先后（就近原则）"></a>注意：优先级：相同的选择器，内联&gt;内部/外部 ，内部和外部的优先级是依据代码的先后（就近原则）</h4></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h5 id="相同选择器后面选择器会盖住前面选择器"><a href="#相同选择器后面选择器会盖住前面选择器" class="headerlink" title="相同选择器后面选择器会盖住前面选择器"></a>相同选择器后面选择器会盖住前面选择器</h5><p>  1.标签选择器：</p><ul><li><p>通过标签名找到指定的标签，没有指定范围的时候找到的是页面中所以满足条件的标签</p><p>2.类选择器（class选择器）：</p></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">css属性1：css属性值1；</span><br><span class="line">css属性2：css属性值2；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>又称为class标签，通过标签上class名找到满足条件的标签，多个标签可以共享一个class标签，可以提供公共标签样式</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class名&#123;</span><br><span class="line">css属性1：css属性值1；</span><br><span class="line">css属性2：css属性值2；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  注意：</p><ul><li><p>标签上可以作用多个class名，中间用空格隔开</p></li><li><p>如果选择器多个组合在一起，中间没有空格，代表并且的意思</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">找到页面中class名中即有op又有oa的标签</span><br><span class="line">.op.oa&#123;</span><br><span class="line">css样式代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  3.标签选择器</p><ul><li><p>id是标签上定义的属性，id唯一，找到页面中唯一的标签，精准定位</p></li><li><p>通过标签上id名找到满足条件的标签</p></li><li><p>id命名规则：</p><ul><li><p>以数字，字母，-和_构成</p></li><li><p>不能以数字开头</p></li><li><p>不能包含特殊符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#id名&#123;</span><br><span class="line">css样式代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：id是唯一的，以后通过js会操作标签上id名，id选择器慎用</p><p>优先级问题：</p><ul><li>相同选择器，内联样式权重最大，内部样式和外部样式采用就近原则</li><li>相同选择器同时作用在一个标签上，后面的样式会盖住前面的样式</li><li>选择器权重（优先级）：id选择器&gt;类选择器&gt;标签选择器</li></ul></li></ul></li></ul><h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><ul><li><p><code>background-color</code>：设置背景颜色</p><ul><li>单词（#开头的十六进制数字）</li><li>rgb（0~255，0~255，0~255）</li></ul></li><li><p><code>background-image</code>:设置背景图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSS</span><br><span class="line">background-image:url(链接背景图片的文件路径)</span><br></pre></td></tr></table></figure><ul><li>背景图片默认从盒子左上角开始铺设，如果铺不满默认平铺</li><li>注意：如果背景颜色和图片同时存在，图片盖住背景颜色</li></ul></li><li><p><code>background-repeat</code>:设置背景图片是否平铺</p><ul><li><code>repeat</code>：默认值，x轴，y轴都平铺</li><li><code>repeat-x</code>:x轴方向进行平铺</li><li><code>repeat-y</code>:y轴方向进行平铺</li><li><code>no-repeat</code>:不平铺</li><li>可以实现一个像素渐变背景平铺，减少图片的体积，从而优化网页</li></ul></li><li><p><code>background-position</code>:设置背景图片的显示位置</p><ul><li>x轴 y轴：<ul><li>单词：left right center top bottom 两两搭配使用</li><li>固定的像素值：默认左上角0px，0px</li><li>百分比：50%，50%相当于center center</li></ul></li></ul></li><li><p><code>background-size</code>:设置背景图片的大小，css3提出</p><ul><li><p><code>contain</code>：一边铺满，另一边铺满</p></li><li><p><code>cover</code>:两边都铺满，超出部分隐藏</p></li><li><pre><code>x轴，y轴<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    :宽度，高度</span><br><span class="line"></span><br><span class="line">    - 同时设置两个值，背景图片样式可能变形，只设置一个值，代表图片的宽度</span><br><span class="line"></span><br><span class="line">- `background-attachment`:设置背景图片是否固定 css3提供</span><br><span class="line"></span><br><span class="line">  - score:默认值，图片会随着滚动条滚动</span><br><span class="line">  - fixed：背景图片固定在页面上</span><br><span class="line"></span><br><span class="line">- `background`:复合属性</span><br><span class="line"></span><br></pre></td></tr></table></figure>CSSbackground:pink url(img/img-3.jpg) no-repeat 50% 50% /100px 100px fixed;</code></pre></li><li><p>/前面代表图片显示位置，/后面代表背景图片大小</p></li></ul></li></ul><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><ul><li><code>color</code>:设置文本的颜色</li><li><code>text-align</code>:设置文本的对齐方式<ul><li>left：左对齐</li><li>right：右对齐</li><li>center：中间居中</li></ul></li></ul><p>​                注意：可以控制标签中文本在水平方向的对齐方式，对行级标签同样有效</p><ul><li><code>line-height</code>:设置文本行高</li></ul><p>​        1.像素</p><p>​        2.百分比和数字是参考字体的大小，相当于字体的倍数</p><p>​         注意：一行里面的文本在垂直方向上居中</p><pre><code>                 针对单行文本水平垂直居中，可以设置text-align，line-height等于盒子宽度</code></pre><ul><li><p><code>text-decoration</code>:</p><ul><li>none:无</li><li>underline：下划线</li><li>line-thorugh：中划线</li><li>overline：上划线</li></ul></li><li><p>letter-spacing:设置字符间距，一个中文就是一个字符，一个字母是一个字符 </p></li><li>word-spacing:设置字间距，以空格为参考</li><li>text-indent:设置首行缩进</li><li>text-transform:设置英文字母大小写 capitalize：首字母大写 uppercase：全部大写 lowercase：全部小写</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网页由三部分组成：&quot;&gt;&lt;a href=&quot;#网页由三部分组成：&quot; class=&quot;headerlink&quot; title=&quot;网页由三部分组成：&quot;&gt;&lt;/a&gt;网页由三部分组成：&lt;/h1&gt;&lt;p&gt;1.html ：网页架构骨架，网页结构的设计&lt;/p&gt;
&lt;p&gt;2.CSS：网页的样式，</summary>
      
    
    
    
    <category term="Html前端笔记" scheme="https://pipi1002.github.io/categories/Html%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C-CProject</title>
    <link href="https://pipi1002.github.io/2022/11/16/C-C/"/>
    <id>https://pipi1002.github.io/2022/11/16/C-C/</id>
    <published>2022-11-16T13:25:12.000Z</published>
    <updated>2023-01-05T05:10:04.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;##########################\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;###     1.play   0.exit      ###\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;##########################\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RAND_MAX-32767</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.生成一个随机数</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> guess = <span class="number">0</span>;<span class="comment">//接收猜的数字</span></span><br><span class="line">    <span class="comment">//拿时间戳来设置随机数的生成起始点</span></span><br><span class="line">    <span class="comment">//time_t time(time_t *timer)</span></span><br><span class="line">    <span class="comment">//time_t</span></span><br><span class="line">    ret = <span class="built_in">rand</span>() % <span class="number">100</span> + <span class="number">1</span>;<span class="comment">//生成随机数1到100之间的随机数（一个数被%，只会等于一个1到99的数）</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;,ret);</span></span><br><span class="line">    <span class="comment">//2.猜数字</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请猜数字：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">        <span class="keyword">if</span> (guess &gt; ret)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜大了\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; ret)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜小了\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你！！！猜中了\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));<span class="comment">//在工程里只需要调用一次</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">menu</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">game</span>();<span class="comment">//猜数字游戏</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;猜数字游戏&quot;&gt;&lt;a href=&quot;#猜数字游戏&quot; class=&quot;headerlink&quot; title=&quot;猜数字游戏&quot;&gt;&lt;/a&gt;猜数字游戏&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>C-Ctext</title>
    <link href="https://pipi1002.github.io/2022/11/16/C-Ctext/"/>
    <id>https://pipi1002.github.io/2022/11/16/C-Ctext/</id>
    <published>2022-11-16T13:25:12.000Z</published>
    <updated>2023-09-21T09:57:47.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-C-的学习TEXT"><a href="#C-C-的学习TEXT" class="headerlink" title="C/C++的学习TEXT"></a>C/C++的学习TEXT</h1><h2 id="避免累积乘的问题（for循环嵌套）"><a href="#避免累积乘的问题（for循环嵌套）" class="headerlink" title="避免累积乘的问题（for循环嵌套）"></a>避免累积乘的问题（for循环嵌套）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//1的阶乘，加2的阶乘，加3的阶乘</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, ret, i, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">1</span>; n &lt;= <span class="number">3</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">1</span>;<span class="comment">//为了避免累积乘的现象出现，这一步必须要有</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = ret * i;</span><br><span class="line">&#125;</span><br><span class="line">sum = sum + ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//辗转相除法求两个数的最大公约数，和最小公倍数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, m, n, r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter m,n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">a = m;</span><br><span class="line">b = n;</span><br><span class="line"><span class="keyword">while</span> (m % n)<span class="comment">//如果m%n=0，自动跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line">r = m % n;</span><br><span class="line">m = n;</span><br><span class="line">n = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大公约数=%d\n&quot;</span>, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最小公倍数=%d\n&quot;</span>, a * b / n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闰年计算方法"><a href="#闰年计算方法" class="headerlink" title="闰年计算方法"></a>闰年计算方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (year = <span class="number">1000</span>; year &lt;= <span class="number">2000</span>; year++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//if((year%4==0)&amp;&amp;(year%100!=0))||(year%400==0))</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount=%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="素数：（规则）试除法-1不是素数"><a href="#素数：（规则）试除法-1不是素数" class="headerlink" title="素数：（规则）试除法,1不是素数"></a>素数：（规则）试除法,1不是素数</h2><p>素数只能被1和它本身整除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印100到200间的素数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="comment">//判断i是否为素数</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//此时有两种情况都可以跳出循环，要把它们分离开来</span></span><br><span class="line"><span class="keyword">if</span> (j == i)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\ncount= %d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘输入一个大于2的整数m，判断m是不是素数（）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k,m,i;</span><br><span class="line">    <span class="function"><span class="keyword">do</span></span></span><br><span class="line"><span class="function">        <span class="title">scanf</span><span class="params">(<span class="string">&quot;%d&quot;</span>,&amp;m)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(m&lt;=<span class="number">2</span>);</span><br><span class="line">    k=(<span class="type">int</span>)<span class="built_in">sqrt</span>(m);<span class="comment">//从算法上考虑，为了减少重复量，开平方后面的数就不用相除了</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="keyword">if</span>(m%i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=k)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is not a prime number\n&quot;</span>,m);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is a prime number\n&quot;</span>,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印1到100内包含九的数字："><a href="#打印1到100内包含九的数字：" class="headerlink" title="打印1到100内包含九的数字："></a>打印1到100内包含九的数字：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;   <span class="comment">//如果十位数有9，那么这个数除10就会等于9，如果个位数有9，那么这个数取余%10就会等于9</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">9</span>)</span><br><span class="line">            count ++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i/<span class="number">10</span>==<span class="number">9</span>)</span><br><span class="line">            count ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count=%d\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印1-1-2-1-3-1-4-…-99-1-100-1的值"><a href="#打印1-1-2-1-3-1-4-…-99-1-100-1的值" class="headerlink" title="打印1+1/2-1/3+1/4+…+99/1-100/1的值"></a>打印1+1/2-1/3+1/4+…+99/1-100/1的值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">1</span>;<span class="comment">//flage相当于正负号</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        sum+=flag*<span class="number">1.0</span>/i;</span><br><span class="line">        flag=-flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印九九乘法口诀表（典型循环嵌套）"><a href="#打印九九乘法口诀表（典型循环嵌套）" class="headerlink" title="打印九九乘法口诀表（典型循环嵌套）"></a>打印九九乘法口诀表（典型循环嵌套）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="comment">//确定打印九行</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;<span class="comment">//打印一行</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-3d&quot;</span>,i,j,i*j);<span class="comment">//-3d不够三位左空格补齐</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">7</span>;<span class="comment">//k为要找的数</span></span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</span><br><span class="line">    <span class="type">int</span> sz=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span> (arr[<span class="number">0</span>]);<span class="comment">//计算元素个数</span></span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;      <span class="comment">//左下标</span></span><br><span class="line">    <span class="type">int</span> right=sz<span class="number">-1</span>   <span class="comment">//右下标</span></span><br><span class="line">    <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[mid]&gt;k)<span class="comment">//要找的元素在中间元素左边，左下标不变，右下标变为mid-1</span></span><br><span class="line">      &#123;</span><br><span class="line">        right=mid<span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&lt;k)<span class="comment">//要找的元素在中间元素右边，右下标不变，左下标变成mid+1</span></span><br><span class="line">      &#123;</span><br><span class="line">        left=mid+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">else</span>(arr[mid]==k)</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标为：%d&quot;</span>,mid);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计一个函数，实现二分查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//二分查找：在一个有序数组中查找具体某一个数，如果找到了就返回这个数的下标，找不到返回-1</span></span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">binary_search</span>(arr,k);</span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到了，下表是：%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="char-函数的使用"><a href="#char-函数的使用" class="headerlink" title="char()函数的使用"></a>char()函数的使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从键盘上连续输入字符，并统计其中大写字母的个数直到“换行”字符结束</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;   <span class="comment">//只能终止他所在的循环体</span></span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">           sum++;</span><br><span class="line">    &#125;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入一行字符，分别统计出其中的英文字母，空格，数字和其他字符的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> letter=<span class="number">0</span>,big=<span class="number">0</span>,space=<span class="number">0</span>,digit=<span class="number">0</span>,other=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要统计的字段:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())!=<span class="string">&#x27;\n&#x27;</span>)<span class="comment">//到回车才结束循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            letter++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            big++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            digit++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            other++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;小写=%d\n大写=%d\n空格=%d\n数字=%d\n其它=%d&quot;</span>,letter,big,space,digit,other);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有三行文字的文章，每行有80个字符，分别统计中英文大写字母，小写字母，数字，空格以及其他字符的个数（二维 ）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图案打印"><a href="#图案打印" class="headerlink" title="图案打印"></a>图案打印</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//菱形从上到下a,b,c,d,e,f,g</span></span><br><span class="line">   <span class="function">a</span></span><br><span class="line"><span class="function">  bbb</span></span><br><span class="line"><span class="function"> ccccc</span></span><br><span class="line"><span class="function">ddddddd</span></span><br><span class="line"><span class="function"> eeeee</span></span><br><span class="line"><span class="function">  fff</span></span><br><span class="line"><span class="function">   g</span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="type">int</span> i,j;</span><br><span class="line">       <span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>-i;j++)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">           <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i<span class="number">-1</span>;j++)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">           c=c+<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">           <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">9</span><span class="number">-2</span>*i;j++)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">           c=c+<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="写一个函数，每次调用一次这个函数，就会将num的值加1"><a href="#写一个函数，每次调用一次这个函数，就会将num的值加1" class="headerlink" title="写一个函数，每次调用一次这个函数，就会将num的值加1"></a>写一个函数，每次调用一次这个函数，就会将num的值加1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C++</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//*p++;//++的优先级比较高，++是作用于p的，不是作用于*p的，所以这样写代码是错误的</span></span><br><span class="line">    (*p)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Add</span>(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">Add</span>(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">Add</span>(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写一个程序，加密输出-字符数组应用举例"><a href="#编写一个程序，加密输出-字符数组应用举例" class="headerlink" title="编写一个程序，加密输出(字符数组应用举例)"></a>编写一个程序，加密输出(字符数组应用举例)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密规则：所有的大写英文字母加三，小写英文字母减三，其他字符不变。</span></span><br><span class="line"><span class="comment">//注意：特殊的X，Y，Z这三个大写英文字母直接加三不能使其正确加密，所以加密后让X为A，Y为B，Z为C；同理x,y,z使其为a,b,c.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch,str1[<span class="number">81</span>],str2[<span class="number">81</span>];<span class="comment">//字符数组最大为81，防止溢出</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a string:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">get</span>(str1);<span class="comment">//get函数可以输入包括空格的字符</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str2,str1);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;(ch=str2[i])!=<span class="string">&#x27;\n&#x27;</span>;i++)<span class="comment">//(ch=str2[i])!=&#x27;\0&#x27;代表一直执行直到遇到\0</span></span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">            str2[i]+=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;X&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>||ch==<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">            str2[i]-=<span class="number">23</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;d&#x27;</span>||ch&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            str2[i]-=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;a&#x27;</span>||ch==<span class="string">&#x27;b&#x27;</span>||ch==<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">            str2[i]+=<span class="number">23</span>;</span><br><span class="line">    str2[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原串是:%s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的串是:%s\n,str2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="魔方阵（基数）-鞍点（flag的运用）"><a href="#魔方阵（基数）-鞍点（flag的运用）" class="headerlink" title="魔方阵（基数）/鞍点（flag的运用）"></a>魔方阵（基数）/鞍点（flag的运用）</h2><ul><li><h4 id="魔方阵（是指组成元素为自然数1，2…n的平方的n×n的方阵，其中每个元素值都不相等，且每行，每列以及主副对角线上各n个元素之和都相等）的排列规律："><a href="#魔方阵（是指组成元素为自然数1，2…n的平方的n×n的方阵，其中每个元素值都不相等，且每行，每列以及主副对角线上各n个元素之和都相等）的排列规律：" class="headerlink" title="魔方阵（是指组成元素为自然数1，2…n的平方的n×n的方阵，其中每个元素值都不相等，且每行，每列以及主副对角线上各n个元素之和都相等）的排列规律："></a>魔方阵（是指组成元素为自然数1，2…n的平方的n×n的方阵，其中每个元素值都不相等，且每行，每列以及主副对角线上各n个元素之和都相等）的排列规律：</h4></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">6</span></span><br><span class="line"><span class="number">3</span>  <span class="number">5</span>  <span class="number">7</span></span><br><span class="line"><span class="number">4</span>  <span class="number">9</span>  <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,先给备用数组内所有数赋初值<span class="number">0</span>;(下面的i代表行号，j代表列号)(第<span class="number">1</span>步是为第<span class="number">7</span>步做铺垫)</span><br><span class="line"><span class="number">2</span>,第<span class="number">0</span>行的中间那个数a[i][j]=<span class="number">0</span>,此时i = <span class="number">0</span>,j = n/<span class="number">2</span>;</span><br><span class="line"><span class="number">3</span>,当前的数在首行(i=<span class="number">0</span>)时，下一个数放在最后一行(i=n<span class="number">-1</span>)，j++;</span><br><span class="line"><span class="number">4</span>,当前的数在最后一列(j=n<span class="number">-1</span>)时，下一个数放在第一列(j=<span class="number">0</span>)，i--;</span><br><span class="line"><span class="number">5</span>,如果同时满足了(i=<span class="number">0</span>和j=n<span class="number">-1</span>)，那么进行i=n<span class="number">-1</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="number">6</span>,如果<span class="number">3.4</span><span class="number">.5</span>都不满足，就进行i--,j++;</span><br><span class="line"><span class="number">7</span>,经过上面<span class="number">3</span>步的判断，找到了新的i和j的值，如果此时a[i][j]放的值是<span class="number">0</span>，代表这地方未被用过，可放下一个数；</span><br><span class="line">如果此时这里放的不是<span class="number">0</span>，代表已经被用过了，那么下一个数就直接放到这个数的前面那个数的的下面（比如本例n=<span class="number">3</span>时：<span class="number">4</span>本该放到a[<span class="number">0</span>][<span class="number">1</span>]的，但a[<span class="number">0</span>][<span class="number">1</span>]被<span class="number">1</span>占了，所以，就直接把<span class="number">4</span>放到<span class="number">4</span>的前面那个数<span class="number">3</span>的下面。）</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> i,j,ok,n,m;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)                   <span class="comment">/*给备用的数组做初始化*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j++)</span><br><span class="line">a[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ok = <span class="number">0</span>;                                  <span class="comment">/*限定输入的数必须满足要求*/</span></span><br><span class="line"><span class="keyword">while</span>(ok == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input a number as the value of n:(必须是10以内的奇数)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; n &gt; <span class="number">0</span> &amp;&amp; n &lt; <span class="number">10</span> )</span><br><span class="line">ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ok = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">j = n/<span class="number">2</span>;</span><br><span class="line">a[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(m = <span class="number">2</span>;m &lt;= n*n;m++)                  <span class="comment">/*因为1已经放好了，所以我们从2开始放*/</span></span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>((i == <span class="number">0</span>) &amp;&amp; (j != n<span class="number">-1</span>))            <span class="comment">/*算法中的第3步*/</span></span><br><span class="line">&#123;</span><br><span class="line">i = n<span class="number">-1</span>;</span><br><span class="line">j = j+<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)                  <span class="comment">/*算法中的第7步*/</span></span><br><span class="line">a[i][j] = m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line">a[i][j] = m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((i != <span class="number">0</span>) &amp;&amp; (j == n<span class="number">-1</span>))      <span class="comment">/*算法中的第4步*/</span></span><br><span class="line">&#123;</span><br><span class="line">i = i<span class="number">-1</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)                <span class="comment">/*算法中的第7步*/</span></span><br><span class="line">a[i][j] = m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">j = n - <span class="number">1</span>;</span><br><span class="line">a[i][j] = m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>((i == <span class="number">0</span>) &amp;&amp; (j == n<span class="number">-1</span>))       <span class="comment">/*算法中的第5步*/</span></span><br><span class="line">&#123;</span><br><span class="line">i = n<span class="number">-1</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)                 <span class="comment">/*算法中的第7步*/</span></span><br><span class="line">a[i][j] = m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = n - <span class="number">1</span>;</span><br><span class="line">a[i][j] = m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span>                                 <span class="comment">/*算法中的第6步*/</span></span><br><span class="line">&#123;</span><br><span class="line">i = i<span class="number">-1</span>;</span><br><span class="line">j = j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)                 <span class="comment">/*算法中的第7步*/</span></span><br><span class="line">a[i][j] = m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = i + <span class="number">2</span>;</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line">a[i][j] = m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d阶魔方阵:\n&quot;</span>,n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)                        <span class="comment">/*输出数组*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「Fritie」的原创文章，遵循CC <span class="number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/leipinyuan/article/details/79090126</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="鞍点flag的用法"><a href="#鞍点flag的用法" class="headerlink" title="鞍点flag的用法"></a>鞍点flag的用法</h4><ul><li><h6 id="鞍点：在二维矩阵中-鞍点是在它所在这一行的最大，在列上是最小的"><a href="#鞍点：在二维矩阵中-鞍点是在它所在这一行的最大，在列上是最小的" class="headerlink" title="鞍点：在二维矩阵中,鞍点是在它所在这一行的最大，在列上是最小的"></a>鞍点：在二维矩阵中,鞍点是在它所在这一行的最大，在列上是最小的</h6></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//当需要多次更换矩阵的时候可以定义符号常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//输入数组</span></span><br><span class="line">    <span class="type">int</span> i,j,a[M][N],hangmax,hangmax_j,k,flag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请依次输入%d*%d的数组元素：\n&quot;</span>,M,N);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组如下:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%6d&quot;</span>,&amp;a[i][j]);<span class="comment">//6d控制格式，因为有单位也有双位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hangmax=a[i][j];<span class="comment">//先假设第i行的第一个数是最大数</span></span><br><span class="line">        <span class="comment">//比较第i行哪个数最大</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]&gt;hangmax)</span><br><span class="line">            &#123;</span><br><span class="line">                hangmax=a[i][j];</span><br><span class="line">                hangmax_j=j;<span class="comment">//这里必须有变量来接受最大数的纵下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较第i行最大值是不是在所在列中最小</span></span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;M;k++)<span class="comment">//设新变量k，因为是在一行行比较的大环境下</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k][hangmax_j]&lt;hangmax)<span class="comment">//这一行的hangmax就不是鞍点</span></span><br><span class="line">                <span class="comment">//标志变量的使用，触发flag，锁定鞍点位置</span></span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="comment">//如果flag=1，表示有鞍点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;鞍点是：a[%d][%d]=%d&quot;</span>,i,hangmax_j,max);</span><br><span class="line">            <span class="comment">//二维数组只有一个鞍点，或没有鞍点</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//这里break的作用：防止flag==0被反复执行，因为有可能第一行存在鞍点之后行数不存在鞍点，那么就为flag=0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;该数组不存在鞍点&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印100到200之间的素数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//拿2到n-1的数来进行试除</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%j==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//直接结束函数，不执行这个函数下面的语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//if(j==n)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">200</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断i是不是素数</span></span><br><span class="line">        <span class="comment">//规定不是素数返回0;是素数返回1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">is_prime</span>(i)==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将字符串中ASCII码值最大的放在最前面，"><a href="#将字符串中ASCII码值最大的放在最前面，" class="headerlink" title="将字符串中ASCII码值最大的放在最前面，"></a>将字符串中ASCII码值最大的放在最前面，</h2><h2 id="并使该字符前的原字符顺次向后移动。"><a href="#并使该字符前的原字符顺次向后移动。" class="headerlink" title="并使该字符前的原字符顺次向后移动。"></a>并使该字符前的原字符顺次向后移动。</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 30</span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[M];</span><br><span class="line"><span class="type">int</span> i,max,max_i;</span><br><span class="line"><span class="comment">//输入数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter a string:&quot;</span>);</span><br><span class="line"><span class="built_in">gets</span>(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n the original string:&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line">max = str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;M; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] &gt; max)</span><br><span class="line">&#123;</span><br><span class="line">max = str[i];</span><br><span class="line">max_i = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//不能这样写的原因是如果输入pipiwrr，结果是wpppprr，会覆盖结果</span></span><br><span class="line"><span class="comment">/*for (i = 0; i &lt; max_i; i++)</span></span><br><span class="line"><span class="comment">str[i + 1] = str[i];*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=max_i;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        str[i+<span class="number">1</span>]=str[i];</span><br><span class="line">str[<span class="number">0</span>] = max;</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡法排序"><a href="#冒泡法排序" class="headerlink" title="冒泡法排序"></a>冒泡法排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入一个正整数n(1&lt;n&lt;=10),再输入n个整数，按绝对值从小到大排序后输出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[N] = &#123;<span class="number">0</span>&#125;,n,i,j,max;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入多少个正整数n:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="comment">//打印一遍</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印这个数组:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)<span class="comment">//冒泡法重点在于趟数与数字数的关系，趟数等于数字数减一</span></span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">max = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = max; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排列后的顺序:\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序数组中的数字(cong&#x27;x)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//确定冒泡排序的趟数</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;sz<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">1</span>;<span class="comment">//假设这一趟要排序的数据已经有序</span></span><br><span class="line">        <span class="comment">//每一趟冒泡排序</span></span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;sz<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                flag=<span class="number">0</span>;<span class="comment">//本躺排序的数据其实不完全有序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//对arr进行排序，排成升序</span></span><br><span class="line">    <span class="comment">//arr是数组，我们对数组进行传参，真实传递过去的并不是数组本身，而是首元素的地址 &amp;arr[0]</span></span><br><span class="line">    <span class="built_in">bubble_sort</span>(arr);<span class="comment">//冒泡排序函数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杨辉三角形-要求打印十行"><a href="#杨辉三角形-要求打印十行" class="headerlink" title="杨辉三角形(要求打印十行)"></a>杨辉三角形(要求打印十行)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 11</span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,a[N][N];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)<span class="comment">//贴切生活，从第一行开始而不从0行开始,列也是如此</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i][i]=<span class="number">1</span>;</span><br><span class="line">        a[i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">            a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;杨辉三角形:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="求周边数组元素之和-4行5列"><a href="#求周边数组元素之和-4行5列" class="headerlink" title="求周边数组元素之和(4行5列)"></a>求周边数组元素之和(4行5列)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[M][N]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>&#125;&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//根据需求可以更换数组元素</span></span><br><span class="line">    <span class="type">int</span> i,j,s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++)<span class="comment">//打印数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)<span class="comment">//第一行数组元素加上最后一行数组元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        s=s+a[<span class="number">0</span>][j];</span><br><span class="line">        s+=a[M<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s+=a[i][<span class="number">0</span>];<span class="comment">//打印最左边去掉第一行和最后一行的数组元素</span></span><br><span class="line">        s+=a[i][N<span class="number">-1</span>];<span class="comment">//打印最右行去掉第一行和最后一行的数组元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除有序数组中的相同数"><a href="#删除有序数组中的相同数" class="headerlink" title="删除有序数组中的相同数"></a>删除有序数组中的相同数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 15</span></span><br><span class="line"><span class="built_in">main</span>()<span class="comment">//第一种方法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k=<span class="number">0</span>,b=[N];<span class="comment">//将排除过相同数的数组填到数组b中</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">15</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[k]=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;N;j++)<span class="comment">//如果后一个数组元素和前一个不等就把这两个数分别赋给b数组的两个数组元素；如果后一个数组等于前一个数组元素，那么把这两个数组元素赋给b数组的同一个数组元素</span></span><br><span class="line">            <span class="keyword">if</span>(a[i]!=a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出内层循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;<span class="comment">//else和离它最近的没有匹配的if进行匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%6d&quot;</span>,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()<span class="comment">//第二种方法，自认为好理解</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,k=<span class="number">0</span>,n=<span class="number">0</span>,b[N];</span><br><span class="line">    <span class="type">int</span> a[N]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)<span class="comment">//如果后一个数组元素和前一个不等就把这两个数分别赋给b数组的两个数组元素；如果后一个数组等于前一个数组元素，那么把这两个数组元素赋给b数组的同一个数组元素   和第一种方法思想差不多，就是程序书写不一样</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]!=a[i+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            b[k]=a[i];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%6d&quot;</span>,b[i]);</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&quot;%6d&quot;</span>,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计一个函数，输入一个4位数字，要求输出这4个数字字符，但每两个数字间空一个空格。例如，输入1990，应输入“1-9-9-0”"><a href="#设计一个函数，输入一个4位数字，要求输出这4个数字字符，但每两个数字间空一个空格。例如，输入1990，应输入“1-9-9-0”" class="headerlink" title="设计一个函数，输入一个4位数字，要求输出这4个数字字符，但每两个数字间空一个空格。例如，输入1990，应输入“1 9 9 0”"></a>设计一个函数，输入一个4位数字，要求输出这4个数字字符，但每两个数字间空一个空格。例如，输入1990，应输入“1 9 9 0”</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">81</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input four digits:\n&quot;</span>);</span><br><span class="line"><span class="built_in">gets</span>(str);<span class="comment">//录入数组元素</span></span><br><span class="line"><span class="built_in">insert</span>(str);<span class="comment">//调用函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;output digits after insert space:\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(str);<span class="comment">//输出更改过后的数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="built_in">strlen</span>(str); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">str[<span class="number">2</span> * i] = str[i];<span class="comment">//把数字放在下标为0，2，4，6这几个数组元素中</span></span><br><span class="line">str[<span class="number">2</span> * i - <span class="number">1</span>] = <span class="string">&#x27; &#x27;</span>;<span class="comment">//把空格放在下标为1，3，5，7的数组元素中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="置换一个字符串中的字符eg-werty置换成ytrew"><a href="#置换一个字符串中的字符eg-werty置换成ytrew" class="headerlink" title="置换一个字符串中的字符eg.werty置换成ytrew"></a>置换一个字符串中的字符eg.werty置换成ytrew</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 5<span class="comment">//定义大小最好定义大一点</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> j, k;</span><br><span class="line"><span class="type">char</span> temp;</span><br><span class="line">k = <span class="built_in">strlen</span>(a) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= k; j++)<span class="comment">//第一个和最后一个互换，第二个和倒数第二个互换...</span></span><br><span class="line">&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[k];</span><br><span class="line">a[k] = temp;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[M];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;置换前的字符串:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a);<span class="comment">//直接打印一个字符串</span></span><br><span class="line"><span class="built_in">fun</span>(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;置换后的字符串:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="描述第n个斐波那契数-函数的递归与迭代"><a href="#描述第n个斐波那契数-函数的递归与迭代" class="headerlink" title="描述第n个斐波那契数(函数的递归与迭代)"></a>描述第n个斐波那契数(函数的递归与迭代)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1  1  2  3  5  8  13  21  34  55... </span></span><br><span class="line"><span class="comment">/*用递归来写效率非常低</span></span><br><span class="line"><span class="comment">int Fib()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(n&lt;=2)</span></span><br><span class="line"><span class="comment">        return 1;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">        return Fib(n-1)+Fib(n-2)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//用迭代来写,用三个变量不断赋值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fib</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;<span class="comment">//前两个斐波那契数</span></span><br><span class="line">    <span class="type">int</span> b=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">1</span>;<span class="comment">//如果求前两个斐波那契数，直接return 1，不进循环</span></span><br><span class="line">    <span class="comment">//只有从第三个数开始才用这个方法</span></span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c=a+b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="comment">//递归方法：</span></span><br><span class="line">    <span class="comment">//Fib&lt;=2时为1</span></span><br><span class="line">    <span class="comment">//Fib&gt;2时为Fib(n-1)+Fib(n-2)</span></span><br><span class="line">    ret=<span class="built_in">Fib</span>(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret=%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2><h4 id="三个柱子，第一个上面有几个从小到大的圆盘，要求按原顺序移动到另一个柱子上，一次只能挪1个，最少需要几步？"><a href="#三个柱子，第一个上面有几个从小到大的圆盘，要求按原顺序移动到另一个柱子上，一次只能挪1个，最少需要几步？" class="headerlink" title="(三个柱子，第一个上面有几个从小到大的圆盘，要求按原顺序移动到另一个柱子上，一次只能挪1个，最少需要几步？)"></a>(三个柱子，第一个上面有几个从小到大的圆盘，要求按原顺序移动到另一个柱子上，一次只能挪1个，最少需要几步？)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 青蛙跳台问题</span><br><span class="line"></span><br><span class="line">#### (n个台阶，<span class="number">1</span>次可以跳一个台阶，也可以跳两个台阶，这只青蛙要跳到第n个台阶上，有多少种跳法）</span><br><span class="line"></span><br><span class="line">## 用人民币一元兑换<span class="number">1</span>分，<span class="number">2</span>分，<span class="number">5</span>分硬币，共有多少种不同换法</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c1, c2, c5, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1元硬币有以下兑换方法：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(c1=<span class="number">0</span>;c1&lt;=<span class="number">100</span>;c1++)</span><br><span class="line"><span class="keyword">for</span>(c2=<span class="number">0</span>;c2&lt;=<span class="number">50</span>;c2++)</span><br><span class="line"><span class="keyword">for</span>(c5=<span class="number">0</span>;c5&lt;=<span class="number">20</span>;c5++)</span><br><span class="line"><span class="keyword">if</span> (c1 * <span class="number">1</span> + c2 * <span class="number">2</span> + c5 * <span class="number">5</span> == <span class="number">100</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d个1分硬币，%3d个2分硬币，%3d个5分硬币\n&quot;</span>, c1, c2, c5);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;共有%d种方法\n&quot;</span>, cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请编写函数-将含有数字的字符串-实现将字符串中从左至右的数字提出并按提出顺序组成一个新的整型数据。-要求使用字符数组和字符指针来实现"><a href="#请编写函数-将含有数字的字符串-实现将字符串中从左至右的数字提出并按提出顺序组成一个新的整型数据。-要求使用字符数组和字符指针来实现" class="headerlink" title="请编写函数,将含有数字的字符串,实现将字符串中从左至右的数字提出并按提出顺序组成一个新的整型数据。 (要求使用字符数组和字符指针来实现)"></a>请编写函数,将含有数字的字符串,实现将字符串中从左至右的数字提出并按提出顺序组成一个新的整型数据。 (要求使用字符数组和字符指针来实现)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t,s=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (*p)  </span><br><span class="line">&#123;<span class="keyword">if</span> ((*p)&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp;(*p)&lt;=<span class="string">&#x27;9&#x27;</span>)  </span><br><span class="line">  &#123;</span><br><span class="line">    t=(*p)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    s=s*<span class="number">10</span>+t;  <span class="comment">//*10的目的，让数组中的数字，从大到小依次对于这个新的整形数据的各十百千...位</span></span><br><span class="line">  &#125; </span><br><span class="line">p++;&#125; </span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">80</span>]; </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入一串含有数字的字符串:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;字符串%s中的数字字符组成的整数为:\n&quot;</span>,s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find</span>(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入一个八进制数字字符串，函数convert将其转换成十进制数后输出"><a href="#输入一个八进制数字字符串，函数convert将其转换成十进制数后输出" class="headerlink" title="输入一个八进制数字字符串，函数convert将其转换成十进制数后输出"></a>输入一个八进制数字字符串，函数convert将其转换成十进制数后输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">convert</span><span class="params">(<span class="type">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n=<span class="number">0</span>,a[<span class="number">6</span>]; </span><br><span class="line">    <span class="keyword">while</span>(*p) </span><br><span class="line">    &#123; </span><br><span class="line">      n=n*<span class="number">8</span>+*p-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//进制转换 </span></span><br><span class="line">      p++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个8进制数字的字符串: &quot;</span>);</span><br><span class="line"><span class="built_in">gets</span>(s);</span><br><span class="line">a=<span class="built_in">convert</span>(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*采用的具体方法是余除法，例如八进制数12，取余分解出最低位为2，再乘以相应的权重，由于是最低位，所以权重是8的0次方=1；再用12/10，进行下一轮循环，取余分解出最低位1，再乘以相应的权重，权重为8的一次方=8，累加起来为2+8=10，所以相对于的十进制数为10*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Trans</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=(n%<span class="number">10</span>)*<span class="built_in">pow</span>(<span class="number">8</span>,i++);</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个八进制数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转化为十进制数为:&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">Trans</span>(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用函数用指针实现将某字符串复制到一个空字符串的功能（要求在主函数中输入字符串，并输出复制后的结果）"><a href="#调用函数用指针实现将某字符串复制到一个空字符串的功能（要求在主函数中输入字符串，并输出复制后的结果）" class="headerlink" title="调用函数用指针实现将某字符串复制到一个空字符串的功能（要求在主函数中输入字符串，并输出复制后的结果）"></a>调用函数用指针实现将某字符串复制到一个空字符串的功能（要求在主函数中输入字符串，并输出复制后的结果）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">char</span> *s,<span class="type">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *t++=*s++;<span class="comment">//使每个数组元素都复制到空zi&#x27;fu</span></span><br><span class="line">    &#125;</span><br><span class="line">    *t=<span class="string">&#x27;\0&#x27;</span>;<span class="comment">//使复制完成后以\0结尾，方便打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s1[<span class="number">100</span>],s2[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input s1:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(s1);</span><br><span class="line">    <span class="built_in">fun</span>(s1,s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2 is %s\n&quot;</span>,s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出1到100之内共有多少个完数（完数是指一个数的因子之和等于这个数本身，例如6-1-2-3-那么6就是一个完数）"><a href="#输出1到100之内共有多少个完数（完数是指一个数的因子之和等于这个数本身，例如6-1-2-3-那么6就是一个完数）" class="headerlink" title="输出1到100之内共有多少个完数（完数是指一个数的因子之和等于这个数本身，例如6=1+2+3 那么6就是一个完数）"></a>输出1到100之内共有多少个完数（完数是指一个数的因子之和等于这个数本身，例如6=1+2+3 那么6就是一个完数）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,x,sum=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(x=<span class="number">1</span>;x&lt;=N;x++)<span class="comment">//检测1到100之内的数，x是要检测的数，n是1到100中完数的个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum=<span class="number">0</span>;<span class="comment">//每次循环都要归零</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;x;i++)<span class="comment">//用i试除看此时的i是不是x的因数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="comment">//说明此时i是x的因数</span></span><br><span class="line">                sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==sum)<span class="comment">//判断因字数之和等不等于其本身(注意这个if条件语句的位置)</span></span><br><span class="line">            n++;</span><br><span class="line">    &#125;</span><br><span class="line">    returm n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>,M=<span class="number">100</span>; <span class="function"><span class="type">void</span> <span class="title">NONO</span><span class="params">()</span></span>;</span><br><span class="line">  sum=<span class="built_in">fun</span>(M);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;共有完数个数为:%d\n&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pi的估算"><a href="#pi的估算" class="headerlink" title="pi的估算"></a>pi的估算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//1+1*1/3+1*1/3*2/5+...</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> s=<span class="number">2.0</span>,t=<span class="number">2.0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&gt;<span class="number">1e-16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=t*i/j;</span><br><span class="line">        s=s+t;</span><br><span class="line">        i++;</span><br><span class="line">        j=j+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pi=%.10lf\n&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-C-的学习TEXT&quot;&gt;&lt;a href=&quot;#C-C-的学习TEXT&quot; class=&quot;headerlink&quot; title=&quot;C/C++的学习TEXT&quot;&gt;&lt;/a&gt;C/C++的学习TEXT&lt;/h1&gt;&lt;h2 id=&quot;避免累积乘的问题（for循环嵌套）&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="C语言基础笔记" scheme="https://pipi1002.github.io/categories/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
